
RTOS-LCD-maxTouch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00012528  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00412528  00412528  00022528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00412530  00030000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000be88  204009c0  00412ef0  000309c0  2**2
                  ALLOC
  4 .stack        00002000  2040c848  0041ed78  000309c0  2**0
                  ALLOC
  5 .heap         00000200  2040e848  00420d78  000309c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000309c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000309ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   000275e5  00000000  00000000  00030a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005215  00000000  00000000  0005802c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000d0c8  00000000  00000000  0005d241  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000011d0  00000000  00000000  0006a309  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001470  00000000  00000000  0006b4d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002516b  00000000  00000000  0006c949  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00014c99  00000000  00000000  00091ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009c823  00000000  00000000  000a674d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003960  00000000  00000000  00142f70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	48 e8 40 20 1d 1c 40 00 1b 1c 40 00 1b 1c 40 00     H.@ ..@...@...@.
  400010:	1b 1c 40 00 1b 1c 40 00 1b 1c 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	f5 1f 40 00 1b 1c 40 00 00 00 00 00 95 20 40 00     ..@...@...... @.
  40003c:	fd 20 40 00 1b 1c 40 00 1b 1c 40 00 1b 1c 40 00     . @...@...@...@.
  40004c:	1b 1c 40 00 1b 1c 40 00 1b 1c 40 00 1b 1c 40 00     ..@...@...@...@.
  40005c:	1b 1c 40 00 1b 1c 40 00 00 00 00 00 95 15 40 00     ..@...@.......@.
  40006c:	a9 15 40 00 bd 15 40 00 1b 1c 40 00 1b 1c 40 00     ..@...@...@...@.
  40007c:	1b 1c 40 00 d1 15 40 00 e5 15 40 00 1b 1c 40 00     ..@...@...@...@.
  40008c:	1b 1c 40 00 1b 1c 40 00 1b 1c 40 00 1b 1c 40 00     ..@...@...@...@.
  40009c:	1b 1c 40 00 1b 1c 40 00 1b 1c 40 00 1b 1c 40 00     ..@...@...@...@.
  4000ac:	1b 1c 40 00 1b 1c 40 00 1b 1c 40 00 1b 1c 40 00     ..@...@...@...@.
  4000bc:	1b 1c 40 00 1b 1c 40 00 1b 1c 40 00 1b 1c 40 00     ..@...@...@...@.
  4000cc:	1b 1c 40 00 1b 1c 40 00 1b 1c 40 00 1b 1c 40 00     ..@...@...@...@.
  4000dc:	1b 1c 40 00 1b 1c 40 00 1b 1c 40 00 1b 1c 40 00     ..@...@...@...@.
  4000ec:	1b 1c 40 00 1b 1c 40 00 1b 1c 40 00 1b 1c 40 00     ..@...@...@...@.
  4000fc:	1b 1c 40 00 1b 1c 40 00 1b 1c 40 00 1b 1c 40 00     ..@...@...@...@.
  40010c:	1b 1c 40 00 1b 1c 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 1b 1c 40 00 1b 1c 40 00 1b 1c 40 00     ......@...@...@.
  40012c:	1b 1c 40 00 1b 1c 40 00 1b 1c 40 00 1b 1c 40 00     ..@...@...@...@.
  40013c:	1b 1c 40 00 1b 1c 40 00 1b 1c 40 00 1b 1c 40 00     ..@...@...@...@.
  40014c:	1b 1c 40 00 1b 1c 40 00 00 00 00 00 00 00 00 00     ..@...@.........
	...

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c0 	.word	0x204009c0
  400184:	00000000 	.word	0x00000000
  400188:	00412530 	.word	0x00412530

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00412530 	.word	0x00412530
  4001c8:	204009c4 	.word	0x204009c4
  4001cc:	00412530 	.word	0x00412530
  4001d0:	00000000 	.word	0x00000000

004001d4 <mxt_init_device>:
 * \param chgpin IOPORT pin instance attached to the maXTouch device's /CHG pin
 * \return Operation result status code
 */
status_code_t mxt_init_device(struct mxt_device *device,
		twihs_master_t interface, uint8_t chip_adr, uint32_t chgpin)
{
  4001d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4001d6:	b087      	sub	sp, #28
  4001d8:	4604      	mov	r4, r0
  4001da:	460e      	mov	r6, r1
  4001dc:	4617      	mov	r7, r2
	int8_t status;

	/* Set TWI interface, TWI address and CHG-pin of the maXTouch device. */
	device->interface = interface;
  4001de:	6081      	str	r1, [r0, #8]
	device->mxt_chip_adr = chip_adr;
  4001e0:	7302      	strb	r2, [r0, #12]
	device->chgpin = chgpin;
  4001e2:	6183      	str	r3, [r0, #24]
	device->handler = NULL;
  4001e4:	2500      	movs	r5, #0
  4001e6:	6105      	str	r5, [r0, #16]
			malloc(sizeof(struct mxt_info_object));
  4001e8:	2007      	movs	r0, #7
  4001ea:	4b9d      	ldr	r3, [pc, #628]	; (400460 <mxt_init_device+0x28c>)
  4001ec:	4798      	blx	r3
	device->info_object = (struct mxt_info_object *)
  4001ee:	6020      	str	r0, [r4, #0]
	twihs_package_t packet = {
  4001f0:	9501      	str	r5, [sp, #4]
  4001f2:	9505      	str	r5, [sp, #20]
  4001f4:	2302      	movs	r3, #2
  4001f6:	9302      	str	r3, [sp, #8]
  4001f8:	9003      	str	r0, [sp, #12]
  4001fa:	2307      	movs	r3, #7
  4001fc:	9304      	str	r3, [sp, #16]
  4001fe:	f88d 7014 	strb.w	r7, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400202:	a901      	add	r1, sp, #4
  400204:	4630      	mov	r0, r6
  400206:	4b97      	ldr	r3, [pc, #604]	; (400464 <mxt_init_device+0x290>)
  400208:	4798      	blx	r3
  40020a:	1b40      	subs	r0, r0, r5
  40020c:	bf18      	it	ne
  40020e:	2001      	movne	r0, #1
  400210:	4240      	negs	r0, r0
	if ((status = mxt_read_id_block(device)) != STATUS_OK) {
  400212:	b108      	cbz	r0, 400218 <mxt_init_device+0x44>
	}

	device->multitouch_report_offset = status;

	return STATUS_OK;
}
  400214:	b007      	add	sp, #28
  400216:	bdf0      	pop	{r4, r5, r6, r7, pc}
			malloc(device->info_object->obj_count *
  400218:	6825      	ldr	r5, [r4, #0]
  40021a:	79a8      	ldrb	r0, [r5, #6]
  40021c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  400220:	0040      	lsls	r0, r0, #1
  400222:	4b8f      	ldr	r3, [pc, #572]	; (400460 <mxt_init_device+0x28c>)
  400224:	4798      	blx	r3
	device->object_list = (struct mxt_object *)
  400226:	6060      	str	r0, [r4, #4]
	twihs_package_t packet = {
  400228:	2300      	movs	r3, #0
  40022a:	9301      	str	r3, [sp, #4]
  40022c:	9304      	str	r3, [sp, #16]
  40022e:	9305      	str	r3, [sp, #20]
  400230:	2307      	movs	r3, #7
  400232:	f88d 3004 	strb.w	r3, [sp, #4]
  400236:	2302      	movs	r3, #2
  400238:	9302      	str	r3, [sp, #8]
  40023a:	9003      	str	r0, [sp, #12]
		.length       = device->info_object->obj_count *
  40023c:	79ab      	ldrb	r3, [r5, #6]
  40023e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400242:	005b      	lsls	r3, r3, #1
	twihs_package_t packet = {
  400244:	9304      	str	r3, [sp, #16]
  400246:	7b23      	ldrb	r3, [r4, #12]
  400248:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  40024c:	a901      	add	r1, sp, #4
  40024e:	68a0      	ldr	r0, [r4, #8]
  400250:	4b84      	ldr	r3, [pc, #528]	; (400464 <mxt_init_device+0x290>)
  400252:	4798      	blx	r3
  400254:	3000      	adds	r0, #0
  400256:	bf18      	it	ne
  400258:	2001      	movne	r0, #1
  40025a:	4240      	negs	r0, r0
	if (status != STATUS_OK) {
  40025c:	2800      	cmp	r0, #0
  40025e:	d1d9      	bne.n	400214 <mxt_init_device+0x40>
	uint8_t *id_pointer = (uint8_t *)device->info_object;
  400260:	6827      	ldr	r7, [r4, #0]
	uint8_t *objects_pointer = (uint8_t *)device->object_list;
  400262:	6860      	ldr	r0, [r4, #4]
			(device->info_object->obj_count *
  400264:	79bb      	ldrb	r3, [r7, #6]
  400266:	eb03 0643 	add.w	r6, r3, r3, lsl #1
  40026a:	0076      	lsls	r6, r6, #1
	crc_area_size = MXT_ID_BLOCK_SIZE +
  40026c:	3607      	adds	r6, #7
  40026e:	b2b6      	uxth	r6, r6
  400270:	463a      	mov	r2, r7
  400272:	3706      	adds	r7, #6
	uint32_t crc_tmp = 0;
  400274:	2100      	movs	r1, #0
		result ^= crcpoly;
  400276:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 400468 <mxt_init_device+0x294>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  40027a:	f892 e001 	ldrb.w	lr, [r2, #1]
  40027e:	7815      	ldrb	r5, [r2, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  400280:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
  400284:	ea85 0141 	eor.w	r1, r5, r1, lsl #1
	if (result & 0x1000000) {
  400288:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
		result ^= crcpoly;
  40028c:	bf18      	it	ne
  40028e:	ea81 010c 	eorne.w	r1, r1, ip
  400292:	3202      	adds	r2, #2
	for (i = 0; i < MXT_ID_BLOCK_SIZE - 1; i += 2) {
  400294:	42ba      	cmp	r2, r7
  400296:	d1f0      	bne.n	40027a <mxt_init_device+0xa6>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  400298:	7802      	ldrb	r2, [r0, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  40029a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40029e:	ea83 0241 	eor.w	r2, r3, r1, lsl #1
	if (result & 0x1000000) {
  4002a2:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4002a6:	d003      	beq.n	4002b0 <mxt_init_device+0xdc>
		result ^= crcpoly;
  4002a8:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  4002ac:	f082 021b 	eor.w	r2, r2, #27
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4002b0:	f1a6 0708 	sub.w	r7, r6, #8
  4002b4:	2f01      	cmp	r7, #1
  4002b6:	dd12      	ble.n	4002de <mxt_init_device+0x10a>
  4002b8:	2301      	movs	r3, #1
		result ^= crcpoly;
  4002ba:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 400468 <mxt_init_device+0x294>
		crc_tmp = mxt_crc_24(crc_tmp, objects_pointer[i],
  4002be:	18c1      	adds	r1, r0, r3
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  4002c0:	784d      	ldrb	r5, [r1, #1]
  4002c2:	5cc1      	ldrb	r1, [r0, r3]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4002c4:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  4002c8:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
	if (result & 0x1000000) {
  4002cc:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		result ^= crcpoly;
  4002d0:	bf18      	it	ne
  4002d2:	ea82 020e 	eorne.w	r2, r2, lr
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4002d6:	3302      	adds	r3, #2
  4002d8:	b29b      	uxth	r3, r3
  4002da:	42bb      	cmp	r3, r7
  4002dc:	dbef      	blt.n	4002be <mxt_init_device+0xea>
	crc_tmp = mxt_crc_24(crc_tmp,
  4002de:	4430      	add	r0, r6
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4002e0:	f810 3c08 	ldrb.w	r3, [r0, #-8]
  4002e4:	ea83 0242 	eor.w	r2, r3, r2, lsl #1
	if (result & 0x1000000) {
  4002e8:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4002ec:	d003      	beq.n	4002f6 <mxt_init_device+0x122>
		result ^= crcpoly;
  4002ee:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  4002f2:	f082 021b 	eor.w	r2, r2, #27
	*crc = (crc_tmp & 0x00FFFFFF);
  4002f6:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	twihs_package_t packet = {
  4002fa:	2300      	movs	r3, #0
  4002fc:	9301      	str	r3, [sp, #4]
  4002fe:	9305      	str	r3, [sp, #20]
  400300:	f88d 6004 	strb.w	r6, [sp, #4]
  400304:	0a36      	lsrs	r6, r6, #8
  400306:	f88d 6005 	strb.w	r6, [sp, #5]
  40030a:	2302      	movs	r3, #2
  40030c:	9302      	str	r3, [sp, #8]
  40030e:	f8cd d00c 	str.w	sp, [sp, #12]
  400312:	2303      	movs	r3, #3
  400314:	9304      	str	r3, [sp, #16]
  400316:	7b23      	ldrb	r3, [r4, #12]
  400318:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  40031c:	a901      	add	r1, sp, #4
  40031e:	68a0      	ldr	r0, [r4, #8]
  400320:	4b50      	ldr	r3, [pc, #320]	; (400464 <mxt_init_device+0x290>)
  400322:	4798      	blx	r3
  400324:	b328      	cbz	r0, 400372 <mxt_init_device+0x19e>
		return ERR_IO_ERROR;
  400326:	f04f 33ff 	mov.w	r3, #4294967295
	if (crc_calculated != crc_read) {
  40032a:	42ab      	cmp	r3, r5
  40032c:	f040 808b 	bne.w	400446 <mxt_init_device+0x272>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400330:	6825      	ldr	r5, [r4, #0]
  400332:	79a8      	ldrb	r0, [r5, #6]
  400334:	b198      	cbz	r0, 40035e <mxt_init_device+0x18a>
  400336:	2300      	movs	r3, #0
  400338:	3301      	adds	r3, #1
  40033a:	b2da      	uxtb	r2, r3
  40033c:	4290      	cmp	r0, r2
  40033e:	d8fb      	bhi.n	400338 <mxt_init_device+0x164>
		tot_report_ids += (device->object_list[i].num_report_ids);
  400340:	6862      	ldr	r2, [r4, #4]
  400342:	1e43      	subs	r3, r0, #1
  400344:	b2db      	uxtb	r3, r3
  400346:	3301      	adds	r3, #1
  400348:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40034c:	eb02 0143 	add.w	r1, r2, r3, lsl #1
  400350:	2000      	movs	r0, #0
  400352:	7953      	ldrb	r3, [r2, #5]
  400354:	4418      	add	r0, r3
  400356:	b2c0      	uxtb	r0, r0
  400358:	3206      	adds	r2, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40035a:	4291      	cmp	r1, r2
  40035c:	d1f9      	bne.n	400352 <mxt_init_device+0x17e>
			malloc(sizeof(struct mxt_report_id_map) *
  40035e:	0040      	lsls	r0, r0, #1
  400360:	4b3f      	ldr	r3, [pc, #252]	; (400460 <mxt_init_device+0x28c>)
  400362:	4798      	blx	r3
	device->report_id_map = (struct mxt_report_id_map *)
  400364:	6160      	str	r0, [r4, #20]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400366:	79ab      	ldrb	r3, [r5, #6]
  400368:	b173      	cbz	r3, 400388 <mxt_init_device+0x1b4>
  40036a:	2700      	movs	r7, #0
  40036c:	2601      	movs	r6, #1
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  40036e:	46be      	mov	lr, r7
  400370:	e037      	b.n	4003e2 <mxt_init_device+0x20e>
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  400372:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400376:	f89d 3000 	ldrb.w	r3, [sp]
  40037a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40037e:	f89d 2001 	ldrb.w	r2, [sp, #1]
  400382:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400386:	e7d0      	b.n	40032a <mxt_init_device+0x156>
		return ERR_BAD_DATA;
  400388:	f06f 0003 	mvn.w	r0, #3
  40038c:	e742      	b.n	400214 <mxt_init_device+0x40>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  40038e:	3001      	adds	r0, #1
  400390:	b2c0      	uxtb	r0, r0
  400392:	6862      	ldr	r2, [r4, #4]
  400394:	1953      	adds	r3, r2, r5
  400396:	7919      	ldrb	r1, [r3, #4]
  400398:	4281      	cmp	r1, r0
  40039a:	d31c      	bcc.n	4003d6 <mxt_init_device+0x202>
			if (device->object_list[i].num_report_ids != 0) {
  40039c:	795b      	ldrb	r3, [r3, #5]
  40039e:	2b00      	cmp	r3, #0
  4003a0:	d0f5      	beq.n	40038e <mxt_init_device+0x1ba>
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4003a2:	6862      	ldr	r2, [r4, #4]
  4003a4:	442a      	add	r2, r5
  4003a6:	7953      	ldrb	r3, [r2, #5]
  4003a8:	2b00      	cmp	r3, #0
  4003aa:	d0f0      	beq.n	40038e <mxt_init_device+0x1ba>
  4003ac:	4633      	mov	r3, r6
							device->object_list[i].type;
  4003ae:	7811      	ldrb	r1, [r2, #0]
					device->report_id_map[id_index].object_type =
  4003b0:	6962      	ldr	r2, [r4, #20]
  4003b2:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					device->report_id_map[id_index].instance = j;
  4003b6:	6962      	ldr	r2, [r4, #20]
  4003b8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  4003bc:	7050      	strb	r0, [r2, #1]
					id_index++;
  4003be:	3301      	adds	r3, #1
  4003c0:	b2db      	uxtb	r3, r3
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4003c2:	6862      	ldr	r2, [r4, #4]
  4003c4:	442a      	add	r2, r5
  4003c6:	1b99      	subs	r1, r3, r6
  4003c8:	f892 c005 	ldrb.w	ip, [r2, #5]
  4003cc:	b2c9      	uxtb	r1, r1
  4003ce:	458c      	cmp	ip, r1
  4003d0:	d8ed      	bhi.n	4003ae <mxt_init_device+0x1da>
					id_index++;
  4003d2:	461e      	mov	r6, r3
  4003d4:	e7db      	b.n	40038e <mxt_init_device+0x1ba>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4003d6:	3701      	adds	r7, #1
  4003d8:	b2ff      	uxtb	r7, r7
  4003da:	6823      	ldr	r3, [r4, #0]
  4003dc:	799b      	ldrb	r3, [r3, #6]
  4003de:	429f      	cmp	r7, r3
  4003e0:	d207      	bcs.n	4003f2 <mxt_init_device+0x21e>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  4003e2:	eb07 0347 	add.w	r3, r7, r7, lsl #1
  4003e6:	005a      	lsls	r2, r3, #1
  4003e8:	4615      	mov	r5, r2
  4003ea:	6863      	ldr	r3, [r4, #4]
  4003ec:	4413      	add	r3, r2
  4003ee:	4670      	mov	r0, lr
  4003f0:	e7d4      	b.n	40039c <mxt_init_device+0x1c8>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4003f2:	b35b      	cbz	r3, 40044c <mxt_init_device+0x278>
  4003f4:	4610      	mov	r0, r2
  4003f6:	3b01      	subs	r3, #1
  4003f8:	b2db      	uxtb	r3, r3
  4003fa:	3301      	adds	r3, #1
  4003fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400400:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  400404:	2100      	movs	r1, #0
		tot_report_ids += (device->object_list[i].num_report_ids);
  400406:	7943      	ldrb	r3, [r0, #5]
  400408:	4419      	add	r1, r3
  40040a:	b2c9      	uxtb	r1, r1
  40040c:	3006      	adds	r0, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40040e:	4282      	cmp	r2, r0
  400410:	d1f9      	bne.n	400406 <mxt_init_device+0x232>
	for (i = 0; i < tot_rpt_id; ++i) {
  400412:	b1f1      	cbz	r1, 400452 <mxt_init_device+0x27e>
		if (device->report_id_map[i].object_type == object_type) {
  400414:	6962      	ldr	r2, [r4, #20]
  400416:	7813      	ldrb	r3, [r2, #0]
  400418:	2b09      	cmp	r3, #9
  40041a:	d00f      	beq.n	40043c <mxt_init_device+0x268>
  40041c:	2300      	movs	r3, #0
	for (i = 0; i < tot_rpt_id; ++i) {
  40041e:	3301      	adds	r3, #1
  400420:	b2db      	uxtb	r3, r3
  400422:	428b      	cmp	r3, r1
  400424:	d00c      	beq.n	400440 <mxt_init_device+0x26c>
		if (device->report_id_map[i].object_type == object_type) {
  400426:	f812 0f02 	ldrb.w	r0, [r2, #2]!
  40042a:	2809      	cmp	r0, #9
  40042c:	d1f7      	bne.n	40041e <mxt_init_device+0x24a>
			return i;
  40042e:	b25b      	sxtb	r3, r3
	if (status == -1) {
  400430:	f1b3 3fff 	cmp.w	r3, #4294967295
  400434:	d010      	beq.n	400458 <mxt_init_device+0x284>
	device->multitouch_report_offset = status;
  400436:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
  400438:	2000      	movs	r0, #0
  40043a:	e6eb      	b.n	400214 <mxt_init_device+0x40>
		if (device->report_id_map[i].object_type == object_type) {
  40043c:	2300      	movs	r3, #0
  40043e:	e7f6      	b.n	40042e <mxt_init_device+0x25a>
		return ERR_BAD_DATA;
  400440:	f06f 0003 	mvn.w	r0, #3
  400444:	e6e6      	b.n	400214 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  400446:	f06f 0003 	mvn.w	r0, #3
  40044a:	e6e3      	b.n	400214 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  40044c:	f06f 0003 	mvn.w	r0, #3
  400450:	e6e0      	b.n	400214 <mxt_init_device+0x40>
  400452:	f06f 0003 	mvn.w	r0, #3
  400456:	e6dd      	b.n	400214 <mxt_init_device+0x40>
  400458:	f06f 0003 	mvn.w	r0, #3
  40045c:	e6da      	b.n	400214 <mxt_init_device+0x40>
  40045e:	bf00      	nop
  400460:	004041ad 	.word	0x004041ad
  400464:	00401999 	.word	0x00401999
  400468:	0080001b 	.word	0x0080001b

0040046c <mxt_get_object_address>:
uint16_t mxt_get_object_address(struct mxt_device *device, uint8_t object_id,
		uint8_t instance)
{
	uint8_t i;

	for (i = 0; i < device->info_object->obj_count; i++) {
  40046c:	6803      	ldr	r3, [r0, #0]
  40046e:	799a      	ldrb	r2, [r3, #6]
  400470:	b1d2      	cbz	r2, 4004a8 <mxt_get_object_address+0x3c>
{
  400472:	b410      	push	{r4}
		if (object_id == device->object_list[i].type) {
  400474:	6844      	ldr	r4, [r0, #4]
  400476:	7823      	ldrb	r3, [r4, #0]
  400478:	428b      	cmp	r3, r1
  40047a:	d00e      	beq.n	40049a <mxt_get_object_address+0x2e>
  40047c:	1da3      	adds	r3, r4, #6
  40047e:	3a01      	subs	r2, #1
  400480:	b2d2      	uxtb	r2, r2
  400482:	3201      	adds	r2, #1
  400484:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  400488:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; i++) {
  40048c:	4293      	cmp	r3, r2
  40048e:	d009      	beq.n	4004a4 <mxt_get_object_address+0x38>
		if (object_id == device->object_list[i].type) {
  400490:	461c      	mov	r4, r3
  400492:	f813 0b06 	ldrb.w	r0, [r3], #6
  400496:	4288      	cmp	r0, r1
  400498:	d1f8      	bne.n	40048c <mxt_get_object_address+0x20>
			return device->object_list[i].start_address;
  40049a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
		}
	}

	return 0;
}
  40049e:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004a2:	4770      	bx	lr
	return 0;
  4004a4:	2000      	movs	r0, #0
  4004a6:	e7fa      	b.n	40049e <mxt_get_object_address+0x32>
  4004a8:	2000      	movs	r0, #0
  4004aa:	4770      	bx	lr

004004ac <mxt_write_config_object>:
 * \param *obj_data Pointer to memory buffer containing object data
 * \result Operation result status code
 */
status_code_t mxt_write_config_object(struct mxt_device *device,
		mxt_memory_adr memory_adr, void *obj_data)
{
  4004ac:	b530      	push	{r4, r5, lr}
  4004ae:	b087      	sub	sp, #28
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4004b0:	2300      	movs	r3, #0
  4004b2:	9301      	str	r3, [sp, #4]
  4004b4:	9304      	str	r3, [sp, #16]
  4004b6:	9305      	str	r3, [sp, #20]
  4004b8:	f88d 1004 	strb.w	r1, [sp, #4]
  4004bc:	0a0b      	lsrs	r3, r1, #8
  4004be:	f88d 3005 	strb.w	r3, [sp, #5]
  4004c2:	2302      	movs	r3, #2
  4004c4:	9302      	str	r3, [sp, #8]
  4004c6:	9203      	str	r2, [sp, #12]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4004c8:	6803      	ldr	r3, [r0, #0]
  4004ca:	799a      	ldrb	r2, [r3, #6]
  4004cc:	b1ba      	cbz	r2, 4004fe <mxt_write_config_object+0x52>
		if (device->object_list[i].start_address == mem_adr) {
  4004ce:	6844      	ldr	r4, [r0, #4]
  4004d0:	f8b4 3001 	ldrh.w	r3, [r4, #1]
  4004d4:	428b      	cmp	r3, r1
  4004d6:	d00f      	beq.n	4004f8 <mxt_write_config_object+0x4c>
  4004d8:	1da3      	adds	r3, r4, #6
  4004da:	3a01      	subs	r2, #1
  4004dc:	b2d2      	uxtb	r2, r2
  4004de:	3201      	adds	r2, #1
  4004e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  4004e4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4004e8:	4293      	cmp	r3, r2
  4004ea:	d016      	beq.n	40051a <mxt_write_config_object+0x6e>
		if (device->object_list[i].start_address == mem_adr) {
  4004ec:	461c      	mov	r4, r3
  4004ee:	3306      	adds	r3, #6
  4004f0:	f8b4 5001 	ldrh.w	r5, [r4, #1]
  4004f4:	428d      	cmp	r5, r1
  4004f6:	d1f7      	bne.n	4004e8 <mxt_write_config_object+0x3c>
			return (device->object_list[i].size + 1);
  4004f8:	78e2      	ldrb	r2, [r4, #3]
  4004fa:	3201      	adds	r2, #1
  4004fc:	b2d2      	uxtb	r2, r2
		.addr[0]      = memory_adr,
		.addr[1]      = memory_adr >> 8,
		.addr_length  = sizeof(mxt_memory_adr),
		.chip         = device->mxt_chip_adr,
		.buffer       = obj_data,
		.length       = mxt_get_object_size(device, memory_adr)
  4004fe:	9204      	str	r2, [sp, #16]
	twihs_package_t packet = {
  400500:	7b03      	ldrb	r3, [r0, #12]
  400502:	f88d 3014 	strb.w	r3, [sp, #20]
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  400506:	a901      	add	r1, sp, #4
  400508:	6880      	ldr	r0, [r0, #8]
  40050a:	4b05      	ldr	r3, [pc, #20]	; (400520 <mxt_write_config_object+0x74>)
  40050c:	4798      	blx	r3
  40050e:	3000      	adds	r0, #0
  400510:	bf18      	it	ne
  400512:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}

}
  400514:	4240      	negs	r0, r0
  400516:	b007      	add	sp, #28
  400518:	bd30      	pop	{r4, r5, pc}
	return 0;
  40051a:	2200      	movs	r2, #0
  40051c:	e7ef      	b.n	4004fe <mxt_write_config_object+0x52>
  40051e:	bf00      	nop
  400520:	00401a45 	.word	0x00401a45

00400524 <mxt_write_config_reg>:
 * \param value Value to be written to register
 * \result Operation result status code
 */
status_code_t mxt_write_config_reg(struct mxt_device *device,
		mxt_memory_adr memory_adr, uint8_t value)
{
  400524:	b500      	push	{lr}
  400526:	b089      	sub	sp, #36	; 0x24
  400528:	f88d 2007 	strb.w	r2, [sp, #7]
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  40052c:	2300      	movs	r3, #0
  40052e:	9303      	str	r3, [sp, #12]
  400530:	9307      	str	r3, [sp, #28]
  400532:	f88d 100c 	strb.w	r1, [sp, #12]
  400536:	0a09      	lsrs	r1, r1, #8
  400538:	f88d 100d 	strb.w	r1, [sp, #13]
  40053c:	2302      	movs	r3, #2
  40053e:	9304      	str	r3, [sp, #16]
  400540:	f10d 0307 	add.w	r3, sp, #7
  400544:	9305      	str	r3, [sp, #20]
  400546:	2301      	movs	r3, #1
  400548:	9306      	str	r3, [sp, #24]
  40054a:	7b03      	ldrb	r3, [r0, #12]
  40054c:	f88d 301c 	strb.w	r3, [sp, #28]
		.chip         = device->mxt_chip_adr,
		.buffer       = &value,
		.length       = sizeof(value)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  400550:	a903      	add	r1, sp, #12
  400552:	6880      	ldr	r0, [r0, #8]
  400554:	4b04      	ldr	r3, [pc, #16]	; (400568 <mxt_write_config_reg+0x44>)
  400556:	4798      	blx	r3
  400558:	3000      	adds	r0, #0
  40055a:	bf18      	it	ne
  40055c:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}
}
  40055e:	4240      	negs	r0, r0
  400560:	b009      	add	sp, #36	; 0x24
  400562:	f85d fb04 	ldr.w	pc, [sp], #4
  400566:	bf00      	nop
  400568:	00401a45 	.word	0x00401a45

0040056c <mxt_is_message_pending>:
 * \param *device Pointer to mxt_device instance
 * \return Return /CHG pin status
 */
bool mxt_is_message_pending(struct mxt_device *device)
{
	if (ioport_get_pin_level(device->chgpin) == false) {
  40056c:	6982      	ldr	r2, [r0, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40056e:	4b07      	ldr	r3, [pc, #28]	; (40058c <mxt_is_message_pending+0x20>)
  400570:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  400574:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400576:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  400578:	f002 021f 	and.w	r2, r2, #31
  40057c:	2301      	movs	r3, #1
  40057e:	fa03 f202 	lsl.w	r2, r3, r2
  400582:	420a      	tst	r2, r1
		return true;
	} else {
		return false;
	}
}
  400584:	bf0c      	ite	eq
  400586:	4618      	moveq	r0, r3
  400588:	2000      	movne	r0, #0
  40058a:	4770      	bx	lr
  40058c:	00200707 	.word	0x00200707

00400590 <mxt_read_message>:
 * \param *message Pointer to mxt_message instance
 * \return Operation result status code
 */
status_code_t mxt_read_message(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
  400590:	b530      	push	{r4, r5, lr}
  400592:	b087      	sub	sp, #28
  400594:	4604      	mov	r4, r0
  400596:	460d      	mov	r5, r1
	uint16_t obj_adr = mxt_get_object_address(device,
  400598:	2200      	movs	r2, #0
  40059a:	2105      	movs	r1, #5
  40059c:	4b0d      	ldr	r3, [pc, #52]	; (4005d4 <mxt_read_message+0x44>)
  40059e:	4798      	blx	r3
			MXT_GEN_MESSAGEPROCESSOR_T5, 0);

	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4005a0:	2300      	movs	r3, #0
  4005a2:	9301      	str	r3, [sp, #4]
  4005a4:	9305      	str	r3, [sp, #20]
  4005a6:	f88d 0004 	strb.w	r0, [sp, #4]
  4005aa:	0a00      	lsrs	r0, r0, #8
  4005ac:	f88d 0005 	strb.w	r0, [sp, #5]
  4005b0:	2302      	movs	r3, #2
  4005b2:	9302      	str	r3, [sp, #8]
  4005b4:	9503      	str	r5, [sp, #12]
  4005b6:	2309      	movs	r3, #9
  4005b8:	9304      	str	r3, [sp, #16]
  4005ba:	7b23      	ldrb	r3, [r4, #12]
  4005bc:	f88d 3014 	strb.w	r3, [sp, #20]
		.buffer       = message,
		.length       = MXT_TWI_MSG_SIZE_T5
	};

	/* Read information from the slave */
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4005c0:	a901      	add	r1, sp, #4
  4005c2:	68a0      	ldr	r0, [r4, #8]
  4005c4:	4b04      	ldr	r3, [pc, #16]	; (4005d8 <mxt_read_message+0x48>)
  4005c6:	4798      	blx	r3
  4005c8:	3000      	adds	r0, #0
  4005ca:	bf18      	it	ne
  4005cc:	2001      	movne	r0, #1
		return mxt_validate_message(&packet);
#else
		return STATUS_OK;
#endif
	}
}
  4005ce:	4240      	negs	r0, r0
  4005d0:	b007      	add	sp, #28
  4005d2:	bd30      	pop	{r4, r5, pc}
  4005d4:	0040046d 	.word	0x0040046d
  4005d8:	00401999 	.word	0x00401999

004005dc <mxt_read_touch_event>:
 * \param *touch_event Pointer to mxt_touch_event instance
 * \return Operation result status code
 */
status_code_t mxt_read_touch_event(struct mxt_device *device,
		struct mxt_touch_event *touch_event)
{
  4005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4005de:	b085      	sub	sp, #20
  4005e0:	4604      	mov	r4, r0
  4005e2:	460e      	mov	r6, r1
	uint8_t obj_type, status;
	struct mxt_conf_messageprocessor_t5 message;

	while (mxt_is_message_pending(device)) {
  4005e4:	4d17      	ldr	r5, [pc, #92]	; (400644 <mxt_read_touch_event+0x68>)
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  4005e6:	4f18      	ldr	r7, [pc, #96]	; (400648 <mxt_read_touch_event+0x6c>)
	while (mxt_is_message_pending(device)) {
  4005e8:	4620      	mov	r0, r4
  4005ea:	47a8      	blx	r5
  4005ec:	b328      	cbz	r0, 40063a <mxt_read_touch_event+0x5e>
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  4005ee:	a901      	add	r1, sp, #4
  4005f0:	4620      	mov	r0, r4
  4005f2:	47b8      	blx	r7
  4005f4:	4603      	mov	r3, r0
  4005f6:	bb10      	cbnz	r0, 40063e <mxt_read_touch_event+0x62>
 * \return Operation
 */
enum mxt_object_type mxt_get_object_type(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
	return (enum mxt_object_type)(device->report_id_map[message->reportid].object_type);
  4005f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4005fc:	6962      	ldr	r2, [r4, #20]
		if (obj_type == MXT_TOUCH_MULTITOUCHSCREEN_T9) {
  4005fe:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
  400602:	2a09      	cmp	r2, #9
  400604:	d1f0      	bne.n	4005e8 <mxt_read_touch_event+0xc>
			touch_event->id = (message.reportid -
  400606:	7f22      	ldrb	r2, [r4, #28]
  400608:	1a9b      	subs	r3, r3, r2
  40060a:	7033      	strb	r3, [r6, #0]
			touch_event->status = message.message[0];
  40060c:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400610:	7073      	strb	r3, [r6, #1]
					((message.message[3] & 0xf0) >> 4);
  400612:	f89d 3008 	ldrb.w	r3, [sp, #8]
			touch_event->x = (message.message[1] << 4) |
  400616:	f89d 1006 	ldrb.w	r1, [sp, #6]
					((message.message[3] & 0xf0) >> 4);
  40061a:	091a      	lsrs	r2, r3, #4
			touch_event->x = (message.message[1] << 4) |
  40061c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  400620:	8072      	strh	r2, [r6, #2]
			touch_event->y = (message.message[2] << 4) |
  400622:	f89d 2007 	ldrb.w	r2, [sp, #7]
					(message.message[3] & 0x0f);
  400626:	f003 030f 	and.w	r3, r3, #15
			touch_event->y = (message.message[2] << 4) |
  40062a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  40062e:	80b3      	strh	r3, [r6, #4]
			touch_event->size = message.message[4];
  400630:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400634:	71b3      	strb	r3, [r6, #6]
			return STATUS_OK;
  400636:	2300      	movs	r3, #0
  400638:	e001      	b.n	40063e <mxt_read_touch_event+0x62>
	return ERR_BAD_DATA;
  40063a:	f06f 0303 	mvn.w	r3, #3
}
  40063e:	4618      	mov	r0, r3
  400640:	b005      	add	sp, #20
  400642:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400644:	0040056d 	.word	0x0040056d
  400648:	00400591 	.word	0x00400591

0040064c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40064c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40064e:	4810      	ldr	r0, [pc, #64]	; (400690 <sysclk_init+0x44>)
  400650:	4b10      	ldr	r3, [pc, #64]	; (400694 <sysclk_init+0x48>)
  400652:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400654:	213e      	movs	r1, #62	; 0x3e
  400656:	2000      	movs	r0, #0
  400658:	4b0f      	ldr	r3, [pc, #60]	; (400698 <sysclk_init+0x4c>)
  40065a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40065c:	4c0f      	ldr	r4, [pc, #60]	; (40069c <sysclk_init+0x50>)
  40065e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400660:	2800      	cmp	r0, #0
  400662:	d0fc      	beq.n	40065e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400664:	4b0e      	ldr	r3, [pc, #56]	; (4006a0 <sysclk_init+0x54>)
  400666:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400668:	4a0e      	ldr	r2, [pc, #56]	; (4006a4 <sysclk_init+0x58>)
  40066a:	4b0f      	ldr	r3, [pc, #60]	; (4006a8 <sysclk_init+0x5c>)
  40066c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40066e:	4c0f      	ldr	r4, [pc, #60]	; (4006ac <sysclk_init+0x60>)
  400670:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400672:	2800      	cmp	r0, #0
  400674:	d0fc      	beq.n	400670 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400676:	2002      	movs	r0, #2
  400678:	4b0d      	ldr	r3, [pc, #52]	; (4006b0 <sysclk_init+0x64>)
  40067a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40067c:	2000      	movs	r0, #0
  40067e:	4b0d      	ldr	r3, [pc, #52]	; (4006b4 <sysclk_init+0x68>)
  400680:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400682:	4b0d      	ldr	r3, [pc, #52]	; (4006b8 <sysclk_init+0x6c>)
  400684:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400686:	480d      	ldr	r0, [pc, #52]	; (4006bc <sysclk_init+0x70>)
  400688:	4b02      	ldr	r3, [pc, #8]	; (400694 <sysclk_init+0x48>)
  40068a:	4798      	blx	r3
  40068c:	bd10      	pop	{r4, pc}
  40068e:	bf00      	nop
  400690:	07270e00 	.word	0x07270e00
  400694:	00401df1 	.word	0x00401df1
  400698:	00401695 	.word	0x00401695
  40069c:	004016e9 	.word	0x004016e9
  4006a0:	004016f9 	.word	0x004016f9
  4006a4:	20183f01 	.word	0x20183f01
  4006a8:	400e0600 	.word	0x400e0600
  4006ac:	00401709 	.word	0x00401709
  4006b0:	004015f9 	.word	0x004015f9
  4006b4:	00401631 	.word	0x00401631
  4006b8:	00401ce5 	.word	0x00401ce5
  4006bc:	11e1a300 	.word	0x11e1a300

004006c0 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  4006c0:	b510      	push	{r4, lr}
  4006c2:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  4006c4:	4b10      	ldr	r3, [pc, #64]	; (400708 <spi_master_init+0x48>)
  4006c6:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4006c8:	2380      	movs	r3, #128	; 0x80
  4006ca:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4006cc:	6863      	ldr	r3, [r4, #4]
  4006ce:	f043 0301 	orr.w	r3, r3, #1
  4006d2:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4006d4:	6863      	ldr	r3, [r4, #4]
  4006d6:	f043 0310 	orr.w	r3, r3, #16
  4006da:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4006dc:	6863      	ldr	r3, [r4, #4]
  4006de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4006e2:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  4006e4:	2100      	movs	r1, #0
  4006e6:	4620      	mov	r0, r4
  4006e8:	4b08      	ldr	r3, [pc, #32]	; (40070c <spi_master_init+0x4c>)
  4006ea:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4006ec:	6863      	ldr	r3, [r4, #4]
  4006ee:	f023 0302 	bic.w	r3, r3, #2
  4006f2:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  4006f4:	6863      	ldr	r3, [r4, #4]
  4006f6:	f023 0304 	bic.w	r3, r3, #4
  4006fa:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  4006fc:	2100      	movs	r1, #0
  4006fe:	4620      	mov	r0, r4
  400700:	4b03      	ldr	r3, [pc, #12]	; (400710 <spi_master_init+0x50>)
  400702:	4798      	blx	r3
  400704:	bd10      	pop	{r4, pc}
  400706:	bf00      	nop
  400708:	00401739 	.word	0x00401739
  40070c:	00401765 	.word	0x00401765
  400710:	0040177b 	.word	0x0040177b

00400714 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  400714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400718:	4604      	mov	r4, r0
  40071a:	460d      	mov	r5, r1
  40071c:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  40071e:	4915      	ldr	r1, [pc, #84]	; (400774 <spi_master_setup_device+0x60>)
  400720:	4618      	mov	r0, r3
  400722:	4b15      	ldr	r3, [pc, #84]	; (400778 <spi_master_setup_device+0x64>)
  400724:	4798      	blx	r3
  400726:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  400728:	2300      	movs	r3, #0
  40072a:	461a      	mov	r2, r3
  40072c:	6829      	ldr	r1, [r5, #0]
  40072e:	4620      	mov	r0, r4
  400730:	f8df 805c 	ldr.w	r8, [pc, #92]	; 400790 <spi_master_setup_device+0x7c>
  400734:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  400736:	2208      	movs	r2, #8
  400738:	6829      	ldr	r1, [r5, #0]
  40073a:	4620      	mov	r0, r4
  40073c:	4b0f      	ldr	r3, [pc, #60]	; (40077c <spi_master_setup_device+0x68>)
  40073e:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  400740:	b2fa      	uxtb	r2, r7
  400742:	6829      	ldr	r1, [r5, #0]
  400744:	4620      	mov	r0, r4
  400746:	4b0e      	ldr	r3, [pc, #56]	; (400780 <spi_master_setup_device+0x6c>)
  400748:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  40074a:	2208      	movs	r2, #8
  40074c:	6829      	ldr	r1, [r5, #0]
  40074e:	4620      	mov	r0, r4
  400750:	4b0c      	ldr	r3, [pc, #48]	; (400784 <spi_master_setup_device+0x70>)
  400752:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  400754:	0872      	lsrs	r2, r6, #1
  400756:	6829      	ldr	r1, [r5, #0]
  400758:	4620      	mov	r0, r4
  40075a:	4b0b      	ldr	r3, [pc, #44]	; (400788 <spi_master_setup_device+0x74>)
  40075c:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  40075e:	f086 0201 	eor.w	r2, r6, #1
  400762:	f002 0201 	and.w	r2, r2, #1
  400766:	6829      	ldr	r1, [r5, #0]
  400768:	4620      	mov	r0, r4
  40076a:	4b08      	ldr	r3, [pc, #32]	; (40078c <spi_master_setup_device+0x78>)
  40076c:	4798      	blx	r3
  40076e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400772:	bf00      	nop
  400774:	08f0d180 	.word	0x08f0d180
  400778:	00401857 	.word	0x00401857
  40077c:	00401843 	.word	0x00401843
  400780:	0040186d 	.word	0x0040186d
  400784:	004017fd 	.word	0x004017fd
  400788:	004017c1 	.word	0x004017c1
  40078c:	004017df 	.word	0x004017df
  400790:	00401895 	.word	0x00401895

00400794 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  400794:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  400796:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  400798:	f013 0f04 	tst.w	r3, #4
  40079c:	d006      	beq.n	4007ac <spi_select_device+0x18>
		if (device->id < MAX_NUM_WITH_DECODER) {
  40079e:	6809      	ldr	r1, [r1, #0]
  4007a0:	290f      	cmp	r1, #15
  4007a2:	d900      	bls.n	4007a6 <spi_select_device+0x12>
  4007a4:	bd08      	pop	{r3, pc}
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  4007a6:	4b06      	ldr	r3, [pc, #24]	; (4007c0 <spi_select_device+0x2c>)
  4007a8:	4798      	blx	r3
  4007aa:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  4007ac:	6809      	ldr	r1, [r1, #0]
  4007ae:	2903      	cmp	r1, #3
  4007b0:	d8f8      	bhi.n	4007a4 <spi_select_device+0x10>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  4007b2:	2301      	movs	r3, #1
  4007b4:	fa03 f101 	lsl.w	r1, r3, r1
  4007b8:	43c9      	mvns	r1, r1
  4007ba:	4b01      	ldr	r3, [pc, #4]	; (4007c0 <spi_select_device+0x2c>)
  4007bc:	4798      	blx	r3
		}
	}
}
  4007be:	e7f1      	b.n	4007a4 <spi_select_device+0x10>
  4007c0:	00401765 	.word	0x00401765

004007c4 <spi_write_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  4007c4:	b11a      	cbz	r2, 4007ce <spi_write_packet+0xa>
{
  4007c6:	b410      	push	{r4}
  4007c8:	460c      	mov	r4, r1
  4007ca:	4411      	add	r1, r2
  4007cc:	e006      	b.n	4007dc <spi_write_packet+0x18>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  4007ce:	2000      	movs	r0, #0
  4007d0:	4770      	bx	lr
		val = data[i];
  4007d2:	f814 3b01 	ldrb.w	r3, [r4], #1
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4007d6:	60c3      	str	r3, [r0, #12]
	while (len) {
  4007d8:	42a1      	cmp	r1, r4
  4007da:	d00c      	beq.n	4007f6 <spi_write_packet+0x32>
{
  4007dc:	f643 2399 	movw	r3, #15001	; 0x3a99
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  4007e0:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  4007e2:	f012 0f02 	tst.w	r2, #2
  4007e6:	d1f4      	bne.n	4007d2 <spi_write_packet+0xe>
			if (!timeout--) {
  4007e8:	3b01      	subs	r3, #1
  4007ea:	d1f9      	bne.n	4007e0 <spi_write_packet+0x1c>
				return ERR_TIMEOUT;
  4007ec:	f06f 0002 	mvn.w	r0, #2
}
  4007f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4007f4:	4770      	bx	lr
	return STATUS_OK;
  4007f6:	2000      	movs	r0, #0
  4007f8:	e7fa      	b.n	4007f0 <spi_write_packet+0x2c>

004007fa <spi_read_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  4007fa:	b13a      	cbz	r2, 40080c <spi_read_packet+0x12>
{
  4007fc:	b470      	push	{r4, r5, r6}
  4007fe:	4615      	mov	r5, r2
  400800:	460c      	mov	r4, r1
  400802:	440d      	add	r5, r1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400804:	26ff      	movs	r6, #255	; 0xff
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  400806:	f240 2101 	movw	r1, #513	; 0x201
  40080a:	e012      	b.n	400832 <spi_read_packet+0x38>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  40080c:	2000      	movs	r0, #0
  40080e:	4770      	bx	lr
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400810:	60c6      	str	r6, [r0, #12]
		while (!spi_is_rx_ready(p_spi)) {
  400812:	f643 2399 	movw	r3, #15001	; 0x3a99
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  400816:	6902      	ldr	r2, [r0, #16]
  400818:	ea31 0202 	bics.w	r2, r1, r2
  40081c:	d004      	beq.n	400828 <spi_read_packet+0x2e>
			if (!timeout--) {
  40081e:	3b01      	subs	r3, #1
  400820:	d1f9      	bne.n	400816 <spi_read_packet+0x1c>
				return ERR_TIMEOUT;
  400822:	f06f 0002 	mvn.w	r0, #2
  400826:	e00e      	b.n	400846 <spi_read_packet+0x4c>
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  400828:	6883      	ldr	r3, [r0, #8]
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(p_spi);
  40082a:	f804 3b01 	strb.w	r3, [r4], #1
	while (len) {
  40082e:	42a5      	cmp	r5, r4
  400830:	d00b      	beq.n	40084a <spi_read_packet+0x50>
{
  400832:	f643 2399 	movw	r3, #15001	; 0x3a99
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  400836:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  400838:	f012 0f02 	tst.w	r2, #2
  40083c:	d1e8      	bne.n	400810 <spi_read_packet+0x16>
			if (!timeout--) {
  40083e:	3b01      	subs	r3, #1
  400840:	d1f9      	bne.n	400836 <spi_read_packet+0x3c>
				return ERR_TIMEOUT;
  400842:	f06f 0002 	mvn.w	r0, #2
}
  400846:	bc70      	pop	{r4, r5, r6}
  400848:	4770      	bx	lr
	return STATUS_OK;
  40084a:	2000      	movs	r0, #0
  40084c:	e7fb      	b.n	400846 <spi_read_packet+0x4c>
	...

00400850 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400854:	b980      	cbnz	r0, 400878 <_read+0x28>
  400856:	460c      	mov	r4, r1
  400858:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40085a:	2a00      	cmp	r2, #0
  40085c:	dd0f      	ble.n	40087e <_read+0x2e>
  40085e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400860:	4e08      	ldr	r6, [pc, #32]	; (400884 <_read+0x34>)
  400862:	4d09      	ldr	r5, [pc, #36]	; (400888 <_read+0x38>)
  400864:	6830      	ldr	r0, [r6, #0]
  400866:	4621      	mov	r1, r4
  400868:	682b      	ldr	r3, [r5, #0]
  40086a:	4798      	blx	r3
		ptr++;
  40086c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40086e:	42bc      	cmp	r4, r7
  400870:	d1f8      	bne.n	400864 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400872:	4640      	mov	r0, r8
  400874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400878:	f04f 38ff 	mov.w	r8, #4294967295
  40087c:	e7f9      	b.n	400872 <_read+0x22>
	for (; len > 0; --len) {
  40087e:	4680      	mov	r8, r0
  400880:	e7f7      	b.n	400872 <_read+0x22>
  400882:	bf00      	nop
  400884:	2040c798 	.word	0x2040c798
  400888:	2040c790 	.word	0x2040c790

0040088c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  40088c:	3801      	subs	r0, #1
  40088e:	2802      	cmp	r0, #2
  400890:	d815      	bhi.n	4008be <_write+0x32>
{
  400892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400896:	460e      	mov	r6, r1
  400898:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40089a:	b19a      	cbz	r2, 4008c4 <_write+0x38>
  40089c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40089e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4008d8 <_write+0x4c>
  4008a2:	4f0c      	ldr	r7, [pc, #48]	; (4008d4 <_write+0x48>)
  4008a4:	f8d8 0000 	ldr.w	r0, [r8]
  4008a8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4008ac:	683b      	ldr	r3, [r7, #0]
  4008ae:	4798      	blx	r3
  4008b0:	2800      	cmp	r0, #0
  4008b2:	db0a      	blt.n	4008ca <_write+0x3e>
  4008b4:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4008b6:	3c01      	subs	r4, #1
  4008b8:	d1f4      	bne.n	4008a4 <_write+0x18>
  4008ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4008be:	f04f 30ff 	mov.w	r0, #4294967295
  4008c2:	4770      	bx	lr
	for (; len != 0; --len) {
  4008c4:	4610      	mov	r0, r2
  4008c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4008ca:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4008ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4008d2:	bf00      	nop
  4008d4:	2040c794 	.word	0x2040c794
  4008d8:	2040c798 	.word	0x2040c798

004008dc <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4008dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4008e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4008e4:	4b9e      	ldr	r3, [pc, #632]	; (400b60 <board_init+0x284>)
  4008e6:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4008e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4008ec:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4008f0:	4b9c      	ldr	r3, [pc, #624]	; (400b64 <board_init+0x288>)
  4008f2:	2200      	movs	r2, #0
  4008f4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4008f8:	695a      	ldr	r2, [r3, #20]
  4008fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4008fe:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400900:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400904:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400908:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40090c:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400910:	f007 0007 	and.w	r0, r7, #7
  400914:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400916:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40091a:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  40091e:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400922:	f3bf 8f4f 	dsb	sy
  400926:	f04f 34ff 	mov.w	r4, #4294967295
  40092a:	fa04 fc00 	lsl.w	ip, r4, r0
  40092e:	fa06 f000 	lsl.w	r0, r6, r0
  400932:	fa04 f40e 	lsl.w	r4, r4, lr
  400936:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  40093a:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40093c:	463a      	mov	r2, r7
  40093e:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400940:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400944:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400948:	3a01      	subs	r2, #1
  40094a:	4423      	add	r3, r4
  40094c:	f1b2 3fff 	cmp.w	r2, #4294967295
  400950:	d1f6      	bne.n	400940 <board_init+0x64>
        } while(sets--);
  400952:	3e01      	subs	r6, #1
  400954:	4460      	add	r0, ip
  400956:	f1b6 3fff 	cmp.w	r6, #4294967295
  40095a:	d1ef      	bne.n	40093c <board_init+0x60>
  40095c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400960:	4b80      	ldr	r3, [pc, #512]	; (400b64 <board_init+0x288>)
  400962:	695a      	ldr	r2, [r3, #20]
  400964:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400968:	615a      	str	r2, [r3, #20]
  40096a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40096e:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400972:	4a7d      	ldr	r2, [pc, #500]	; (400b68 <board_init+0x28c>)
  400974:	497d      	ldr	r1, [pc, #500]	; (400b6c <board_init+0x290>)
  400976:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400978:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  40097c:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  40097e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400982:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400986:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  40098a:	f022 0201 	bic.w	r2, r2, #1
  40098e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400992:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400996:	f022 0201 	bic.w	r2, r2, #1
  40099a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  40099e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4009a2:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4009a6:	200a      	movs	r0, #10
  4009a8:	4c71      	ldr	r4, [pc, #452]	; (400b70 <board_init+0x294>)
  4009aa:	47a0      	blx	r4
  4009ac:	200b      	movs	r0, #11
  4009ae:	47a0      	blx	r4
  4009b0:	200c      	movs	r0, #12
  4009b2:	47a0      	blx	r4
  4009b4:	2010      	movs	r0, #16
  4009b6:	47a0      	blx	r4
  4009b8:	2011      	movs	r0, #17
  4009ba:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009bc:	4e6d      	ldr	r6, [pc, #436]	; (400b74 <board_init+0x298>)
  4009be:	f44f 7880 	mov.w	r8, #256	; 0x100
  4009c2:	f8c6 8010 	str.w	r8, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009c6:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4009ca:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4009ce:	4c6a      	ldr	r4, [pc, #424]	; (400b78 <board_init+0x29c>)
  4009d0:	f44f 6500 	mov.w	r5, #2048	; 0x800
  4009d4:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009d6:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  4009da:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4009dc:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4009e0:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  4009e2:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  4009e4:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4009e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4009ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4009ee:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009f0:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4009f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4009f6:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4009f8:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4009fc:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400a00:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400a04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400a08:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400a0a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400a0e:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400a10:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400a12:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400a16:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400a18:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400a1c:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400a1e:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400a20:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400a24:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400a26:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400a28:	4a54      	ldr	r2, [pc, #336]	; (400b7c <board_init+0x2a0>)
  400a2a:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400a2e:	f043 0310 	orr.w	r3, r3, #16
  400a32:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400a36:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  400a3a:	2310      	movs	r3, #16
  400a3c:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400a42:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400a44:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400a46:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400a4a:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400a4c:	4319      	orrs	r1, r3
  400a4e:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400a50:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400a52:	4319      	orrs	r1, r3
  400a54:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400a56:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  400a58:	2208      	movs	r2, #8
  400a5a:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400a5c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400a60:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400a62:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400a64:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400a68:	6f21      	ldr	r1, [r4, #112]	; 0x70
  400a6a:	f021 0108 	bic.w	r1, r1, #8
  400a6e:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400a70:	6f61      	ldr	r1, [r4, #116]	; 0x74
  400a72:	f021 0108 	bic.w	r1, r1, #8
  400a76:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400a78:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  400a7a:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400a7c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400a80:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400a82:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400a84:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400a88:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400a8a:	f022 0210 	bic.w	r2, r2, #16
  400a8e:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400a90:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400a92:	f022 0210 	bic.w	r2, r2, #16
  400a96:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400a98:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  400a9a:	2300      	movs	r3, #0
  400a9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400aa0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400aa4:	4630      	mov	r0, r6
  400aa6:	4f36      	ldr	r7, [pc, #216]	; (400b80 <board_init+0x2a4>)
  400aa8:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  400aaa:	2300      	movs	r3, #0
  400aac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400ab0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400ab4:	4630      	mov	r0, r6
  400ab6:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  400ab8:	2301      	movs	r3, #1
  400aba:	22ff      	movs	r2, #255	; 0xff
  400abc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ac0:	4630      	mov	r0, r6
  400ac2:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  400ac4:	2301      	movs	r3, #1
  400ac6:	223f      	movs	r2, #63	; 0x3f
  400ac8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400acc:	482d      	ldr	r0, [pc, #180]	; (400b84 <board_init+0x2a8>)
  400ace:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  400ad0:	2301      	movs	r3, #1
  400ad2:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  400ad6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ada:	4620      	mov	r0, r4
  400adc:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  400ade:	2301      	movs	r3, #1
  400ae0:	4642      	mov	r2, r8
  400ae2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ae6:	4630      	mov	r0, r6
  400ae8:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  400aea:	2301      	movs	r3, #1
  400aec:	462a      	mov	r2, r5
  400aee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400af2:	4630      	mov	r0, r6
  400af4:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  400af6:	2301      	movs	r3, #1
  400af8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400afc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400b00:	4821      	ldr	r0, [pc, #132]	; (400b88 <board_init+0x2ac>)
  400b02:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  400b04:	2300      	movs	r3, #0
  400b06:	f44f 7200 	mov.w	r2, #512	; 0x200
  400b0a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b0e:	4630      	mov	r0, r6
  400b10:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  400b12:	f44f 7100 	mov.w	r1, #512	; 0x200
  400b16:	4630      	mov	r0, r6
  400b18:	4b1c      	ldr	r3, [pc, #112]	; (400b8c <board_init+0x2b0>)
  400b1a:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  400b1c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b20:	2074      	movs	r0, #116	; 0x74
  400b22:	4c1b      	ldr	r4, [pc, #108]	; (400b90 <board_init+0x2b4>)
  400b24:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  400b26:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b2a:	2075      	movs	r0, #117	; 0x75
  400b2c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  400b2e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b32:	2076      	movs	r0, #118	; 0x76
  400b34:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  400b36:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b3a:	207b      	movs	r0, #123	; 0x7b
  400b3c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  400b3e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400b42:	2018      	movs	r0, #24
  400b44:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  400b46:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400b4a:	2006      	movs	r0, #6
  400b4c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  400b4e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400b52:	2053      	movs	r0, #83	; 0x53
  400b54:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  400b56:	2053      	movs	r0, #83	; 0x53
  400b58:	4b0e      	ldr	r3, [pc, #56]	; (400b94 <board_init+0x2b8>)
  400b5a:	4798      	blx	r3
  400b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400b60:	400e1850 	.word	0x400e1850
  400b64:	e000ed00 	.word	0xe000ed00
  400b68:	400e0c00 	.word	0x400e0c00
  400b6c:	5a00080c 	.word	0x5a00080c
  400b70:	00401719 	.word	0x00401719
  400b74:	400e1200 	.word	0x400e1200
  400b78:	400e0e00 	.word	0x400e0e00
  400b7c:	40088000 	.word	0x40088000
  400b80:	00401345 	.word	0x00401345
  400b84:	400e1600 	.word	0x400e1600
  400b88:	400e1400 	.word	0x400e1400
  400b8c:	00401251 	.word	0x00401251
  400b90:	00401415 	.word	0x00401415
  400b94:	004013dd 	.word	0x004013dd

00400b98 <ili9488_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili9488_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  400b98:	b430      	push	{r4, r5}
	uint32_t dw;

	if (*p_ul_x1 >= ILI9488_LCD_WIDTH) {
  400b9a:	6804      	ldr	r4, [r0, #0]
  400b9c:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  400ba0:	d302      	bcc.n	400ba8 <ili9488_check_box_coordinates+0x10>
		*p_ul_x1 = ILI9488_LCD_WIDTH - 1;
  400ba2:	f240 143f 	movw	r4, #319	; 0x13f
  400ba6:	6004      	str	r4, [r0, #0]
	}

	if (*p_ul_x2 >= ILI9488_LCD_WIDTH) {
  400ba8:	6814      	ldr	r4, [r2, #0]
  400baa:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  400bae:	d302      	bcc.n	400bb6 <ili9488_check_box_coordinates+0x1e>
		*p_ul_x2 = ILI9488_LCD_WIDTH - 1;
  400bb0:	f240 143f 	movw	r4, #319	; 0x13f
  400bb4:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 >= ILI9488_LCD_HEIGHT) {
  400bb6:	680c      	ldr	r4, [r1, #0]
  400bb8:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  400bbc:	d302      	bcc.n	400bc4 <ili9488_check_box_coordinates+0x2c>
		*p_ul_y1 = ILI9488_LCD_HEIGHT - 1;
  400bbe:	f240 14df 	movw	r4, #479	; 0x1df
  400bc2:	600c      	str	r4, [r1, #0]
	}

	if (*p_ul_y2 >= ILI9488_LCD_HEIGHT) {
  400bc4:	681c      	ldr	r4, [r3, #0]
  400bc6:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  400bca:	d302      	bcc.n	400bd2 <ili9488_check_box_coordinates+0x3a>
		*p_ul_y2 = ILI9488_LCD_HEIGHT - 1;
  400bcc:	f240 14df 	movw	r4, #479	; 0x1df
  400bd0:	601c      	str	r4, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  400bd2:	6804      	ldr	r4, [r0, #0]
  400bd4:	6815      	ldr	r5, [r2, #0]
  400bd6:	42ac      	cmp	r4, r5
  400bd8:	d901      	bls.n	400bde <ili9488_check_box_coordinates+0x46>
		dw = *p_ul_x1;
		*p_ul_x1 = *p_ul_x2;
  400bda:	6005      	str	r5, [r0, #0]
		*p_ul_x2 = dw;
  400bdc:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  400bde:	680a      	ldr	r2, [r1, #0]
  400be0:	6818      	ldr	r0, [r3, #0]
  400be2:	4282      	cmp	r2, r0
  400be4:	d901      	bls.n	400bea <ili9488_check_box_coordinates+0x52>
		dw = *p_ul_y1;
		*p_ul_y1 = *p_ul_y2;
  400be6:	6008      	str	r0, [r1, #0]
		*p_ul_y2 = dw;
  400be8:	601a      	str	r2, [r3, #0]
	}
}
  400bea:	bc30      	pop	{r4, r5}
  400bec:	4770      	bx	lr
	...

00400bf0 <ili9488_write_ram_prepare>:
{
  400bf0:	b510      	push	{r4, lr}
  400bf2:	b082      	sub	sp, #8
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  400bf4:	2006      	movs	r0, #6
  400bf6:	4b0a      	ldr	r3, [pc, #40]	; (400c20 <ili9488_write_ram_prepare+0x30>)
  400bf8:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, ILI9488_CMD_MEMORY_WRITE, BOARD_ILI9488_SPI_NPCS, 0);
  400bfa:	2300      	movs	r3, #0
  400bfc:	2203      	movs	r2, #3
  400bfe:	212c      	movs	r1, #44	; 0x2c
  400c00:	4808      	ldr	r0, [pc, #32]	; (400c24 <ili9488_write_ram_prepare+0x34>)
  400c02:	4c09      	ldr	r4, [pc, #36]	; (400c28 <ili9488_write_ram_prepare+0x38>)
  400c04:	47a0      	blx	r4
	for(i = 0; i < 0xFF; i++);
  400c06:	2300      	movs	r3, #0
  400c08:	9301      	str	r3, [sp, #4]
  400c0a:	9b01      	ldr	r3, [sp, #4]
  400c0c:	2bfe      	cmp	r3, #254	; 0xfe
  400c0e:	d805      	bhi.n	400c1c <ili9488_write_ram_prepare+0x2c>
  400c10:	9b01      	ldr	r3, [sp, #4]
  400c12:	3301      	adds	r3, #1
  400c14:	9301      	str	r3, [sp, #4]
  400c16:	9b01      	ldr	r3, [sp, #4]
  400c18:	2bfe      	cmp	r3, #254	; 0xfe
  400c1a:	d9f9      	bls.n	400c10 <ili9488_write_ram_prepare+0x20>
}
  400c1c:	b002      	add	sp, #8
  400c1e:	bd10      	pop	{r4, pc}
  400c20:	004013f9 	.word	0x004013f9
  400c24:	40008000 	.word	0x40008000
  400c28:	0040178d 	.word	0x0040178d

00400c2c <ili9488_write_register>:
{
  400c2c:	b570      	push	{r4, r5, r6, lr}
  400c2e:	b082      	sub	sp, #8
  400c30:	4605      	mov	r5, r0
  400c32:	460e      	mov	r6, r1
  400c34:	4614      	mov	r4, r2
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  400c36:	2006      	movs	r0, #6
  400c38:	4b14      	ldr	r3, [pc, #80]	; (400c8c <ili9488_write_register+0x60>)
  400c3a:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, uc_reg, BOARD_ILI9488_SPI_NPCS, 0);
  400c3c:	2300      	movs	r3, #0
  400c3e:	2203      	movs	r2, #3
  400c40:	4629      	mov	r1, r5
  400c42:	4813      	ldr	r0, [pc, #76]	; (400c90 <ili9488_write_register+0x64>)
  400c44:	4d13      	ldr	r5, [pc, #76]	; (400c94 <ili9488_write_register+0x68>)
  400c46:	47a8      	blx	r5
	for(i = 0; i < 0xFF; i++);
  400c48:	2300      	movs	r3, #0
  400c4a:	9301      	str	r3, [sp, #4]
  400c4c:	9b01      	ldr	r3, [sp, #4]
  400c4e:	2bfe      	cmp	r3, #254	; 0xfe
  400c50:	d805      	bhi.n	400c5e <ili9488_write_register+0x32>
  400c52:	9b01      	ldr	r3, [sp, #4]
  400c54:	3301      	adds	r3, #1
  400c56:	9301      	str	r3, [sp, #4]
  400c58:	9b01      	ldr	r3, [sp, #4]
  400c5a:	2bfe      	cmp	r3, #254	; 0xfe
  400c5c:	d9f9      	bls.n	400c52 <ili9488_write_register+0x26>
	if(size > 0) {
  400c5e:	b90c      	cbnz	r4, 400c64 <ili9488_write_register+0x38>
}
  400c60:	b002      	add	sp, #8
  400c62:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_pin_high(LCD_SPI_CDS_PIO);
  400c64:	2006      	movs	r0, #6
  400c66:	4b0c      	ldr	r3, [pc, #48]	; (400c98 <ili9488_write_register+0x6c>)
  400c68:	4798      	blx	r3
		spi_write_packet(BOARD_ILI9488_SPI, us_data, size);
  400c6a:	4622      	mov	r2, r4
  400c6c:	4631      	mov	r1, r6
  400c6e:	4808      	ldr	r0, [pc, #32]	; (400c90 <ili9488_write_register+0x64>)
  400c70:	4b0a      	ldr	r3, [pc, #40]	; (400c9c <ili9488_write_register+0x70>)
  400c72:	4798      	blx	r3
		for(i = 0; i < 0x5F; i++);
  400c74:	2300      	movs	r3, #0
  400c76:	9301      	str	r3, [sp, #4]
  400c78:	9b01      	ldr	r3, [sp, #4]
  400c7a:	2b5e      	cmp	r3, #94	; 0x5e
  400c7c:	d8f0      	bhi.n	400c60 <ili9488_write_register+0x34>
  400c7e:	9b01      	ldr	r3, [sp, #4]
  400c80:	3301      	adds	r3, #1
  400c82:	9301      	str	r3, [sp, #4]
  400c84:	9b01      	ldr	r3, [sp, #4]
  400c86:	2b5e      	cmp	r3, #94	; 0x5e
  400c88:	d9f9      	bls.n	400c7e <ili9488_write_register+0x52>
  400c8a:	e7e9      	b.n	400c60 <ili9488_write_register+0x34>
  400c8c:	004013f9 	.word	0x004013f9
  400c90:	40008000 	.word	0x40008000
  400c94:	0040178d 	.word	0x0040178d
  400c98:	004013dd 	.word	0x004013dd
  400c9c:	004007c5 	.word	0x004007c5

00400ca0 <ili9488_write_ram_buffer>:
{
  400ca0:	b530      	push	{r4, r5, lr}
  400ca2:	b083      	sub	sp, #12
  400ca4:	4604      	mov	r4, r0
  400ca6:	460d      	mov	r5, r1
	pio_set_pin_high(LCD_SPI_CDS_PIO);
  400ca8:	2006      	movs	r0, #6
  400caa:	4b0a      	ldr	r3, [pc, #40]	; (400cd4 <ili9488_write_ram_buffer+0x34>)
  400cac:	4798      	blx	r3
	spi_write_packet(BOARD_ILI9488_SPI, p_ul_buf, ul_size);
  400cae:	462a      	mov	r2, r5
  400cb0:	4621      	mov	r1, r4
  400cb2:	4809      	ldr	r0, [pc, #36]	; (400cd8 <ili9488_write_ram_buffer+0x38>)
  400cb4:	4b09      	ldr	r3, [pc, #36]	; (400cdc <ili9488_write_ram_buffer+0x3c>)
  400cb6:	4798      	blx	r3
	for(i = 0; i < 0xFF; i++);
  400cb8:	2300      	movs	r3, #0
  400cba:	9301      	str	r3, [sp, #4]
  400cbc:	9b01      	ldr	r3, [sp, #4]
  400cbe:	2bfe      	cmp	r3, #254	; 0xfe
  400cc0:	d805      	bhi.n	400cce <ili9488_write_ram_buffer+0x2e>
  400cc2:	9b01      	ldr	r3, [sp, #4]
  400cc4:	3301      	adds	r3, #1
  400cc6:	9301      	str	r3, [sp, #4]
  400cc8:	9b01      	ldr	r3, [sp, #4]
  400cca:	2bfe      	cmp	r3, #254	; 0xfe
  400ccc:	d9f9      	bls.n	400cc2 <ili9488_write_ram_buffer+0x22>
}
  400cce:	b003      	add	sp, #12
  400cd0:	bd30      	pop	{r4, r5, pc}
  400cd2:	bf00      	nop
  400cd4:	004013dd 	.word	0x004013dd
  400cd8:	40008000 	.word	0x40008000
  400cdc:	004007c5 	.word	0x004007c5

00400ce0 <ili9488_delay>:
	for(i = 0; i < ul_ms; i++) {
  400ce0:	4601      	mov	r1, r0
  400ce2:	b130      	cbz	r0, 400cf2 <ili9488_delay+0x12>
  400ce4:	4a03      	ldr	r2, [pc, #12]	; (400cf4 <ili9488_delay+0x14>)
{
  400ce6:	4b04      	ldr	r3, [pc, #16]	; (400cf8 <ili9488_delay+0x18>)
		for(i = 0; i < 100000; i++) {
  400ce8:	3b01      	subs	r3, #1
  400cea:	d1fd      	bne.n	400ce8 <ili9488_delay+0x8>
	for(i = 0; i < ul_ms; i++) {
  400cec:	4291      	cmp	r1, r2
  400cee:	d8fa      	bhi.n	400ce6 <ili9488_delay+0x6>
  400cf0:	4770      	bx	lr
  400cf2:	4770      	bx	lr
  400cf4:	000186a1 	.word	0x000186a1
  400cf8:	000186a0 	.word	0x000186a0

00400cfc <ili9488_set_display_direction>:
 * \brief ILI9488 configure landscape.
 *
 * \Param LandscaprMode Landscape Mode.
 */
void ili9488_set_display_direction(enum ili9488_display_direction direction )
{
  400cfc:	b500      	push	{lr}
  400cfe:	b083      	sub	sp, #12
	ili9488_color_t value;
	if(direction) {
  400d00:	b958      	cbnz	r0, 400d1a <ili9488_set_display_direction+0x1e>
		value = 0xE8;
	} else {
		value = 0x48;
  400d02:	2348      	movs	r3, #72	; 0x48
  400d04:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &value, 1);
  400d08:	2201      	movs	r2, #1
  400d0a:	f10d 0107 	add.w	r1, sp, #7
  400d0e:	2036      	movs	r0, #54	; 0x36
  400d10:	4b04      	ldr	r3, [pc, #16]	; (400d24 <ili9488_set_display_direction+0x28>)
  400d12:	4798      	blx	r3
}
  400d14:	b003      	add	sp, #12
  400d16:	f85d fb04 	ldr.w	pc, [sp], #4
		value = 0xE8;
  400d1a:	23e8      	movs	r3, #232	; 0xe8
  400d1c:	f88d 3007 	strb.w	r3, [sp, #7]
  400d20:	e7f2      	b.n	400d08 <ili9488_set_display_direction+0xc>
  400d22:	bf00      	nop
  400d24:	00400c2d 	.word	0x00400c2d

00400d28 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  400d28:	b510      	push	{r4, lr}
  400d2a:	b084      	sub	sp, #16
	uint32_t cnt = 0;
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	col_start  =  x ;
  400d2c:	f8ad 000e 	strh.w	r0, [sp, #14]
	col_end    =  width + x - 1;
  400d30:	3a01      	subs	r2, #1
  400d32:	4402      	add	r2, r0
  400d34:	f8ad 200c 	strh.w	r2, [sp, #12]

	row_start = y ;
  400d38:	f8ad 100a 	strh.w	r1, [sp, #10]
	row_end   = height + y - 1;
  400d3c:	3b01      	subs	r3, #1
  400d3e:	4419      	add	r1, r3
  400d40:	f8ad 1008 	strh.w	r1, [sp, #8]

	buf[0] = get_8b_to_16b(col_start);
  400d44:	0a03      	lsrs	r3, r0, #8
  400d46:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(col_start);
  400d4a:	f88d 0005 	strb.w	r0, [sp, #5]
	buf[2] = get_8b_to_16b(col_end);
  400d4e:	f3c2 2307 	ubfx	r3, r2, #8, #8
  400d52:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(col_end);
  400d56:	f88d 2007 	strb.w	r2, [sp, #7]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  400d5a:	2204      	movs	r2, #4
  400d5c:	eb0d 0102 	add.w	r1, sp, r2
  400d60:	202a      	movs	r0, #42	; 0x2a
  400d62:	4c10      	ldr	r4, [pc, #64]	; (400da4 <ili9488_set_window+0x7c>)
  400d64:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400d66:	2200      	movs	r2, #0
  400d68:	4611      	mov	r1, r2
  400d6a:	4610      	mov	r0, r2
  400d6c:	47a0      	blx	r4

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  400d6e:	f89d 300b 	ldrb.w	r3, [sp, #11]
  400d72:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(row_start);
  400d76:	f89d 300a 	ldrb.w	r3, [sp, #10]
  400d7a:	f88d 3005 	strb.w	r3, [sp, #5]
	buf[2] = get_8b_to_16b(row_end);
  400d7e:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400d82:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(row_end);
  400d86:	f89d 3008 	ldrb.w	r3, [sp, #8]
  400d8a:	f88d 3007 	strb.w	r3, [sp, #7]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  400d8e:	2204      	movs	r2, #4
  400d90:	eb0d 0102 	add.w	r1, sp, r2
  400d94:	202b      	movs	r0, #43	; 0x2b
  400d96:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400d98:	2200      	movs	r2, #0
  400d9a:	4611      	mov	r1, r2
  400d9c:	4610      	mov	r0, r2
  400d9e:	47a0      	blx	r4
}
  400da0:	b004      	add	sp, #16
  400da2:	bd10      	pop	{r4, pc}
  400da4:	00400c2d 	.word	0x00400c2d

00400da8 <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  400da8:	b508      	push	{r3, lr}
	ili9488_write_register(ILI9488_CMD_DISPLAY_ON, 0, 0);
  400daa:	2200      	movs	r2, #0
  400dac:	4611      	mov	r1, r2
  400dae:	2029      	movs	r0, #41	; 0x29
  400db0:	4b01      	ldr	r3, [pc, #4]	; (400db8 <ili9488_display_on+0x10>)
  400db2:	4798      	blx	r3
  400db4:	bd08      	pop	{r3, pc}
  400db6:	bf00      	nop
  400db8:	00400c2d 	.word	0x00400c2d

00400dbc <ili9488_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9488_set_foreground_color(uint32_t ul_color)
{
  400dbc:	b410      	push	{r4}
		g_ul_pixel_cache[i] = ul_color;
	}
#endif
#ifdef ILI9488_SPIMODE
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
		g_ul_pixel_cache[i++] = ul_color>>16;
  400dbe:	f3c0 4407 	ubfx	r4, r0, #16, #8
		g_ul_pixel_cache[i++] = ul_color>>8;
  400dc2:	f3c0 2107 	ubfx	r1, r0, #8, #8
  400dc6:	4b06      	ldr	r3, [pc, #24]	; (400de0 <ili9488_set_foreground_color+0x24>)
  400dc8:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
		g_ul_pixel_cache[i++] = ul_color>>16;
  400dcc:	701c      	strb	r4, [r3, #0]
		g_ul_pixel_cache[i++] = ul_color>>8;
  400dce:	7059      	strb	r1, [r3, #1]
		g_ul_pixel_cache[i++] = ul_color&0xFF;
  400dd0:	7098      	strb	r0, [r3, #2]
  400dd2:	3303      	adds	r3, #3
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
  400dd4:	4293      	cmp	r3, r2
  400dd6:	d1f9      	bne.n	400dcc <ili9488_set_foreground_color+0x10>
	}
#endif
}
  400dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ddc:	4770      	bx	lr
  400dde:	bf00      	nop
  400de0:	204009dc 	.word	0x204009dc

00400de4 <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  400de4:	b510      	push	{r4, lr}
  400de6:	b084      	sub	sp, #16
  400de8:	f8ad 0006 	strh.w	r0, [sp, #6]
  400dec:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint32_t cnt = 0;

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	buf[0] = get_8b_to_16b(x);
  400df0:	0a03      	lsrs	r3, r0, #8
  400df2:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[1] = get_0b_to_8b(x);
  400df6:	b2c0      	uxtb	r0, r0
  400df8:	f88d 000d 	strb.w	r0, [sp, #13]
	buf[2] = get_8b_to_16b(x);
  400dfc:	f88d 300e 	strb.w	r3, [sp, #14]
	buf[3] = get_0b_to_8b(x);
  400e00:	f88d 000f 	strb.w	r0, [sp, #15]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  400e04:	2204      	movs	r2, #4
  400e06:	a903      	add	r1, sp, #12
  400e08:	202a      	movs	r0, #42	; 0x2a
  400e0a:	4c0e      	ldr	r4, [pc, #56]	; (400e44 <ili9488_set_cursor_position+0x60>)
  400e0c:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400e0e:	2200      	movs	r2, #0
  400e10:	4611      	mov	r1, r2
  400e12:	4610      	mov	r0, r2
  400e14:	47a0      	blx	r4


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  400e16:	f89d 2005 	ldrb.w	r2, [sp, #5]
  400e1a:	f88d 200c 	strb.w	r2, [sp, #12]
	buf[1] = get_0b_to_8b(y);
  400e1e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  400e22:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[2] = get_8b_to_16b(y);
  400e26:	f88d 200e 	strb.w	r2, [sp, #14]
	buf[3] = get_0b_to_8b(y);
  400e2a:	f88d 300f 	strb.w	r3, [sp, #15]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  400e2e:	2204      	movs	r2, #4
  400e30:	a903      	add	r1, sp, #12
  400e32:	202b      	movs	r0, #43	; 0x2b
  400e34:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400e36:	2200      	movs	r2, #0
  400e38:	4611      	mov	r1, r2
  400e3a:	4610      	mov	r0, r2
  400e3c:	47a0      	blx	r4
}
  400e3e:	b004      	add	sp, #16
  400e40:	bd10      	pop	{r4, pc}
  400e42:	bf00      	nop
  400e44:	00400c2d 	.word	0x00400c2d

00400e48 <ili9488_init>:
{
  400e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400e4c:	b087      	sub	sp, #28
  400e4e:	4681      	mov	r9, r0
	struct spi_device ILI9488_SPI_DEVICE = {
  400e50:	2703      	movs	r7, #3
  400e52:	ae06      	add	r6, sp, #24
  400e54:	f846 7d08 	str.w	r7, [r6, #-8]!
	spi_master_init(BOARD_ILI9488_SPI);
  400e58:	4d5d      	ldr	r5, [pc, #372]	; (400fd0 <ili9488_init+0x188>)
  400e5a:	4628      	mov	r0, r5
  400e5c:	4b5d      	ldr	r3, [pc, #372]	; (400fd4 <ili9488_init+0x18c>)
  400e5e:	4798      	blx	r3
	spi_master_setup_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE, SPI_MODE_3, ILI9488_SPI_BAUDRATE, 0);
  400e60:	2400      	movs	r4, #0
  400e62:	9400      	str	r4, [sp, #0]
  400e64:	4b5c      	ldr	r3, [pc, #368]	; (400fd8 <ili9488_init+0x190>)
  400e66:	463a      	mov	r2, r7
  400e68:	4631      	mov	r1, r6
  400e6a:	4628      	mov	r0, r5
  400e6c:	f8df 8198 	ldr.w	r8, [pc, #408]	; 401008 <ili9488_init+0x1c0>
  400e70:	47c0      	blx	r8
	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  400e72:	4622      	mov	r2, r4
  400e74:	4639      	mov	r1, r7
  400e76:	4628      	mov	r0, r5
  400e78:	4b58      	ldr	r3, [pc, #352]	; (400fdc <ili9488_init+0x194>)
  400e7a:	4798      	blx	r3
	spi_select_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE);
  400e7c:	4631      	mov	r1, r6
  400e7e:	4628      	mov	r0, r5
  400e80:	4b57      	ldr	r3, [pc, #348]	; (400fe0 <ili9488_init+0x198>)
  400e82:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400e84:	2001      	movs	r0, #1
  400e86:	6028      	str	r0, [r5, #0]
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  400e88:	6168      	str	r0, [r5, #20]
	ili9488_write_register(ILI9488_CMD_SOFTWARE_RESET, 0x0000, 0);
  400e8a:	4622      	mov	r2, r4
  400e8c:	4621      	mov	r1, r4
  400e8e:	4e55      	ldr	r6, [pc, #340]	; (400fe4 <ili9488_init+0x19c>)
  400e90:	47b0      	blx	r6
	ili9488_delay(200);
  400e92:	20c8      	movs	r0, #200	; 0xc8
  400e94:	4d54      	ldr	r5, [pc, #336]	; (400fe8 <ili9488_init+0x1a0>)
  400e96:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_SLEEP_OUT, 0x0000, 0);
  400e98:	4622      	mov	r2, r4
  400e9a:	4621      	mov	r1, r4
  400e9c:	2011      	movs	r0, #17
  400e9e:	47b0      	blx	r6
	ili9488_delay(200);
  400ea0:	20c8      	movs	r0, #200	; 0xc8
  400ea2:	47a8      	blx	r5
	reg = 0x81;
  400ea4:	2381      	movs	r3, #129	; 0x81
  400ea6:	f88d 300a 	strb.w	r3, [sp, #10]
	param = 0x0;
  400eaa:	f88d 400b 	strb.w	r4, [sp, #11]
  400eae:	2610      	movs	r6, #16
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  400eb0:	f04f 0801 	mov.w	r8, #1
  400eb4:	4f4b      	ldr	r7, [pc, #300]	; (400fe4 <ili9488_init+0x19c>)
		for(j = 0; j < 0xFF; j++);
  400eb6:	4625      	mov	r5, r4
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  400eb8:	4642      	mov	r2, r8
  400eba:	f10d 010a 	add.w	r1, sp, #10
  400ebe:	20fb      	movs	r0, #251	; 0xfb
  400ec0:	47b8      	blx	r7
		reg++;
  400ec2:	f89d 300a 	ldrb.w	r3, [sp, #10]
  400ec6:	3301      	adds	r3, #1
  400ec8:	f88d 300a 	strb.w	r3, [sp, #10]
		for(j = 0; j < 0xFF; j++);
  400ecc:	9503      	str	r5, [sp, #12]
  400ece:	9b03      	ldr	r3, [sp, #12]
  400ed0:	2bfe      	cmp	r3, #254	; 0xfe
  400ed2:	d805      	bhi.n	400ee0 <ili9488_init+0x98>
  400ed4:	9b03      	ldr	r3, [sp, #12]
  400ed6:	3301      	adds	r3, #1
  400ed8:	9303      	str	r3, [sp, #12]
  400eda:	9b03      	ldr	r3, [sp, #12]
  400edc:	2bfe      	cmp	r3, #254	; 0xfe
  400ede:	d9f9      	bls.n	400ed4 <ili9488_init+0x8c>
		ili9488_write_register(ILI9488_CMD_READ_ID4, 0, 0);
  400ee0:	462a      	mov	r2, r5
  400ee2:	4629      	mov	r1, r5
  400ee4:	20d3      	movs	r0, #211	; 0xd3
  400ee6:	47b8      	blx	r7
			pio_set_pin_high(LCD_SPI_CDS_PIO);
  400ee8:	2006      	movs	r0, #6
  400eea:	4b40      	ldr	r3, [pc, #256]	; (400fec <ili9488_init+0x1a4>)
  400eec:	4798      	blx	r3
			spi_read_packet(BOARD_ILI9488_SPI, &chipidBuf, 1);
  400eee:	4642      	mov	r2, r8
  400ef0:	f10d 0109 	add.w	r1, sp, #9
  400ef4:	4836      	ldr	r0, [pc, #216]	; (400fd0 <ili9488_init+0x188>)
  400ef6:	4b3e      	ldr	r3, [pc, #248]	; (400ff0 <ili9488_init+0x1a8>)
  400ef8:	4798      	blx	r3
			for(j = 0; j < 0xFF; j++);
  400efa:	9503      	str	r5, [sp, #12]
  400efc:	9b03      	ldr	r3, [sp, #12]
  400efe:	2bfe      	cmp	r3, #254	; 0xfe
  400f00:	d805      	bhi.n	400f0e <ili9488_init+0xc6>
  400f02:	9b03      	ldr	r3, [sp, #12]
  400f04:	3301      	adds	r3, #1
  400f06:	9303      	str	r3, [sp, #12]
  400f08:	9b03      	ldr	r3, [sp, #12]
  400f0a:	2bfe      	cmp	r3, #254	; 0xfe
  400f0c:	d9f9      	bls.n	400f02 <ili9488_init+0xba>
		chipid |= (chipidBuf & 0xFF) << ((i - 1) << 3);
  400f0e:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400f12:	40b3      	lsls	r3, r6
  400f14:	431c      	orrs	r4, r3
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &param, 1);
  400f16:	4642      	mov	r2, r8
  400f18:	f10d 010b 	add.w	r1, sp, #11
  400f1c:	20fb      	movs	r0, #251	; 0xfb
  400f1e:	47b8      	blx	r7
		for(j = 0; j < 0xFFF; j++);
  400f20:	9503      	str	r5, [sp, #12]
  400f22:	9a03      	ldr	r2, [sp, #12]
  400f24:	f640 73fe 	movw	r3, #4094	; 0xffe
  400f28:	429a      	cmp	r2, r3
  400f2a:	d806      	bhi.n	400f3a <ili9488_init+0xf2>
  400f2c:	461a      	mov	r2, r3
  400f2e:	9b03      	ldr	r3, [sp, #12]
  400f30:	3301      	adds	r3, #1
  400f32:	9303      	str	r3, [sp, #12]
  400f34:	9b03      	ldr	r3, [sp, #12]
  400f36:	4293      	cmp	r3, r2
  400f38:	d9f9      	bls.n	400f2e <ili9488_init+0xe6>
  400f3a:	3e08      	subs	r6, #8
	for (i = 3; i > 0; i--) {
  400f3c:	f116 0f08 	cmn.w	r6, #8
  400f40:	d1ba      	bne.n	400eb8 <ili9488_init+0x70>
	if (chipid != ILI9488_DEVICE_CODE) {
  400f42:	f249 4388 	movw	r3, #38024	; 0x9488
  400f46:	429c      	cmp	r4, r3
  400f48:	d003      	beq.n	400f52 <ili9488_init+0x10a>
		return 1;
  400f4a:	2001      	movs	r0, #1
}
  400f4c:	b007      	add	sp, #28
  400f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	param = 0x48;
  400f52:	ad06      	add	r5, sp, #24
  400f54:	2348      	movs	r3, #72	; 0x48
  400f56:	f805 3d01 	strb.w	r3, [r5, #-1]!
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &param, 1);
  400f5a:	2201      	movs	r2, #1
  400f5c:	4629      	mov	r1, r5
  400f5e:	2036      	movs	r0, #54	; 0x36
  400f60:	4e20      	ldr	r6, [pc, #128]	; (400fe4 <ili9488_init+0x19c>)
  400f62:	47b0      	blx	r6
	ili9488_delay(100);
  400f64:	2064      	movs	r0, #100	; 0x64
  400f66:	4c20      	ldr	r4, [pc, #128]	; (400fe8 <ili9488_init+0x1a0>)
  400f68:	47a0      	blx	r4
	param = 0x04;
  400f6a:	2304      	movs	r3, #4
  400f6c:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_CABC_CONTROL_9, &param, 1);
  400f70:	2201      	movs	r2, #1
  400f72:	4629      	mov	r1, r5
  400f74:	20cf      	movs	r0, #207	; 0xcf
  400f76:	47b0      	blx	r6
	ili9488_delay(100);
  400f78:	2064      	movs	r0, #100	; 0x64
  400f7a:	47a0      	blx	r4
	param = 0x06;
  400f7c:	2306      	movs	r3, #6
  400f7e:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, &param, 1);
  400f82:	2201      	movs	r2, #1
  400f84:	4629      	mov	r1, r5
  400f86:	203a      	movs	r0, #58	; 0x3a
  400f88:	47b0      	blx	r6
	ili9488_delay(100);
  400f8a:	2064      	movs	r0, #100	; 0x64
  400f8c:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NORMAL_DISP_MODE_ON, 0, 0);
  400f8e:	2200      	movs	r2, #0
  400f90:	4611      	mov	r1, r2
  400f92:	2013      	movs	r0, #19
  400f94:	47b0      	blx	r6
	ili9488_delay(100);
  400f96:	2064      	movs	r0, #100	; 0x64
  400f98:	47a0      	blx	r4
	ili9488_display_on();
  400f9a:	4b16      	ldr	r3, [pc, #88]	; (400ff4 <ili9488_init+0x1ac>)
  400f9c:	4798      	blx	r3
	ili9488_delay(100);
  400f9e:	2064      	movs	r0, #100	; 0x64
  400fa0:	47a0      	blx	r4
	ili9488_set_display_direction(LANDSCAPE);
  400fa2:	2000      	movs	r0, #0
  400fa4:	4b14      	ldr	r3, [pc, #80]	; (400ff8 <ili9488_init+0x1b0>)
  400fa6:	4798      	blx	r3
	ili9488_delay(100);
  400fa8:	2064      	movs	r0, #100	; 0x64
  400faa:	47a0      	blx	r4
	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  400fac:	f8b9 3004 	ldrh.w	r3, [r9, #4]
  400fb0:	f8b9 2000 	ldrh.w	r2, [r9]
  400fb4:	2100      	movs	r1, #0
  400fb6:	4608      	mov	r0, r1
  400fb8:	4c10      	ldr	r4, [pc, #64]	; (400ffc <ili9488_init+0x1b4>)
  400fba:	47a0      	blx	r4
	ili9488_set_foreground_color(p_opt->foreground_color);
  400fbc:	f8d9 0008 	ldr.w	r0, [r9, #8]
  400fc0:	4b0f      	ldr	r3, [pc, #60]	; (401000 <ili9488_init+0x1b8>)
  400fc2:	4798      	blx	r3
	ili9488_set_cursor_position(0, 0);
  400fc4:	2100      	movs	r1, #0
  400fc6:	4608      	mov	r0, r1
  400fc8:	4b0e      	ldr	r3, [pc, #56]	; (401004 <ili9488_init+0x1bc>)
  400fca:	4798      	blx	r3
	return 0;
  400fcc:	2000      	movs	r0, #0
  400fce:	e7bd      	b.n	400f4c <ili9488_init+0x104>
  400fd0:	40008000 	.word	0x40008000
  400fd4:	004006c1 	.word	0x004006c1
  400fd8:	01312d00 	.word	0x01312d00
  400fdc:	004017fd 	.word	0x004017fd
  400fe0:	00400795 	.word	0x00400795
  400fe4:	00400c2d 	.word	0x00400c2d
  400fe8:	00400ce1 	.word	0x00400ce1
  400fec:	004013dd 	.word	0x004013dd
  400ff0:	004007fb 	.word	0x004007fb
  400ff4:	00400da9 	.word	0x00400da9
  400ff8:	00400cfd 	.word	0x00400cfd
  400ffc:	00400d29 	.word	0x00400d29
  401000:	00400dbd 	.word	0x00400dbd
  401004:	00400de5 	.word	0x00400de5
  401008:	00400715 	.word	0x00400715

0040100c <ili9488_draw_pixel>:
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9488_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= ILI9488_LCD_WIDTH) || (ul_y >= ILI9488_LCD_HEIGHT)) {
  40100c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  401010:	d20f      	bcs.n	401032 <ili9488_draw_pixel+0x26>
  401012:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
  401016:	d20c      	bcs.n	401032 <ili9488_draw_pixel+0x26>
{
  401018:	b508      	push	{r3, lr}
		return 1;
	}

	/* Set cursor */
	ili9488_set_cursor_position(ul_x, ul_y);
  40101a:	b289      	uxth	r1, r1
  40101c:	b280      	uxth	r0, r0
  40101e:	4b06      	ldr	r3, [pc, #24]	; (401038 <ili9488_draw_pixel+0x2c>)
  401020:	4798      	blx	r3

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  401022:	4b06      	ldr	r3, [pc, #24]	; (40103c <ili9488_draw_pixel+0x30>)
  401024:	4798      	blx	r3
	ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_COLOR_UNIT);
  401026:	2103      	movs	r1, #3
  401028:	4805      	ldr	r0, [pc, #20]	; (401040 <ili9488_draw_pixel+0x34>)
  40102a:	4b06      	ldr	r3, [pc, #24]	; (401044 <ili9488_draw_pixel+0x38>)
  40102c:	4798      	blx	r3
	return 0;
  40102e:	2000      	movs	r0, #0
  401030:	bd08      	pop	{r3, pc}
		return 1;
  401032:	2001      	movs	r0, #1
  401034:	4770      	bx	lr
  401036:	bf00      	nop
  401038:	00400de5 	.word	0x00400de5
  40103c:	00400bf1 	.word	0x00400bf1
  401040:	204009dc 	.word	0x204009dc
  401044:	00400ca1 	.word	0x00400ca1

00401048 <ili9488_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili9488_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  401048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40104c:	b084      	sub	sp, #16
  40104e:	9003      	str	r0, [sp, #12]
  401050:	9102      	str	r1, [sp, #8]
  401052:	9201      	str	r2, [sp, #4]
  401054:	aa04      	add	r2, sp, #16
  401056:	f842 3d10 	str.w	r3, [r2, #-16]!
	uint32_t size, blocks;

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  40105a:	4613      	mov	r3, r2
  40105c:	aa01      	add	r2, sp, #4
  40105e:	a902      	add	r1, sp, #8
  401060:	a803      	add	r0, sp, #12
  401062:	4c22      	ldr	r4, [pc, #136]	; (4010ec <ili9488_draw_filled_rectangle+0xa4>)
  401064:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1, (ul_y2 - ul_y1) + 1);
  401066:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  40106a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  40106e:	9b00      	ldr	r3, [sp, #0]
  401070:	3301      	adds	r3, #1
  401072:	1a5b      	subs	r3, r3, r1
  401074:	9a01      	ldr	r2, [sp, #4]
  401076:	3201      	adds	r2, #1
  401078:	1a12      	subs	r2, r2, r0
  40107a:	b29b      	uxth	r3, r3
  40107c:	b292      	uxth	r2, r2
  40107e:	4c1c      	ldr	r4, [pc, #112]	; (4010f0 <ili9488_draw_filled_rectangle+0xa8>)
  401080:	47a0      	blx	r4

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  401082:	4b1c      	ldr	r3, [pc, #112]	; (4010f4 <ili9488_draw_filled_rectangle+0xac>)
  401084:	4798      	blx	r3

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  401086:	9903      	ldr	r1, [sp, #12]
  401088:	9d01      	ldr	r5, [sp, #4]
  40108a:	1a69      	subs	r1, r5, r1
  40108c:	9d00      	ldr	r5, [sp, #0]
  40108e:	3501      	adds	r5, #1
  401090:	9b02      	ldr	r3, [sp, #8]
  401092:	1aed      	subs	r5, r5, r3
  401094:	fb01 5505 	mla	r5, r1, r5, r5
	/* Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  401098:	4b17      	ldr	r3, [pc, #92]	; (4010f8 <ili9488_draw_filled_rectangle+0xb0>)
  40109a:	fba3 2305 	umull	r2, r3, r3, r5
  40109e:	0a1b      	lsrs	r3, r3, #8
	while (blocks--) {
  4010a0:	b163      	cbz	r3, 4010bc <ili9488_draw_filled_rectangle+0x74>
  4010a2:	1e5c      	subs	r4, r3, #1
		ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT);
  4010a4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 401100 <ili9488_draw_filled_rectangle+0xb8>
  4010a8:	f44f 7770 	mov.w	r7, #960	; 0x3c0
  4010ac:	4e13      	ldr	r6, [pc, #76]	; (4010fc <ili9488_draw_filled_rectangle+0xb4>)
  4010ae:	4639      	mov	r1, r7
  4010b0:	4640      	mov	r0, r8
  4010b2:	47b0      	blx	r6
	while (blocks--) {
  4010b4:	3c01      	subs	r4, #1
  4010b6:	f1b4 3fff 	cmp.w	r4, #4294967295
  4010ba:	d1f8      	bne.n	4010ae <ili9488_draw_filled_rectangle+0x66>
	}

	/* Send remaining pixels */
	ili9488_write_ram_buffer(g_ul_pixel_cache, (size % LCD_DATA_CACHE_SIZE) * LCD_DATA_COLOR_UNIT);
  4010bc:	490e      	ldr	r1, [pc, #56]	; (4010f8 <ili9488_draw_filled_rectangle+0xb0>)
  4010be:	fba1 3105 	umull	r3, r1, r1, r5
  4010c2:	0a09      	lsrs	r1, r1, #8
  4010c4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4010c8:	eba5 1181 	sub.w	r1, r5, r1, lsl #6
  4010cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4010d0:	480b      	ldr	r0, [pc, #44]	; (401100 <ili9488_draw_filled_rectangle+0xb8>)
  4010d2:	4b0a      	ldr	r3, [pc, #40]	; (4010fc <ili9488_draw_filled_rectangle+0xb4>)
  4010d4:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  4010d6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  4010da:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4010de:	2100      	movs	r1, #0
  4010e0:	4608      	mov	r0, r1
  4010e2:	4c03      	ldr	r4, [pc, #12]	; (4010f0 <ili9488_draw_filled_rectangle+0xa8>)
  4010e4:	47a0      	blx	r4

}
  4010e6:	b004      	add	sp, #16
  4010e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4010ec:	00400b99 	.word	0x00400b99
  4010f0:	00400d29 	.word	0x00400d29
  4010f4:	00400bf1 	.word	0x00400bf1
  4010f8:	cccccccd 	.word	0xcccccccd
  4010fc:	00400ca1 	.word	0x00400ca1
  401100:	204009dc 	.word	0x204009dc

00401104 <ili9488_draw_line>:
{
  401104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401108:	b083      	sub	sp, #12
  40110a:	4606      	mov	r6, r0
  40110c:	4688      	mov	r8, r1
	if ((ul_y1 == ul_y2) || (ul_x1 == ul_x2)) {
  40110e:	4299      	cmp	r1, r3
  401110:	d02b      	beq.n	40116a <ili9488_draw_line+0x66>
  401112:	4290      	cmp	r0, r2
  401114:	d029      	beq.n	40116a <ili9488_draw_line+0x66>
	x = ul_x1;
  401116:	4681      	mov	r9, r0
	y = ul_y1;
  401118:	460f      	mov	r7, r1
	dx = ul_x2 - ul_x1;
  40111a:	1a12      	subs	r2, r2, r0
	dy = ul_y2 - ul_y1;
  40111c:	1a5b      	subs	r3, r3, r1
	xinc = (dx > 0) ? 1 : -1;
  40111e:	2a00      	cmp	r2, #0
  401120:	bfcc      	ite	gt
  401122:	2101      	movgt	r1, #1
  401124:	f04f 31ff 	movle.w	r1, #4294967295
  401128:	9100      	str	r1, [sp, #0]
	yinc = (dy > 0) ? 1 : -1;
  40112a:	2b00      	cmp	r3, #0
  40112c:	bfcc      	ite	gt
  40112e:	2001      	movgt	r0, #1
  401130:	f04f 30ff 	movle.w	r0, #4294967295
  401134:	9001      	str	r0, [sp, #4]
	dx = abs(ul_x2 - ul_x1);
  401136:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
  40113a:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
	dy = abs(ul_y2 - ul_y1);
  40113e:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
  401142:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
	ili9488_draw_pixel(x, y);
  401146:	4641      	mov	r1, r8
  401148:	4630      	mov	r0, r6
  40114a:	4b21      	ldr	r3, [pc, #132]	; (4011d0 <ili9488_draw_line+0xcc>)
  40114c:	4798      	blx	r3
	if (dx > dy) {
  40114e:	42a5      	cmp	r5, r4
  401150:	dd22      	ble.n	401198 <ili9488_draw_line+0x94>
		cumul = dx >> 1;
  401152:	ea4f 0865 	mov.w	r8, r5, asr #1
		for (i = 1; i <= dx; i++) {
  401156:	2d00      	cmp	r5, #0
  401158:	dd0b      	ble.n	401172 <ili9488_draw_line+0x6e>
  40115a:	9900      	ldr	r1, [sp, #0]
  40115c:	4689      	mov	r9, r1
  40115e:	440e      	add	r6, r1
  401160:	f04f 0a01 	mov.w	sl, #1
			ili9488_draw_pixel(x, y);
  401164:	f8df b068 	ldr.w	fp, [pc, #104]	; 4011d0 <ili9488_draw_line+0xcc>
  401168:	e00e      	b.n	401188 <ili9488_draw_line+0x84>
		ili9488_draw_filled_rectangle(ul_x1, ul_y1, ul_x2, ul_y2);
  40116a:	4641      	mov	r1, r8
  40116c:	4630      	mov	r0, r6
  40116e:	4c19      	ldr	r4, [pc, #100]	; (4011d4 <ili9488_draw_line+0xd0>)
  401170:	47a0      	blx	r4
}
  401172:	b003      	add	sp, #12
  401174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ili9488_draw_pixel(x, y);
  401178:	4639      	mov	r1, r7
  40117a:	4630      	mov	r0, r6
  40117c:	47d8      	blx	fp
		for (i = 1; i <= dx; i++) {
  40117e:	f10a 0a01 	add.w	sl, sl, #1
  401182:	444e      	add	r6, r9
  401184:	4555      	cmp	r5, sl
  401186:	dbf4      	blt.n	401172 <ili9488_draw_line+0x6e>
			cumul += dy;
  401188:	44a0      	add	r8, r4
			if (cumul >= dx) {
  40118a:	4545      	cmp	r5, r8
  40118c:	dcf4      	bgt.n	401178 <ili9488_draw_line+0x74>
				cumul -= dx;
  40118e:	eba8 0805 	sub.w	r8, r8, r5
				y += yinc;
  401192:	9b01      	ldr	r3, [sp, #4]
  401194:	441f      	add	r7, r3
  401196:	e7ef      	b.n	401178 <ili9488_draw_line+0x74>
		cumul = dy >> 1;
  401198:	1067      	asrs	r7, r4, #1
		for (i = 1; i <= dy; i++) {
  40119a:	2c00      	cmp	r4, #0
  40119c:	dde9      	ble.n	401172 <ili9488_draw_line+0x6e>
  40119e:	9b01      	ldr	r3, [sp, #4]
  4011a0:	469b      	mov	fp, r3
  4011a2:	4443      	add	r3, r8
  4011a4:	461e      	mov	r6, r3
  4011a6:	f04f 0801 	mov.w	r8, #1
			ili9488_draw_pixel(x, y);
  4011aa:	f8df a024 	ldr.w	sl, [pc, #36]	; 4011d0 <ili9488_draw_line+0xcc>
  4011ae:	e007      	b.n	4011c0 <ili9488_draw_line+0xbc>
  4011b0:	4631      	mov	r1, r6
  4011b2:	4648      	mov	r0, r9
  4011b4:	47d0      	blx	sl
		for (i = 1; i <= dy; i++) {
  4011b6:	f108 0801 	add.w	r8, r8, #1
  4011ba:	445e      	add	r6, fp
  4011bc:	4544      	cmp	r4, r8
  4011be:	dbd8      	blt.n	401172 <ili9488_draw_line+0x6e>
			cumul += dx;
  4011c0:	442f      	add	r7, r5
			if (cumul >= dy) {
  4011c2:	42bc      	cmp	r4, r7
  4011c4:	dcf4      	bgt.n	4011b0 <ili9488_draw_line+0xac>
				cumul -= dy;
  4011c6:	1b3f      	subs	r7, r7, r4
				x += xinc;
  4011c8:	9b00      	ldr	r3, [sp, #0]
  4011ca:	4499      	add	r9, r3
  4011cc:	e7f0      	b.n	4011b0 <ili9488_draw_line+0xac>
  4011ce:	bf00      	nop
  4011d0:	0040100d 	.word	0x0040100d
  4011d4:	00401049 	.word	0x00401049

004011d8 <ili9488_draw_pixmap>:
 * \param ul_height height of the picture.
 * \param p_ul_pixmap pixmap of the image.
 */
void ili9488_draw_pixmap(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height, const ili9488_color_t *p_ul_pixmap)
{
  4011d8:	b510      	push	{r4, lr}
  4011da:	b084      	sub	sp, #16
	uint32_t size;
	uint32_t dwX1, dwY1, dwX2, dwY2;
	dwX1 = ul_x;
  4011dc:	9003      	str	r0, [sp, #12]
	dwY1 = ul_y;
  4011de:	9102      	str	r1, [sp, #8]
	dwX2 = ul_x + ul_width - 1;
  4011e0:	3a01      	subs	r2, #1
  4011e2:	4410      	add	r0, r2
  4011e4:	9001      	str	r0, [sp, #4]
	dwY2 = ul_y + ul_height - 1;
  4011e6:	3b01      	subs	r3, #1
  4011e8:	4419      	add	r1, r3
  4011ea:	ab04      	add	r3, sp, #16
  4011ec:	f843 1d10 	str.w	r1, [r3, #-16]!

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&dwX1, &dwY1, &dwX2, &dwY2);
  4011f0:	aa01      	add	r2, sp, #4
  4011f2:	a902      	add	r1, sp, #8
  4011f4:	a803      	add	r0, sp, #12
  4011f6:	4c13      	ldr	r4, [pc, #76]	; (401244 <ili9488_draw_pixmap+0x6c>)
  4011f8:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(dwX1, dwY1, (dwX2 - dwX1 + 1), (dwY2 - dwY1 + 1));
  4011fa:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  4011fe:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  401202:	9b00      	ldr	r3, [sp, #0]
  401204:	3301      	adds	r3, #1
  401206:	1a5b      	subs	r3, r3, r1
  401208:	9a01      	ldr	r2, [sp, #4]
  40120a:	3201      	adds	r2, #1
  40120c:	1a12      	subs	r2, r2, r0
  40120e:	b29b      	uxth	r3, r3
  401210:	b292      	uxth	r2, r2
  401212:	4c0d      	ldr	r4, [pc, #52]	; (401248 <ili9488_draw_pixmap+0x70>)
  401214:	47a0      	blx	r4

	size = (dwX2 - dwX1) * (dwY2 - dwY1);
  401216:	9903      	ldr	r1, [sp, #12]
  401218:	9a01      	ldr	r2, [sp, #4]
  40121a:	1a51      	subs	r1, r2, r1
  40121c:	9a02      	ldr	r2, [sp, #8]
  40121e:	9b00      	ldr	r3, [sp, #0]
  401220:	1a9a      	subs	r2, r3, r2
  401222:	fb02 f201 	mul.w	r2, r2, r1

	ili9488_write_register(ILI9488_CMD_MEMORY_WRITE, p_ul_pixmap, size * LCD_DATA_COLOR_UNIT);
  401226:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40122a:	9906      	ldr	r1, [sp, #24]
  40122c:	202c      	movs	r0, #44	; 0x2c
  40122e:	4b07      	ldr	r3, [pc, #28]	; (40124c <ili9488_draw_pixmap+0x74>)
  401230:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  401232:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  401236:	f44f 72a0 	mov.w	r2, #320	; 0x140
  40123a:	2100      	movs	r1, #0
  40123c:	4608      	mov	r0, r1
  40123e:	47a0      	blx	r4
}
  401240:	b004      	add	sp, #16
  401242:	bd10      	pop	{r4, pc}
  401244:	00400b99 	.word	0x00400b99
  401248:	00400d29 	.word	0x00400d29
  40124c:	00400c2d 	.word	0x00400c2d

00401250 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  401250:	6301      	str	r1, [r0, #48]	; 0x30
  401252:	4770      	bx	lr

00401254 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401254:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401256:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40125a:	d03a      	beq.n	4012d2 <pio_set_peripheral+0x7e>
  40125c:	d813      	bhi.n	401286 <pio_set_peripheral+0x32>
  40125e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401262:	d025      	beq.n	4012b0 <pio_set_peripheral+0x5c>
  401264:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401268:	d10a      	bne.n	401280 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40126a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40126c:	4313      	orrs	r3, r2
  40126e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401270:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401272:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401274:	400b      	ands	r3, r1
  401276:	ea23 0302 	bic.w	r3, r3, r2
  40127a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40127c:	6042      	str	r2, [r0, #4]
  40127e:	4770      	bx	lr
	switch (ul_type) {
  401280:	2900      	cmp	r1, #0
  401282:	d1fb      	bne.n	40127c <pio_set_peripheral+0x28>
  401284:	4770      	bx	lr
  401286:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40128a:	d021      	beq.n	4012d0 <pio_set_peripheral+0x7c>
  40128c:	d809      	bhi.n	4012a2 <pio_set_peripheral+0x4e>
  40128e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401292:	d1f3      	bne.n	40127c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401294:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401296:	4313      	orrs	r3, r2
  401298:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40129a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40129c:	4313      	orrs	r3, r2
  40129e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4012a0:	e7ec      	b.n	40127c <pio_set_peripheral+0x28>
	switch (ul_type) {
  4012a2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4012a6:	d013      	beq.n	4012d0 <pio_set_peripheral+0x7c>
  4012a8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4012ac:	d010      	beq.n	4012d0 <pio_set_peripheral+0x7c>
  4012ae:	e7e5      	b.n	40127c <pio_set_peripheral+0x28>
{
  4012b0:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4012b2:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4012b4:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4012b6:	43d3      	mvns	r3, r2
  4012b8:	4021      	ands	r1, r4
  4012ba:	461c      	mov	r4, r3
  4012bc:	4019      	ands	r1, r3
  4012be:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4012c0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4012c2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4012c4:	400b      	ands	r3, r1
  4012c6:	4023      	ands	r3, r4
  4012c8:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4012ca:	6042      	str	r2, [r0, #4]
}
  4012cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4012d0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4012d2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4012d4:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4012d6:	400b      	ands	r3, r1
  4012d8:	ea23 0302 	bic.w	r3, r3, r2
  4012dc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4012de:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4012e0:	4313      	orrs	r3, r2
  4012e2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4012e4:	e7ca      	b.n	40127c <pio_set_peripheral+0x28>

004012e6 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4012e6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4012e8:	f012 0f01 	tst.w	r2, #1
  4012ec:	d10d      	bne.n	40130a <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4012ee:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4012f0:	f012 0f0a 	tst.w	r2, #10
  4012f4:	d00b      	beq.n	40130e <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4012f6:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4012f8:	f012 0f02 	tst.w	r2, #2
  4012fc:	d109      	bne.n	401312 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4012fe:	f012 0f08 	tst.w	r2, #8
  401302:	d008      	beq.n	401316 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  401304:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  401308:	e005      	b.n	401316 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  40130a:	6641      	str	r1, [r0, #100]	; 0x64
  40130c:	e7f0      	b.n	4012f0 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  40130e:	6241      	str	r1, [r0, #36]	; 0x24
  401310:	e7f2      	b.n	4012f8 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  401312:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  401316:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401318:	6001      	str	r1, [r0, #0]
  40131a:	4770      	bx	lr

0040131c <pio_set_output>:
{
  40131c:	b410      	push	{r4}
  40131e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401320:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401322:	b94c      	cbnz	r4, 401338 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401324:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401326:	b14b      	cbz	r3, 40133c <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401328:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40132a:	b94a      	cbnz	r2, 401340 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  40132c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40132e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401330:	6001      	str	r1, [r0, #0]
}
  401332:	f85d 4b04 	ldr.w	r4, [sp], #4
  401336:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401338:	6641      	str	r1, [r0, #100]	; 0x64
  40133a:	e7f4      	b.n	401326 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40133c:	6541      	str	r1, [r0, #84]	; 0x54
  40133e:	e7f4      	b.n	40132a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401340:	6301      	str	r1, [r0, #48]	; 0x30
  401342:	e7f4      	b.n	40132e <pio_set_output+0x12>

00401344 <pio_configure>:
{
  401344:	b570      	push	{r4, r5, r6, lr}
  401346:	b082      	sub	sp, #8
  401348:	4605      	mov	r5, r0
  40134a:	4616      	mov	r6, r2
  40134c:	461c      	mov	r4, r3
	switch (ul_type) {
  40134e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401352:	d014      	beq.n	40137e <pio_configure+0x3a>
  401354:	d90a      	bls.n	40136c <pio_configure+0x28>
  401356:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40135a:	d024      	beq.n	4013a6 <pio_configure+0x62>
  40135c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401360:	d021      	beq.n	4013a6 <pio_configure+0x62>
  401362:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401366:	d017      	beq.n	401398 <pio_configure+0x54>
		return 0;
  401368:	2000      	movs	r0, #0
  40136a:	e01a      	b.n	4013a2 <pio_configure+0x5e>
	switch (ul_type) {
  40136c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401370:	d005      	beq.n	40137e <pio_configure+0x3a>
  401372:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401376:	d002      	beq.n	40137e <pio_configure+0x3a>
  401378:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40137c:	d1f4      	bne.n	401368 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40137e:	4632      	mov	r2, r6
  401380:	4628      	mov	r0, r5
  401382:	4b11      	ldr	r3, [pc, #68]	; (4013c8 <pio_configure+0x84>)
  401384:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401386:	f014 0f01 	tst.w	r4, #1
  40138a:	d102      	bne.n	401392 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  40138c:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40138e:	2001      	movs	r0, #1
  401390:	e007      	b.n	4013a2 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  401392:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401394:	2001      	movs	r0, #1
  401396:	e004      	b.n	4013a2 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401398:	461a      	mov	r2, r3
  40139a:	4631      	mov	r1, r6
  40139c:	4b0b      	ldr	r3, [pc, #44]	; (4013cc <pio_configure+0x88>)
  40139e:	4798      	blx	r3
	return 1;
  4013a0:	2001      	movs	r0, #1
}
  4013a2:	b002      	add	sp, #8
  4013a4:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4013a6:	f004 0301 	and.w	r3, r4, #1
  4013aa:	9300      	str	r3, [sp, #0]
  4013ac:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4013b0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4013b4:	bf14      	ite	ne
  4013b6:	2200      	movne	r2, #0
  4013b8:	2201      	moveq	r2, #1
  4013ba:	4631      	mov	r1, r6
  4013bc:	4628      	mov	r0, r5
  4013be:	4c04      	ldr	r4, [pc, #16]	; (4013d0 <pio_configure+0x8c>)
  4013c0:	47a0      	blx	r4
	return 1;
  4013c2:	2001      	movs	r0, #1
		break;
  4013c4:	e7ed      	b.n	4013a2 <pio_configure+0x5e>
  4013c6:	bf00      	nop
  4013c8:	00401255 	.word	0x00401255
  4013cc:	004012e7 	.word	0x004012e7
  4013d0:	0040131d 	.word	0x0040131d

004013d4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4013d4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4013d6:	4770      	bx	lr

004013d8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4013d8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4013da:	4770      	bx	lr

004013dc <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4013dc:	4b05      	ldr	r3, [pc, #20]	; (4013f4 <pio_set_pin_high+0x18>)
  4013de:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  4013e2:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4013e4:	f000 001f 	and.w	r0, r0, #31
  4013e8:	2201      	movs	r2, #1
  4013ea:	fa02 f000 	lsl.w	r0, r2, r0
  4013ee:	6318      	str	r0, [r3, #48]	; 0x30
  4013f0:	4770      	bx	lr
  4013f2:	bf00      	nop
  4013f4:	00200707 	.word	0x00200707

004013f8 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4013f8:	4b05      	ldr	r3, [pc, #20]	; (401410 <pio_set_pin_low+0x18>)
  4013fa:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  4013fe:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  401400:	f000 001f 	and.w	r0, r0, #31
  401404:	2201      	movs	r2, #1
  401406:	fa02 f000 	lsl.w	r0, r2, r0
  40140a:	6358      	str	r0, [r3, #52]	; 0x34
  40140c:	4770      	bx	lr
  40140e:	bf00      	nop
  401410:	00200707 	.word	0x00200707

00401414 <pio_configure_pin>:
{
  401414:	b570      	push	{r4, r5, r6, lr}
  401416:	b082      	sub	sp, #8
  401418:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40141a:	4c46      	ldr	r4, [pc, #280]	; (401534 <pio_configure_pin+0x120>)
  40141c:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  401420:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  401422:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  401426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40142a:	d059      	beq.n	4014e0 <pio_configure_pin+0xcc>
  40142c:	d80a      	bhi.n	401444 <pio_configure_pin+0x30>
  40142e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401432:	d02f      	beq.n	401494 <pio_configure_pin+0x80>
  401434:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401438:	d03f      	beq.n	4014ba <pio_configure_pin+0xa6>
  40143a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40143e:	d016      	beq.n	40146e <pio_configure_pin+0x5a>
		return 0;
  401440:	2000      	movs	r0, #0
  401442:	e012      	b.n	40146a <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  401444:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401448:	d05d      	beq.n	401506 <pio_configure_pin+0xf2>
  40144a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40144e:	d05a      	beq.n	401506 <pio_configure_pin+0xf2>
  401450:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401454:	d1f4      	bne.n	401440 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401456:	f000 011f 	and.w	r1, r0, #31
  40145a:	2601      	movs	r6, #1
  40145c:	462a      	mov	r2, r5
  40145e:	fa06 f101 	lsl.w	r1, r6, r1
  401462:	4620      	mov	r0, r4
  401464:	4b34      	ldr	r3, [pc, #208]	; (401538 <pio_configure_pin+0x124>)
  401466:	4798      	blx	r3
	return 1;
  401468:	4630      	mov	r0, r6
}
  40146a:	b002      	add	sp, #8
  40146c:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40146e:	f000 001f 	and.w	r0, r0, #31
  401472:	2601      	movs	r6, #1
  401474:	4086      	lsls	r6, r0
  401476:	4632      	mov	r2, r6
  401478:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40147c:	4620      	mov	r0, r4
  40147e:	4b2f      	ldr	r3, [pc, #188]	; (40153c <pio_configure_pin+0x128>)
  401480:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401482:	f015 0f01 	tst.w	r5, #1
  401486:	d102      	bne.n	40148e <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  401488:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40148a:	2001      	movs	r0, #1
  40148c:	e7ed      	b.n	40146a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40148e:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401490:	2001      	movs	r0, #1
  401492:	e7ea      	b.n	40146a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401494:	f000 001f 	and.w	r0, r0, #31
  401498:	2601      	movs	r6, #1
  40149a:	4086      	lsls	r6, r0
  40149c:	4632      	mov	r2, r6
  40149e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4014a2:	4620      	mov	r0, r4
  4014a4:	4b25      	ldr	r3, [pc, #148]	; (40153c <pio_configure_pin+0x128>)
  4014a6:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4014a8:	f015 0f01 	tst.w	r5, #1
  4014ac:	d102      	bne.n	4014b4 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  4014ae:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4014b0:	2001      	movs	r0, #1
  4014b2:	e7da      	b.n	40146a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4014b4:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4014b6:	2001      	movs	r0, #1
  4014b8:	e7d7      	b.n	40146a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4014ba:	f000 001f 	and.w	r0, r0, #31
  4014be:	2601      	movs	r6, #1
  4014c0:	4086      	lsls	r6, r0
  4014c2:	4632      	mov	r2, r6
  4014c4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4014c8:	4620      	mov	r0, r4
  4014ca:	4b1c      	ldr	r3, [pc, #112]	; (40153c <pio_configure_pin+0x128>)
  4014cc:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4014ce:	f015 0f01 	tst.w	r5, #1
  4014d2:	d102      	bne.n	4014da <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  4014d4:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4014d6:	2001      	movs	r0, #1
  4014d8:	e7c7      	b.n	40146a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4014da:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4014dc:	2001      	movs	r0, #1
  4014de:	e7c4      	b.n	40146a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4014e0:	f000 001f 	and.w	r0, r0, #31
  4014e4:	2601      	movs	r6, #1
  4014e6:	4086      	lsls	r6, r0
  4014e8:	4632      	mov	r2, r6
  4014ea:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4014ee:	4620      	mov	r0, r4
  4014f0:	4b12      	ldr	r3, [pc, #72]	; (40153c <pio_configure_pin+0x128>)
  4014f2:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4014f4:	f015 0f01 	tst.w	r5, #1
  4014f8:	d102      	bne.n	401500 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  4014fa:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4014fc:	2001      	movs	r0, #1
  4014fe:	e7b4      	b.n	40146a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401500:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401502:	2001      	movs	r0, #1
  401504:	e7b1      	b.n	40146a <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401506:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40150a:	f000 011f 	and.w	r1, r0, #31
  40150e:	2601      	movs	r6, #1
  401510:	ea05 0306 	and.w	r3, r5, r6
  401514:	9300      	str	r3, [sp, #0]
  401516:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40151a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40151e:	bf14      	ite	ne
  401520:	2200      	movne	r2, #0
  401522:	2201      	moveq	r2, #1
  401524:	fa06 f101 	lsl.w	r1, r6, r1
  401528:	4620      	mov	r0, r4
  40152a:	4c05      	ldr	r4, [pc, #20]	; (401540 <pio_configure_pin+0x12c>)
  40152c:	47a0      	blx	r4
	return 1;
  40152e:	4630      	mov	r0, r6
		break;
  401530:	e79b      	b.n	40146a <pio_configure_pin+0x56>
  401532:	bf00      	nop
  401534:	00200707 	.word	0x00200707
  401538:	004012e7 	.word	0x004012e7
  40153c:	00401255 	.word	0x00401255
  401540:	0040131d 	.word	0x0040131d

00401544 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401548:	4604      	mov	r4, r0
  40154a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40154c:	4b0e      	ldr	r3, [pc, #56]	; (401588 <pio_handler_process+0x44>)
  40154e:	4798      	blx	r3
  401550:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401552:	4620      	mov	r0, r4
  401554:	4b0d      	ldr	r3, [pc, #52]	; (40158c <pio_handler_process+0x48>)
  401556:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401558:	4005      	ands	r5, r0
  40155a:	d013      	beq.n	401584 <pio_handler_process+0x40>
  40155c:	4c0c      	ldr	r4, [pc, #48]	; (401590 <pio_handler_process+0x4c>)
  40155e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401562:	e003      	b.n	40156c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401564:	42b4      	cmp	r4, r6
  401566:	d00d      	beq.n	401584 <pio_handler_process+0x40>
  401568:	3410      	adds	r4, #16
		while (status != 0) {
  40156a:	b15d      	cbz	r5, 401584 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40156c:	6820      	ldr	r0, [r4, #0]
  40156e:	4540      	cmp	r0, r8
  401570:	d1f8      	bne.n	401564 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401572:	6861      	ldr	r1, [r4, #4]
  401574:	4229      	tst	r1, r5
  401576:	d0f5      	beq.n	401564 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401578:	68e3      	ldr	r3, [r4, #12]
  40157a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40157c:	6863      	ldr	r3, [r4, #4]
  40157e:	ea25 0503 	bic.w	r5, r5, r3
  401582:	e7ef      	b.n	401564 <pio_handler_process+0x20>
  401584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401588:	004013d5 	.word	0x004013d5
  40158c:	004013d9 	.word	0x004013d9
  401590:	20400d9c 	.word	0x20400d9c

00401594 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401594:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401596:	210a      	movs	r1, #10
  401598:	4801      	ldr	r0, [pc, #4]	; (4015a0 <PIOA_Handler+0xc>)
  40159a:	4b02      	ldr	r3, [pc, #8]	; (4015a4 <PIOA_Handler+0x10>)
  40159c:	4798      	blx	r3
  40159e:	bd08      	pop	{r3, pc}
  4015a0:	400e0e00 	.word	0x400e0e00
  4015a4:	00401545 	.word	0x00401545

004015a8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4015a8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4015aa:	210b      	movs	r1, #11
  4015ac:	4801      	ldr	r0, [pc, #4]	; (4015b4 <PIOB_Handler+0xc>)
  4015ae:	4b02      	ldr	r3, [pc, #8]	; (4015b8 <PIOB_Handler+0x10>)
  4015b0:	4798      	blx	r3
  4015b2:	bd08      	pop	{r3, pc}
  4015b4:	400e1000 	.word	0x400e1000
  4015b8:	00401545 	.word	0x00401545

004015bc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4015bc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4015be:	210c      	movs	r1, #12
  4015c0:	4801      	ldr	r0, [pc, #4]	; (4015c8 <PIOC_Handler+0xc>)
  4015c2:	4b02      	ldr	r3, [pc, #8]	; (4015cc <PIOC_Handler+0x10>)
  4015c4:	4798      	blx	r3
  4015c6:	bd08      	pop	{r3, pc}
  4015c8:	400e1200 	.word	0x400e1200
  4015cc:	00401545 	.word	0x00401545

004015d0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4015d0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4015d2:	2110      	movs	r1, #16
  4015d4:	4801      	ldr	r0, [pc, #4]	; (4015dc <PIOD_Handler+0xc>)
  4015d6:	4b02      	ldr	r3, [pc, #8]	; (4015e0 <PIOD_Handler+0x10>)
  4015d8:	4798      	blx	r3
  4015da:	bd08      	pop	{r3, pc}
  4015dc:	400e1400 	.word	0x400e1400
  4015e0:	00401545 	.word	0x00401545

004015e4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4015e4:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4015e6:	2111      	movs	r1, #17
  4015e8:	4801      	ldr	r0, [pc, #4]	; (4015f0 <PIOE_Handler+0xc>)
  4015ea:	4b02      	ldr	r3, [pc, #8]	; (4015f4 <PIOE_Handler+0x10>)
  4015ec:	4798      	blx	r3
  4015ee:	bd08      	pop	{r3, pc}
  4015f0:	400e1600 	.word	0x400e1600
  4015f4:	00401545 	.word	0x00401545

004015f8 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4015f8:	2803      	cmp	r0, #3
  4015fa:	d011      	beq.n	401620 <pmc_mck_set_division+0x28>
  4015fc:	2804      	cmp	r0, #4
  4015fe:	d012      	beq.n	401626 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401600:	2802      	cmp	r0, #2
  401602:	bf0c      	ite	eq
  401604:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401608:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40160a:	4a08      	ldr	r2, [pc, #32]	; (40162c <pmc_mck_set_division+0x34>)
  40160c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40160e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401612:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401614:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401616:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401618:	f013 0f08 	tst.w	r3, #8
  40161c:	d0fb      	beq.n	401616 <pmc_mck_set_division+0x1e>
}
  40161e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401620:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401624:	e7f1      	b.n	40160a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401626:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40162a:	e7ee      	b.n	40160a <pmc_mck_set_division+0x12>
  40162c:	400e0600 	.word	0x400e0600

00401630 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401630:	4a17      	ldr	r2, [pc, #92]	; (401690 <pmc_switch_mck_to_pllack+0x60>)
  401632:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401638:	4318      	orrs	r0, r3
  40163a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40163c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40163e:	f013 0f08 	tst.w	r3, #8
  401642:	d10a      	bne.n	40165a <pmc_switch_mck_to_pllack+0x2a>
  401644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401648:	4911      	ldr	r1, [pc, #68]	; (401690 <pmc_switch_mck_to_pllack+0x60>)
  40164a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40164c:	f012 0f08 	tst.w	r2, #8
  401650:	d103      	bne.n	40165a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401652:	3b01      	subs	r3, #1
  401654:	d1f9      	bne.n	40164a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401656:	2001      	movs	r0, #1
  401658:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40165a:	4a0d      	ldr	r2, [pc, #52]	; (401690 <pmc_switch_mck_to_pllack+0x60>)
  40165c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40165e:	f023 0303 	bic.w	r3, r3, #3
  401662:	f043 0302 	orr.w	r3, r3, #2
  401666:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401668:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40166a:	f013 0f08 	tst.w	r3, #8
  40166e:	d10a      	bne.n	401686 <pmc_switch_mck_to_pllack+0x56>
  401670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401674:	4906      	ldr	r1, [pc, #24]	; (401690 <pmc_switch_mck_to_pllack+0x60>)
  401676:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401678:	f012 0f08 	tst.w	r2, #8
  40167c:	d105      	bne.n	40168a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40167e:	3b01      	subs	r3, #1
  401680:	d1f9      	bne.n	401676 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401682:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401684:	4770      	bx	lr
	return 0;
  401686:	2000      	movs	r0, #0
  401688:	4770      	bx	lr
  40168a:	2000      	movs	r0, #0
  40168c:	4770      	bx	lr
  40168e:	bf00      	nop
  401690:	400e0600 	.word	0x400e0600

00401694 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401694:	b9a0      	cbnz	r0, 4016c0 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401696:	480e      	ldr	r0, [pc, #56]	; (4016d0 <pmc_switch_mainck_to_xtal+0x3c>)
  401698:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40169a:	0209      	lsls	r1, r1, #8
  40169c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40169e:	4a0d      	ldr	r2, [pc, #52]	; (4016d4 <pmc_switch_mainck_to_xtal+0x40>)
  4016a0:	401a      	ands	r2, r3
  4016a2:	4b0d      	ldr	r3, [pc, #52]	; (4016d8 <pmc_switch_mainck_to_xtal+0x44>)
  4016a4:	4313      	orrs	r3, r2
  4016a6:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4016a8:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4016aa:	4602      	mov	r2, r0
  4016ac:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4016ae:	f013 0f01 	tst.w	r3, #1
  4016b2:	d0fb      	beq.n	4016ac <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4016b4:	4a06      	ldr	r2, [pc, #24]	; (4016d0 <pmc_switch_mainck_to_xtal+0x3c>)
  4016b6:	6a11      	ldr	r1, [r2, #32]
  4016b8:	4b08      	ldr	r3, [pc, #32]	; (4016dc <pmc_switch_mainck_to_xtal+0x48>)
  4016ba:	430b      	orrs	r3, r1
  4016bc:	6213      	str	r3, [r2, #32]
  4016be:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4016c0:	4903      	ldr	r1, [pc, #12]	; (4016d0 <pmc_switch_mainck_to_xtal+0x3c>)
  4016c2:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4016c4:	4a06      	ldr	r2, [pc, #24]	; (4016e0 <pmc_switch_mainck_to_xtal+0x4c>)
  4016c6:	401a      	ands	r2, r3
  4016c8:	4b06      	ldr	r3, [pc, #24]	; (4016e4 <pmc_switch_mainck_to_xtal+0x50>)
  4016ca:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4016cc:	620b      	str	r3, [r1, #32]
  4016ce:	4770      	bx	lr
  4016d0:	400e0600 	.word	0x400e0600
  4016d4:	ffc8fffc 	.word	0xffc8fffc
  4016d8:	00370001 	.word	0x00370001
  4016dc:	01370000 	.word	0x01370000
  4016e0:	fec8fffc 	.word	0xfec8fffc
  4016e4:	01370002 	.word	0x01370002

004016e8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4016e8:	4b02      	ldr	r3, [pc, #8]	; (4016f4 <pmc_osc_is_ready_mainck+0xc>)
  4016ea:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4016ec:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4016f0:	4770      	bx	lr
  4016f2:	bf00      	nop
  4016f4:	400e0600 	.word	0x400e0600

004016f8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4016f8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4016fc:	4b01      	ldr	r3, [pc, #4]	; (401704 <pmc_disable_pllack+0xc>)
  4016fe:	629a      	str	r2, [r3, #40]	; 0x28
  401700:	4770      	bx	lr
  401702:	bf00      	nop
  401704:	400e0600 	.word	0x400e0600

00401708 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401708:	4b02      	ldr	r3, [pc, #8]	; (401714 <pmc_is_locked_pllack+0xc>)
  40170a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40170c:	f000 0002 	and.w	r0, r0, #2
  401710:	4770      	bx	lr
  401712:	bf00      	nop
  401714:	400e0600 	.word	0x400e0600

00401718 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  401718:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40171c:	4b05      	ldr	r3, [pc, #20]	; (401734 <pmc_enable_periph_clk+0x1c>)
  40171e:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  401722:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  401726:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  40172a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40172e:	2000      	movs	r0, #0
  401730:	4770      	bx	lr
  401732:	bf00      	nop
  401734:	400e0600 	.word	0x400e0600

00401738 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  401738:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40173a:	4b07      	ldr	r3, [pc, #28]	; (401758 <spi_enable_clock+0x20>)
  40173c:	4298      	cmp	r0, r3
  40173e:	d003      	beq.n	401748 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  401740:	4b06      	ldr	r3, [pc, #24]	; (40175c <spi_enable_clock+0x24>)
  401742:	4298      	cmp	r0, r3
  401744:	d004      	beq.n	401750 <spi_enable_clock+0x18>
  401746:	bd08      	pop	{r3, pc}
  401748:	2015      	movs	r0, #21
  40174a:	4b05      	ldr	r3, [pc, #20]	; (401760 <spi_enable_clock+0x28>)
  40174c:	4798      	blx	r3
  40174e:	bd08      	pop	{r3, pc}
  401750:	202a      	movs	r0, #42	; 0x2a
  401752:	4b03      	ldr	r3, [pc, #12]	; (401760 <spi_enable_clock+0x28>)
  401754:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  401756:	e7f6      	b.n	401746 <spi_enable_clock+0xe>
  401758:	40008000 	.word	0x40008000
  40175c:	40058000 	.word	0x40058000
  401760:	00401719 	.word	0x00401719

00401764 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  401764:	6843      	ldr	r3, [r0, #4]
  401766:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40176a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  40176c:	6843      	ldr	r3, [r0, #4]
  40176e:	0409      	lsls	r1, r1, #16
  401770:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  401774:	4319      	orrs	r1, r3
  401776:	6041      	str	r1, [r0, #4]
  401778:	4770      	bx	lr

0040177a <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  40177a:	6843      	ldr	r3, [r0, #4]
  40177c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401780:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  401782:	6843      	ldr	r3, [r0, #4]
  401784:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  401788:	6041      	str	r1, [r0, #4]
  40178a:	4770      	bx	lr

0040178c <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  40178c:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  40178e:	f643 2499 	movw	r4, #15001	; 0x3a99
  401792:	6905      	ldr	r5, [r0, #16]
  401794:	f015 0f02 	tst.w	r5, #2
  401798:	d103      	bne.n	4017a2 <spi_write+0x16>
		if (!timeout--) {
  40179a:	3c01      	subs	r4, #1
  40179c:	d1f9      	bne.n	401792 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  40179e:	2001      	movs	r0, #1
  4017a0:	e00c      	b.n	4017bc <spi_write+0x30>
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4017a2:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4017a4:	f014 0f02 	tst.w	r4, #2
  4017a8:	d006      	beq.n	4017b8 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4017aa:	0412      	lsls	r2, r2, #16
  4017ac:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4017b0:	4311      	orrs	r1, r2
		if (uc_last) {
  4017b2:	b10b      	cbz	r3, 4017b8 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4017b4:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4017b8:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4017ba:	2000      	movs	r0, #0
}
  4017bc:	bc30      	pop	{r4, r5}
  4017be:	4770      	bx	lr

004017c0 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4017c0:	b932      	cbnz	r2, 4017d0 <spi_set_clock_polarity+0x10>
  4017c2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4017c6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4017c8:	f023 0301 	bic.w	r3, r3, #1
  4017cc:	6303      	str	r3, [r0, #48]	; 0x30
  4017ce:	4770      	bx	lr
  4017d0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4017d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4017d6:	f043 0301 	orr.w	r3, r3, #1
  4017da:	6303      	str	r3, [r0, #48]	; 0x30
  4017dc:	4770      	bx	lr

004017de <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4017de:	b932      	cbnz	r2, 4017ee <spi_set_clock_phase+0x10>
  4017e0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4017e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4017e6:	f023 0302 	bic.w	r3, r3, #2
  4017ea:	6303      	str	r3, [r0, #48]	; 0x30
  4017ec:	4770      	bx	lr
  4017ee:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4017f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4017f4:	f043 0302 	orr.w	r3, r3, #2
  4017f8:	6303      	str	r3, [r0, #48]	; 0x30
  4017fa:	4770      	bx	lr

004017fc <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  4017fc:	2a04      	cmp	r2, #4
  4017fe:	d003      	beq.n	401808 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  401800:	b16a      	cbz	r2, 40181e <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  401802:	2a08      	cmp	r2, #8
  401804:	d016      	beq.n	401834 <spi_configure_cs_behavior+0x38>
  401806:	4770      	bx	lr
  401808:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40180c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40180e:	f023 0308 	bic.w	r3, r3, #8
  401812:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  401814:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401816:	f043 0304 	orr.w	r3, r3, #4
  40181a:	6303      	str	r3, [r0, #48]	; 0x30
  40181c:	4770      	bx	lr
  40181e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401822:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401824:	f023 0308 	bic.w	r3, r3, #8
  401828:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40182a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40182c:	f023 0304 	bic.w	r3, r3, #4
  401830:	6303      	str	r3, [r0, #48]	; 0x30
  401832:	4770      	bx	lr
  401834:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  401838:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40183a:	f043 0308 	orr.w	r3, r3, #8
  40183e:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  401840:	e7e1      	b.n	401806 <spi_configure_cs_behavior+0xa>

00401842 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  401842:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  401846:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401848:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  40184c:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  40184e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401850:	431a      	orrs	r2, r3
  401852:	630a      	str	r2, [r1, #48]	; 0x30
  401854:	4770      	bx	lr

00401856 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  401856:	1e43      	subs	r3, r0, #1
  401858:	4419      	add	r1, r3
  40185a:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40185e:	1e43      	subs	r3, r0, #1
  401860:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  401862:	bf94      	ite	ls
  401864:	b200      	sxthls	r0, r0
		return -1;
  401866:	f04f 30ff 	movhi.w	r0, #4294967295
}
  40186a:	4770      	bx	lr

0040186c <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  40186c:	b17a      	cbz	r2, 40188e <spi_set_baudrate_div+0x22>
{
  40186e:	b410      	push	{r4}
  401870:	4614      	mov	r4, r2
  401872:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  401876:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401878:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  40187c:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  40187e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  401880:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  401884:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  401886:	2000      	movs	r0, #0
}
  401888:	f85d 4b04 	ldr.w	r4, [sp], #4
  40188c:	4770      	bx	lr
        return -1;
  40188e:	f04f 30ff 	mov.w	r0, #4294967295
  401892:	4770      	bx	lr

00401894 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  401894:	b410      	push	{r4}
  401896:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  40189a:	6b08      	ldr	r0, [r1, #48]	; 0x30
  40189c:	b280      	uxth	r0, r0
  40189e:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4018a0:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  4018a2:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4018a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4018aa:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4018ac:	f85d 4b04 	ldr.w	r4, [sp], #4
  4018b0:	4770      	bx	lr
	...

004018b4 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4018b4:	4b28      	ldr	r3, [pc, #160]	; (401958 <twihs_set_speed+0xa4>)
  4018b6:	4299      	cmp	r1, r3
  4018b8:	d84b      	bhi.n	401952 <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4018ba:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  4018be:	4299      	cmp	r1, r3
  4018c0:	d92d      	bls.n	40191e <twihs_set_speed+0x6a>
{
  4018c2:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4018c4:	4c25      	ldr	r4, [pc, #148]	; (40195c <twihs_set_speed+0xa8>)
  4018c6:	fba4 3402 	umull	r3, r4, r4, r2
  4018ca:	0ba4      	lsrs	r4, r4, #14
  4018cc:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4018ce:	4b24      	ldr	r3, [pc, #144]	; (401960 <twihs_set_speed+0xac>)
  4018d0:	440b      	add	r3, r1
  4018d2:	009b      	lsls	r3, r3, #2
  4018d4:	fbb2 f2f3 	udiv	r2, r2, r3
  4018d8:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4018da:	2cff      	cmp	r4, #255	; 0xff
  4018dc:	d91d      	bls.n	40191a <twihs_set_speed+0x66>
  4018de:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  4018e0:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  4018e2:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4018e4:	2cff      	cmp	r4, #255	; 0xff
  4018e6:	d901      	bls.n	4018ec <twihs_set_speed+0x38>
  4018e8:	2906      	cmp	r1, #6
  4018ea:	d9f9      	bls.n	4018e0 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4018ec:	2aff      	cmp	r2, #255	; 0xff
  4018ee:	d907      	bls.n	401900 <twihs_set_speed+0x4c>
  4018f0:	2906      	cmp	r1, #6
  4018f2:	d805      	bhi.n	401900 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  4018f4:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  4018f6:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4018f8:	2aff      	cmp	r2, #255	; 0xff
  4018fa:	d901      	bls.n	401900 <twihs_set_speed+0x4c>
  4018fc:	2906      	cmp	r1, #6
  4018fe:	d9f9      	bls.n	4018f4 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401900:	0213      	lsls	r3, r2, #8
  401902:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  401904:	0409      	lsls	r1, r1, #16
  401906:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  40190a:	430b      	orrs	r3, r1
  40190c:	b2e4      	uxtb	r4, r4
  40190e:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  401910:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401912:	2000      	movs	r0, #0
}
  401914:	f85d 4b04 	ldr.w	r4, [sp], #4
  401918:	4770      	bx	lr
	uint32_t ckdiv = 0;
  40191a:	2100      	movs	r1, #0
  40191c:	e7e6      	b.n	4018ec <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40191e:	0049      	lsls	r1, r1, #1
  401920:	fbb2 f2f1 	udiv	r2, r2, r1
  401924:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401926:	2aff      	cmp	r2, #255	; 0xff
  401928:	d911      	bls.n	40194e <twihs_set_speed+0x9a>
  40192a:	2300      	movs	r3, #0
			ckdiv++;
  40192c:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  40192e:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401930:	2aff      	cmp	r2, #255	; 0xff
  401932:	d901      	bls.n	401938 <twihs_set_speed+0x84>
  401934:	2b06      	cmp	r3, #6
  401936:	d9f9      	bls.n	40192c <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401938:	0211      	lsls	r1, r2, #8
  40193a:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  40193c:	041b      	lsls	r3, r3, #16
  40193e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401942:	430b      	orrs	r3, r1
  401944:	b2d2      	uxtb	r2, r2
  401946:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  401948:	6102      	str	r2, [r0, #16]
	return PASS;
  40194a:	2000      	movs	r0, #0
  40194c:	4770      	bx	lr
	uint32_t ckdiv = 0;
  40194e:	2300      	movs	r3, #0
  401950:	e7f2      	b.n	401938 <twihs_set_speed+0x84>
		return FAIL;
  401952:	2001      	movs	r0, #1
  401954:	4770      	bx	lr
  401956:	bf00      	nop
  401958:	00061a80 	.word	0x00061a80
  40195c:	057619f1 	.word	0x057619f1
  401960:	3ffd1200 	.word	0x3ffd1200

00401964 <twihs_master_init>:
{
  401964:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  401966:	f04f 32ff 	mov.w	r2, #4294967295
  40196a:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  40196c:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  40196e:	2280      	movs	r2, #128	; 0x80
  401970:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  401972:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401974:	2208      	movs	r2, #8
  401976:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401978:	2220      	movs	r2, #32
  40197a:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  40197c:	2204      	movs	r2, #4
  40197e:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401980:	680a      	ldr	r2, [r1, #0]
  401982:	6849      	ldr	r1, [r1, #4]
  401984:	4b03      	ldr	r3, [pc, #12]	; (401994 <twihs_master_init+0x30>)
  401986:	4798      	blx	r3
}
  401988:	2801      	cmp	r0, #1
  40198a:	bf14      	ite	ne
  40198c:	2000      	movne	r0, #0
  40198e:	2001      	moveq	r0, #1
  401990:	bd08      	pop	{r3, pc}
  401992:	bf00      	nop
  401994:	004018b5 	.word	0x004018b5

00401998 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  401998:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  40199a:	2a00      	cmp	r2, #0
  40199c:	d04c      	beq.n	401a38 <twihs_master_read+0xa0>
{
  40199e:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  4019a0:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  4019a2:	2600      	movs	r6, #0
  4019a4:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4019a6:	684b      	ldr	r3, [r1, #4]
  4019a8:	021b      	lsls	r3, r3, #8
  4019aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  4019ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4019b2:	7c0d      	ldrb	r5, [r1, #16]
  4019b4:	042d      	lsls	r5, r5, #16
  4019b6:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  4019ba:	432b      	orrs	r3, r5
  4019bc:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  4019be:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4019c0:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  4019c2:	b15d      	cbz	r5, 4019dc <twihs_master_read+0x44>
	val = addr[0];
  4019c4:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  4019c6:	2d01      	cmp	r5, #1
  4019c8:	dd02      	ble.n	4019d0 <twihs_master_read+0x38>
		val |= addr[1];
  4019ca:	784e      	ldrb	r6, [r1, #1]
  4019cc:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  4019d0:	2d02      	cmp	r5, #2
  4019d2:	dd04      	ble.n	4019de <twihs_master_read+0x46>
		val |= addr[2];
  4019d4:	7889      	ldrb	r1, [r1, #2]
  4019d6:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  4019da:	e000      	b.n	4019de <twihs_master_read+0x46>
		return 0;
  4019dc:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4019de:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  4019e0:	2301      	movs	r3, #1
  4019e2:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4019e4:	2502      	movs	r5, #2
  4019e6:	e012      	b.n	401a0e <twihs_master_read+0x76>
  4019e8:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  4019ea:	f013 0f02 	tst.w	r3, #2
  4019ee:	d01b      	beq.n	401a28 <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  4019f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4019f2:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4019f4:	6a03      	ldr	r3, [r0, #32]
  4019f6:	f013 0f01 	tst.w	r3, #1
  4019fa:	d0fb      	beq.n	4019f4 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  4019fc:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  4019fe:	2000      	movs	r0, #0
}
  401a00:	bc70      	pop	{r4, r5, r6}
  401a02:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  401a04:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401a06:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  401a0a:	3a01      	subs	r2, #1
  401a0c:	d0f2      	beq.n	4019f4 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401a0e:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401a10:	f413 7f80 	tst.w	r3, #256	; 0x100
  401a14:	d114      	bne.n	401a40 <twihs_master_read+0xa8>
  401a16:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  401a1a:	2a01      	cmp	r2, #1
  401a1c:	d0e4      	beq.n	4019e8 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  401a1e:	f013 0f02 	tst.w	r3, #2
  401a22:	d1ef      	bne.n	401a04 <twihs_master_read+0x6c>
	while (cnt > 0) {
  401a24:	2a00      	cmp	r2, #0
  401a26:	d0e5      	beq.n	4019f4 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401a28:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401a2a:	f413 7f80 	tst.w	r3, #256	; 0x100
  401a2e:	d105      	bne.n	401a3c <twihs_master_read+0xa4>
		if (!timeout--) {
  401a30:	3901      	subs	r1, #1
  401a32:	d1f2      	bne.n	401a1a <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  401a34:	2009      	movs	r0, #9
  401a36:	e7e3      	b.n	401a00 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  401a38:	2001      	movs	r0, #1
  401a3a:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401a3c:	2005      	movs	r0, #5
  401a3e:	e7df      	b.n	401a00 <twihs_master_read+0x68>
  401a40:	2005      	movs	r0, #5
  401a42:	e7dd      	b.n	401a00 <twihs_master_read+0x68>

00401a44 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  401a44:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  401a46:	2b00      	cmp	r3, #0
  401a48:	d043      	beq.n	401ad2 <twihs_master_write+0x8e>
{
  401a4a:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401a4c:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401a4e:	2600      	movs	r6, #0
  401a50:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401a52:	7c0a      	ldrb	r2, [r1, #16]
  401a54:	0412      	lsls	r2, r2, #16
  401a56:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401a5a:	684d      	ldr	r5, [r1, #4]
  401a5c:	022d      	lsls	r5, r5, #8
  401a5e:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401a62:	432a      	orrs	r2, r5
  401a64:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401a66:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401a68:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401a6a:	b15d      	cbz	r5, 401a84 <twihs_master_write+0x40>
	val = addr[0];
  401a6c:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  401a6e:	2d01      	cmp	r5, #1
  401a70:	dd02      	ble.n	401a78 <twihs_master_write+0x34>
		val |= addr[1];
  401a72:	784e      	ldrb	r6, [r1, #1]
  401a74:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  401a78:	2d02      	cmp	r5, #2
  401a7a:	dd04      	ble.n	401a86 <twihs_master_write+0x42>
		val |= addr[2];
  401a7c:	7889      	ldrb	r1, [r1, #2]
  401a7e:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  401a82:	e000      	b.n	401a86 <twihs_master_write+0x42>
		return 0;
  401a84:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401a86:	60c2      	str	r2, [r0, #12]
  401a88:	e004      	b.n	401a94 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  401a8a:	f814 2b01 	ldrb.w	r2, [r4], #1
  401a8e:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  401a90:	3b01      	subs	r3, #1
  401a92:	d00f      	beq.n	401ab4 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  401a94:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401a96:	f412 7f80 	tst.w	r2, #256	; 0x100
  401a9a:	d11e      	bne.n	401ada <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  401a9c:	f012 0f04 	tst.w	r2, #4
  401aa0:	d1f3      	bne.n	401a8a <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  401aa2:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401aa4:	f412 7f80 	tst.w	r2, #256	; 0x100
  401aa8:	d115      	bne.n	401ad6 <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  401aaa:	f012 0f04 	tst.w	r2, #4
  401aae:	d1ec      	bne.n	401a8a <twihs_master_write+0x46>
	while (cnt > 0) {
  401ab0:	2b00      	cmp	r3, #0
  401ab2:	d1f6      	bne.n	401aa2 <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  401ab4:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401ab6:	f413 7f80 	tst.w	r3, #256	; 0x100
  401aba:	d111      	bne.n	401ae0 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  401abc:	f013 0f04 	tst.w	r3, #4
  401ac0:	d0f8      	beq.n	401ab4 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401ac2:	2302      	movs	r3, #2
  401ac4:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401ac6:	6a03      	ldr	r3, [r0, #32]
  401ac8:	f013 0f01 	tst.w	r3, #1
  401acc:	d0fb      	beq.n	401ac6 <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  401ace:	2000      	movs	r0, #0
  401ad0:	e004      	b.n	401adc <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  401ad2:	2001      	movs	r0, #1
  401ad4:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401ad6:	2005      	movs	r0, #5
  401ad8:	e000      	b.n	401adc <twihs_master_write+0x98>
  401ada:	2005      	movs	r0, #5
}
  401adc:	bc70      	pop	{r4, r5, r6}
  401ade:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401ae0:	2005      	movs	r0, #5
  401ae2:	e7fb      	b.n	401adc <twihs_master_write+0x98>

00401ae4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401ae4:	6943      	ldr	r3, [r0, #20]
  401ae6:	f013 0f02 	tst.w	r3, #2
  401aea:	d002      	beq.n	401af2 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401aec:	61c1      	str	r1, [r0, #28]
	return 0;
  401aee:	2000      	movs	r0, #0
  401af0:	4770      	bx	lr
		return 1;
  401af2:	2001      	movs	r0, #1
}
  401af4:	4770      	bx	lr

00401af6 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401af6:	6943      	ldr	r3, [r0, #20]
  401af8:	f013 0f01 	tst.w	r3, #1
  401afc:	d003      	beq.n	401b06 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401afe:	6983      	ldr	r3, [r0, #24]
  401b00:	700b      	strb	r3, [r1, #0]
	return 0;
  401b02:	2000      	movs	r0, #0
  401b04:	4770      	bx	lr
		return 1;
  401b06:	2001      	movs	r0, #1
}
  401b08:	4770      	bx	lr

00401b0a <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401b0a:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401b0c:	010b      	lsls	r3, r1, #4
  401b0e:	4293      	cmp	r3, r2
  401b10:	d914      	bls.n	401b3c <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401b12:	00c9      	lsls	r1, r1, #3
  401b14:	084b      	lsrs	r3, r1, #1
  401b16:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401b1a:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401b1e:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401b20:	1e5c      	subs	r4, r3, #1
  401b22:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401b26:	428c      	cmp	r4, r1
  401b28:	d901      	bls.n	401b2e <usart_set_async_baudrate+0x24>
		return 1;
  401b2a:	2001      	movs	r0, #1
  401b2c:	e017      	b.n	401b5e <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401b2e:	6841      	ldr	r1, [r0, #4]
  401b30:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401b34:	6041      	str	r1, [r0, #4]
  401b36:	e00c      	b.n	401b52 <usart_set_async_baudrate+0x48>
		return 1;
  401b38:	2001      	movs	r0, #1
  401b3a:	e010      	b.n	401b5e <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401b3c:	0859      	lsrs	r1, r3, #1
  401b3e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401b42:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  401b46:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401b48:	1e5c      	subs	r4, r3, #1
  401b4a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401b4e:	428c      	cmp	r4, r1
  401b50:	d8f2      	bhi.n	401b38 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401b52:	0412      	lsls	r2, r2, #16
  401b54:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401b58:	431a      	orrs	r2, r3
  401b5a:	6202      	str	r2, [r0, #32]

	return 0;
  401b5c:	2000      	movs	r0, #0
}
  401b5e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401b62:	4770      	bx	lr

00401b64 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401b64:	4b08      	ldr	r3, [pc, #32]	; (401b88 <usart_reset+0x24>)
  401b66:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401b6a:	2300      	movs	r3, #0
  401b6c:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401b6e:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401b70:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401b72:	2388      	movs	r3, #136	; 0x88
  401b74:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401b76:	2324      	movs	r3, #36	; 0x24
  401b78:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401b7a:	f44f 7380 	mov.w	r3, #256	; 0x100
  401b7e:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401b80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401b84:	6003      	str	r3, [r0, #0]
  401b86:	4770      	bx	lr
  401b88:	55534100 	.word	0x55534100

00401b8c <usart_init_rs232>:
{
  401b8c:	b570      	push	{r4, r5, r6, lr}
  401b8e:	4605      	mov	r5, r0
  401b90:	460c      	mov	r4, r1
  401b92:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401b94:	4b0f      	ldr	r3, [pc, #60]	; (401bd4 <usart_init_rs232+0x48>)
  401b96:	4798      	blx	r3
	ul_reg_val = 0;
  401b98:	2200      	movs	r2, #0
  401b9a:	4b0f      	ldr	r3, [pc, #60]	; (401bd8 <usart_init_rs232+0x4c>)
  401b9c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401b9e:	b1a4      	cbz	r4, 401bca <usart_init_rs232+0x3e>
  401ba0:	4632      	mov	r2, r6
  401ba2:	6821      	ldr	r1, [r4, #0]
  401ba4:	4628      	mov	r0, r5
  401ba6:	4b0d      	ldr	r3, [pc, #52]	; (401bdc <usart_init_rs232+0x50>)
  401ba8:	4798      	blx	r3
  401baa:	4602      	mov	r2, r0
  401bac:	b978      	cbnz	r0, 401bce <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401bae:	6863      	ldr	r3, [r4, #4]
  401bb0:	68a1      	ldr	r1, [r4, #8]
  401bb2:	430b      	orrs	r3, r1
  401bb4:	6921      	ldr	r1, [r4, #16]
  401bb6:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401bb8:	68e1      	ldr	r1, [r4, #12]
  401bba:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401bbc:	4906      	ldr	r1, [pc, #24]	; (401bd8 <usart_init_rs232+0x4c>)
  401bbe:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401bc0:	6869      	ldr	r1, [r5, #4]
  401bc2:	430b      	orrs	r3, r1
  401bc4:	606b      	str	r3, [r5, #4]
}
  401bc6:	4610      	mov	r0, r2
  401bc8:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401bca:	2201      	movs	r2, #1
  401bcc:	e7fb      	b.n	401bc6 <usart_init_rs232+0x3a>
  401bce:	2201      	movs	r2, #1
  401bd0:	e7f9      	b.n	401bc6 <usart_init_rs232+0x3a>
  401bd2:	bf00      	nop
  401bd4:	00401b65 	.word	0x00401b65
  401bd8:	20400e0c 	.word	0x20400e0c
  401bdc:	00401b0b 	.word	0x00401b0b

00401be0 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401be0:	2340      	movs	r3, #64	; 0x40
  401be2:	6003      	str	r3, [r0, #0]
  401be4:	4770      	bx	lr

00401be6 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  401be6:	2310      	movs	r3, #16
  401be8:	6003      	str	r3, [r0, #0]
  401bea:	4770      	bx	lr

00401bec <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401bec:	6943      	ldr	r3, [r0, #20]
  401bee:	f013 0f02 	tst.w	r3, #2
  401bf2:	d004      	beq.n	401bfe <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401bf4:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401bf8:	61c1      	str	r1, [r0, #28]
	return 0;
  401bfa:	2000      	movs	r0, #0
  401bfc:	4770      	bx	lr
		return 1;
  401bfe:	2001      	movs	r0, #1
}
  401c00:	4770      	bx	lr

00401c02 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401c02:	6943      	ldr	r3, [r0, #20]
  401c04:	f013 0f01 	tst.w	r3, #1
  401c08:	d005      	beq.n	401c16 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401c0a:	6983      	ldr	r3, [r0, #24]
  401c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401c10:	600b      	str	r3, [r1, #0]
	return 0;
  401c12:	2000      	movs	r0, #0
  401c14:	4770      	bx	lr
		return 1;
  401c16:	2001      	movs	r0, #1
}
  401c18:	4770      	bx	lr

00401c1a <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401c1a:	e7fe      	b.n	401c1a <Dummy_Handler>

00401c1c <Reset_Handler>:
{
  401c1c:	b500      	push	{lr}
  401c1e:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401c20:	4b25      	ldr	r3, [pc, #148]	; (401cb8 <Reset_Handler+0x9c>)
  401c22:	4a26      	ldr	r2, [pc, #152]	; (401cbc <Reset_Handler+0xa0>)
  401c24:	429a      	cmp	r2, r3
  401c26:	d010      	beq.n	401c4a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401c28:	4b25      	ldr	r3, [pc, #148]	; (401cc0 <Reset_Handler+0xa4>)
  401c2a:	4a23      	ldr	r2, [pc, #140]	; (401cb8 <Reset_Handler+0x9c>)
  401c2c:	429a      	cmp	r2, r3
  401c2e:	d20c      	bcs.n	401c4a <Reset_Handler+0x2e>
  401c30:	3b01      	subs	r3, #1
  401c32:	1a9b      	subs	r3, r3, r2
  401c34:	f023 0303 	bic.w	r3, r3, #3
  401c38:	3304      	adds	r3, #4
  401c3a:	4413      	add	r3, r2
  401c3c:	491f      	ldr	r1, [pc, #124]	; (401cbc <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401c3e:	f851 0b04 	ldr.w	r0, [r1], #4
  401c42:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401c46:	429a      	cmp	r2, r3
  401c48:	d1f9      	bne.n	401c3e <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401c4a:	4b1e      	ldr	r3, [pc, #120]	; (401cc4 <Reset_Handler+0xa8>)
  401c4c:	4a1e      	ldr	r2, [pc, #120]	; (401cc8 <Reset_Handler+0xac>)
  401c4e:	429a      	cmp	r2, r3
  401c50:	d20a      	bcs.n	401c68 <Reset_Handler+0x4c>
  401c52:	3b01      	subs	r3, #1
  401c54:	1a9b      	subs	r3, r3, r2
  401c56:	f023 0303 	bic.w	r3, r3, #3
  401c5a:	3304      	adds	r3, #4
  401c5c:	4413      	add	r3, r2
                *pDest++ = 0;
  401c5e:	2100      	movs	r1, #0
  401c60:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401c64:	4293      	cmp	r3, r2
  401c66:	d1fb      	bne.n	401c60 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401c68:	4a18      	ldr	r2, [pc, #96]	; (401ccc <Reset_Handler+0xb0>)
  401c6a:	4b19      	ldr	r3, [pc, #100]	; (401cd0 <Reset_Handler+0xb4>)
  401c6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401c70:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401c72:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401c76:	fab3 f383 	clz	r3, r3
  401c7a:	095b      	lsrs	r3, r3, #5
  401c7c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401c7e:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401c80:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401c84:	2200      	movs	r2, #0
  401c86:	4b13      	ldr	r3, [pc, #76]	; (401cd4 <Reset_Handler+0xb8>)
  401c88:	701a      	strb	r2, [r3, #0]
	return flags;
  401c8a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401c8c:	4a12      	ldr	r2, [pc, #72]	; (401cd8 <Reset_Handler+0xbc>)
  401c8e:	6813      	ldr	r3, [r2, #0]
  401c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401c94:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401c96:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401c9a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401c9e:	b129      	cbz	r1, 401cac <Reset_Handler+0x90>
		cpu_irq_enable();
  401ca0:	2201      	movs	r2, #1
  401ca2:	4b0c      	ldr	r3, [pc, #48]	; (401cd4 <Reset_Handler+0xb8>)
  401ca4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401ca6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401caa:	b662      	cpsie	i
        __libc_init_array();
  401cac:	4b0b      	ldr	r3, [pc, #44]	; (401cdc <Reset_Handler+0xc0>)
  401cae:	4798      	blx	r3
        main();
  401cb0:	4b0b      	ldr	r3, [pc, #44]	; (401ce0 <Reset_Handler+0xc4>)
  401cb2:	4798      	blx	r3
  401cb4:	e7fe      	b.n	401cb4 <Reset_Handler+0x98>
  401cb6:	bf00      	nop
  401cb8:	20400000 	.word	0x20400000
  401cbc:	00412530 	.word	0x00412530
  401cc0:	204009c0 	.word	0x204009c0
  401cc4:	2040c848 	.word	0x2040c848
  401cc8:	204009c0 	.word	0x204009c0
  401ccc:	e000ed00 	.word	0xe000ed00
  401cd0:	00400000 	.word	0x00400000
  401cd4:	2040000a 	.word	0x2040000a
  401cd8:	e000ed88 	.word	0xe000ed88
  401cdc:	00404135 	.word	0x00404135
  401ce0:	0040402d 	.word	0x0040402d

00401ce4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401ce4:	4b3b      	ldr	r3, [pc, #236]	; (401dd4 <SystemCoreClockUpdate+0xf0>)
  401ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ce8:	f003 0303 	and.w	r3, r3, #3
  401cec:	2b01      	cmp	r3, #1
  401cee:	d01d      	beq.n	401d2c <SystemCoreClockUpdate+0x48>
  401cf0:	b183      	cbz	r3, 401d14 <SystemCoreClockUpdate+0x30>
  401cf2:	2b02      	cmp	r3, #2
  401cf4:	d036      	beq.n	401d64 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401cf6:	4b37      	ldr	r3, [pc, #220]	; (401dd4 <SystemCoreClockUpdate+0xf0>)
  401cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401cfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401cfe:	2b70      	cmp	r3, #112	; 0x70
  401d00:	d05f      	beq.n	401dc2 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401d02:	4b34      	ldr	r3, [pc, #208]	; (401dd4 <SystemCoreClockUpdate+0xf0>)
  401d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401d06:	4934      	ldr	r1, [pc, #208]	; (401dd8 <SystemCoreClockUpdate+0xf4>)
  401d08:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401d0c:	680b      	ldr	r3, [r1, #0]
  401d0e:	40d3      	lsrs	r3, r2
  401d10:	600b      	str	r3, [r1, #0]
  401d12:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401d14:	4b31      	ldr	r3, [pc, #196]	; (401ddc <SystemCoreClockUpdate+0xf8>)
  401d16:	695b      	ldr	r3, [r3, #20]
  401d18:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401d1c:	bf14      	ite	ne
  401d1e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401d22:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401d26:	4b2c      	ldr	r3, [pc, #176]	; (401dd8 <SystemCoreClockUpdate+0xf4>)
  401d28:	601a      	str	r2, [r3, #0]
  401d2a:	e7e4      	b.n	401cf6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401d2c:	4b29      	ldr	r3, [pc, #164]	; (401dd4 <SystemCoreClockUpdate+0xf0>)
  401d2e:	6a1b      	ldr	r3, [r3, #32]
  401d30:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401d34:	d003      	beq.n	401d3e <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401d36:	4a2a      	ldr	r2, [pc, #168]	; (401de0 <SystemCoreClockUpdate+0xfc>)
  401d38:	4b27      	ldr	r3, [pc, #156]	; (401dd8 <SystemCoreClockUpdate+0xf4>)
  401d3a:	601a      	str	r2, [r3, #0]
  401d3c:	e7db      	b.n	401cf6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401d3e:	4a29      	ldr	r2, [pc, #164]	; (401de4 <SystemCoreClockUpdate+0x100>)
  401d40:	4b25      	ldr	r3, [pc, #148]	; (401dd8 <SystemCoreClockUpdate+0xf4>)
  401d42:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401d44:	4b23      	ldr	r3, [pc, #140]	; (401dd4 <SystemCoreClockUpdate+0xf0>)
  401d46:	6a1b      	ldr	r3, [r3, #32]
  401d48:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401d4c:	2b10      	cmp	r3, #16
  401d4e:	d005      	beq.n	401d5c <SystemCoreClockUpdate+0x78>
  401d50:	2b20      	cmp	r3, #32
  401d52:	d1d0      	bne.n	401cf6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401d54:	4a22      	ldr	r2, [pc, #136]	; (401de0 <SystemCoreClockUpdate+0xfc>)
  401d56:	4b20      	ldr	r3, [pc, #128]	; (401dd8 <SystemCoreClockUpdate+0xf4>)
  401d58:	601a      	str	r2, [r3, #0]
          break;
  401d5a:	e7cc      	b.n	401cf6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401d5c:	4a22      	ldr	r2, [pc, #136]	; (401de8 <SystemCoreClockUpdate+0x104>)
  401d5e:	4b1e      	ldr	r3, [pc, #120]	; (401dd8 <SystemCoreClockUpdate+0xf4>)
  401d60:	601a      	str	r2, [r3, #0]
          break;
  401d62:	e7c8      	b.n	401cf6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401d64:	4b1b      	ldr	r3, [pc, #108]	; (401dd4 <SystemCoreClockUpdate+0xf0>)
  401d66:	6a1b      	ldr	r3, [r3, #32]
  401d68:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401d6c:	d016      	beq.n	401d9c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401d6e:	4a1c      	ldr	r2, [pc, #112]	; (401de0 <SystemCoreClockUpdate+0xfc>)
  401d70:	4b19      	ldr	r3, [pc, #100]	; (401dd8 <SystemCoreClockUpdate+0xf4>)
  401d72:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401d74:	4b17      	ldr	r3, [pc, #92]	; (401dd4 <SystemCoreClockUpdate+0xf0>)
  401d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401d78:	f003 0303 	and.w	r3, r3, #3
  401d7c:	2b02      	cmp	r3, #2
  401d7e:	d1ba      	bne.n	401cf6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401d80:	4a14      	ldr	r2, [pc, #80]	; (401dd4 <SystemCoreClockUpdate+0xf0>)
  401d82:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401d84:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401d86:	4814      	ldr	r0, [pc, #80]	; (401dd8 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401d88:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401d8c:	6803      	ldr	r3, [r0, #0]
  401d8e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401d92:	b2d2      	uxtb	r2, r2
  401d94:	fbb3 f3f2 	udiv	r3, r3, r2
  401d98:	6003      	str	r3, [r0, #0]
  401d9a:	e7ac      	b.n	401cf6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401d9c:	4a11      	ldr	r2, [pc, #68]	; (401de4 <SystemCoreClockUpdate+0x100>)
  401d9e:	4b0e      	ldr	r3, [pc, #56]	; (401dd8 <SystemCoreClockUpdate+0xf4>)
  401da0:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401da2:	4b0c      	ldr	r3, [pc, #48]	; (401dd4 <SystemCoreClockUpdate+0xf0>)
  401da4:	6a1b      	ldr	r3, [r3, #32]
  401da6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401daa:	2b10      	cmp	r3, #16
  401dac:	d005      	beq.n	401dba <SystemCoreClockUpdate+0xd6>
  401dae:	2b20      	cmp	r3, #32
  401db0:	d1e0      	bne.n	401d74 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401db2:	4a0b      	ldr	r2, [pc, #44]	; (401de0 <SystemCoreClockUpdate+0xfc>)
  401db4:	4b08      	ldr	r3, [pc, #32]	; (401dd8 <SystemCoreClockUpdate+0xf4>)
  401db6:	601a      	str	r2, [r3, #0]
          break;
  401db8:	e7dc      	b.n	401d74 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401dba:	4a0b      	ldr	r2, [pc, #44]	; (401de8 <SystemCoreClockUpdate+0x104>)
  401dbc:	4b06      	ldr	r3, [pc, #24]	; (401dd8 <SystemCoreClockUpdate+0xf4>)
  401dbe:	601a      	str	r2, [r3, #0]
          break;
  401dc0:	e7d8      	b.n	401d74 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401dc2:	4a05      	ldr	r2, [pc, #20]	; (401dd8 <SystemCoreClockUpdate+0xf4>)
  401dc4:	6813      	ldr	r3, [r2, #0]
  401dc6:	4909      	ldr	r1, [pc, #36]	; (401dec <SystemCoreClockUpdate+0x108>)
  401dc8:	fba1 1303 	umull	r1, r3, r1, r3
  401dcc:	085b      	lsrs	r3, r3, #1
  401dce:	6013      	str	r3, [r2, #0]
  401dd0:	4770      	bx	lr
  401dd2:	bf00      	nop
  401dd4:	400e0600 	.word	0x400e0600
  401dd8:	2040000c 	.word	0x2040000c
  401ddc:	400e1810 	.word	0x400e1810
  401de0:	00b71b00 	.word	0x00b71b00
  401de4:	003d0900 	.word	0x003d0900
  401de8:	007a1200 	.word	0x007a1200
  401dec:	aaaaaaab 	.word	0xaaaaaaab

00401df0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401df0:	4b16      	ldr	r3, [pc, #88]	; (401e4c <system_init_flash+0x5c>)
  401df2:	4298      	cmp	r0, r3
  401df4:	d913      	bls.n	401e1e <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401df6:	4b16      	ldr	r3, [pc, #88]	; (401e50 <system_init_flash+0x60>)
  401df8:	4298      	cmp	r0, r3
  401dfa:	d915      	bls.n	401e28 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401dfc:	4b15      	ldr	r3, [pc, #84]	; (401e54 <system_init_flash+0x64>)
  401dfe:	4298      	cmp	r0, r3
  401e00:	d916      	bls.n	401e30 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401e02:	4b15      	ldr	r3, [pc, #84]	; (401e58 <system_init_flash+0x68>)
  401e04:	4298      	cmp	r0, r3
  401e06:	d917      	bls.n	401e38 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401e08:	4b14      	ldr	r3, [pc, #80]	; (401e5c <system_init_flash+0x6c>)
  401e0a:	4298      	cmp	r0, r3
  401e0c:	d918      	bls.n	401e40 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401e0e:	4b14      	ldr	r3, [pc, #80]	; (401e60 <system_init_flash+0x70>)
  401e10:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401e12:	bf94      	ite	ls
  401e14:	4a13      	ldrls	r2, [pc, #76]	; (401e64 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401e16:	4a14      	ldrhi	r2, [pc, #80]	; (401e68 <system_init_flash+0x78>)
  401e18:	4b14      	ldr	r3, [pc, #80]	; (401e6c <system_init_flash+0x7c>)
  401e1a:	601a      	str	r2, [r3, #0]
  401e1c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401e1e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401e22:	4b12      	ldr	r3, [pc, #72]	; (401e6c <system_init_flash+0x7c>)
  401e24:	601a      	str	r2, [r3, #0]
  401e26:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401e28:	4a11      	ldr	r2, [pc, #68]	; (401e70 <system_init_flash+0x80>)
  401e2a:	4b10      	ldr	r3, [pc, #64]	; (401e6c <system_init_flash+0x7c>)
  401e2c:	601a      	str	r2, [r3, #0]
  401e2e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401e30:	4a10      	ldr	r2, [pc, #64]	; (401e74 <system_init_flash+0x84>)
  401e32:	4b0e      	ldr	r3, [pc, #56]	; (401e6c <system_init_flash+0x7c>)
  401e34:	601a      	str	r2, [r3, #0]
  401e36:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401e38:	4a0f      	ldr	r2, [pc, #60]	; (401e78 <system_init_flash+0x88>)
  401e3a:	4b0c      	ldr	r3, [pc, #48]	; (401e6c <system_init_flash+0x7c>)
  401e3c:	601a      	str	r2, [r3, #0]
  401e3e:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401e40:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401e44:	4b09      	ldr	r3, [pc, #36]	; (401e6c <system_init_flash+0x7c>)
  401e46:	601a      	str	r2, [r3, #0]
  401e48:	4770      	bx	lr
  401e4a:	bf00      	nop
  401e4c:	015ef3bf 	.word	0x015ef3bf
  401e50:	02bde77f 	.word	0x02bde77f
  401e54:	041cdb3f 	.word	0x041cdb3f
  401e58:	057bceff 	.word	0x057bceff
  401e5c:	06dac2bf 	.word	0x06dac2bf
  401e60:	0839b67f 	.word	0x0839b67f
  401e64:	04000500 	.word	0x04000500
  401e68:	04000600 	.word	0x04000600
  401e6c:	400e0c00 	.word	0x400e0c00
  401e70:	04000100 	.word	0x04000100
  401e74:	04000200 	.word	0x04000200
  401e78:	04000300 	.word	0x04000300

00401e7c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401e7c:	4b0a      	ldr	r3, [pc, #40]	; (401ea8 <_sbrk+0x2c>)
  401e7e:	681b      	ldr	r3, [r3, #0]
  401e80:	b153      	cbz	r3, 401e98 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401e82:	4b09      	ldr	r3, [pc, #36]	; (401ea8 <_sbrk+0x2c>)
  401e84:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401e86:	181a      	adds	r2, r3, r0
  401e88:	4908      	ldr	r1, [pc, #32]	; (401eac <_sbrk+0x30>)
  401e8a:	4291      	cmp	r1, r2
  401e8c:	db08      	blt.n	401ea0 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401e8e:	4610      	mov	r0, r2
  401e90:	4a05      	ldr	r2, [pc, #20]	; (401ea8 <_sbrk+0x2c>)
  401e92:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401e94:	4618      	mov	r0, r3
  401e96:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401e98:	4a05      	ldr	r2, [pc, #20]	; (401eb0 <_sbrk+0x34>)
  401e9a:	4b03      	ldr	r3, [pc, #12]	; (401ea8 <_sbrk+0x2c>)
  401e9c:	601a      	str	r2, [r3, #0]
  401e9e:	e7f0      	b.n	401e82 <_sbrk+0x6>
		return (caddr_t) -1;	
  401ea0:	f04f 30ff 	mov.w	r0, #4294967295
}
  401ea4:	4770      	bx	lr
  401ea6:	bf00      	nop
  401ea8:	20400e10 	.word	0x20400e10
  401eac:	2045fffc 	.word	0x2045fffc
  401eb0:	2040ea48 	.word	0x2040ea48

00401eb4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401eb4:	f04f 30ff 	mov.w	r0, #4294967295
  401eb8:	4770      	bx	lr

00401eba <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401eba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401ebe:	604b      	str	r3, [r1, #4]

	return 0;
}
  401ec0:	2000      	movs	r0, #0
  401ec2:	4770      	bx	lr

00401ec4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401ec4:	2001      	movs	r0, #1
  401ec6:	4770      	bx	lr

00401ec8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401ec8:	2000      	movs	r0, #0
  401eca:	4770      	bx	lr

00401ecc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401ecc:	f100 0308 	add.w	r3, r0, #8
  401ed0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  401ed2:	f04f 32ff 	mov.w	r2, #4294967295
  401ed6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401ed8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401eda:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401edc:	2300      	movs	r3, #0
  401ede:	6003      	str	r3, [r0, #0]
  401ee0:	4770      	bx	lr

00401ee2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  401ee2:	2300      	movs	r3, #0
  401ee4:	6103      	str	r3, [r0, #16]
  401ee6:	4770      	bx	lr

00401ee8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  401ee8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  401eea:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401eec:	689a      	ldr	r2, [r3, #8]
  401eee:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  401ef0:	689a      	ldr	r2, [r3, #8]
  401ef2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401ef4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401ef6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401ef8:	6803      	ldr	r3, [r0, #0]
  401efa:	3301      	adds	r3, #1
  401efc:	6003      	str	r3, [r0, #0]
  401efe:	4770      	bx	lr

00401f00 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  401f00:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  401f02:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  401f04:	f1b5 3fff 	cmp.w	r5, #4294967295
  401f08:	d002      	beq.n	401f10 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401f0a:	f100 0208 	add.w	r2, r0, #8
  401f0e:	e002      	b.n	401f16 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  401f10:	6902      	ldr	r2, [r0, #16]
  401f12:	e004      	b.n	401f1e <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401f14:	461a      	mov	r2, r3
  401f16:	6853      	ldr	r3, [r2, #4]
  401f18:	681c      	ldr	r4, [r3, #0]
  401f1a:	42a5      	cmp	r5, r4
  401f1c:	d2fa      	bcs.n	401f14 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  401f1e:	6853      	ldr	r3, [r2, #4]
  401f20:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  401f22:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  401f24:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  401f26:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401f28:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401f2a:	6803      	ldr	r3, [r0, #0]
  401f2c:	3301      	adds	r3, #1
  401f2e:	6003      	str	r3, [r0, #0]
}
  401f30:	bc30      	pop	{r4, r5}
  401f32:	4770      	bx	lr

00401f34 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  401f34:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  401f36:	6842      	ldr	r2, [r0, #4]
  401f38:	6881      	ldr	r1, [r0, #8]
  401f3a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  401f3c:	6882      	ldr	r2, [r0, #8]
  401f3e:	6841      	ldr	r1, [r0, #4]
  401f40:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  401f42:	685a      	ldr	r2, [r3, #4]
  401f44:	4290      	cmp	r0, r2
  401f46:	d005      	beq.n	401f54 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  401f48:	2200      	movs	r2, #0
  401f4a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  401f4c:	6818      	ldr	r0, [r3, #0]
  401f4e:	3801      	subs	r0, #1
  401f50:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  401f52:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  401f54:	6882      	ldr	r2, [r0, #8]
  401f56:	605a      	str	r2, [r3, #4]
  401f58:	e7f6      	b.n	401f48 <uxListRemove+0x14>
	...

00401f5c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  401f5c:	4b0d      	ldr	r3, [pc, #52]	; (401f94 <prvTaskExitError+0x38>)
  401f5e:	681b      	ldr	r3, [r3, #0]
  401f60:	f1b3 3fff 	cmp.w	r3, #4294967295
  401f64:	d00a      	beq.n	401f7c <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401f66:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f6a:	b672      	cpsid	i
  401f6c:	f383 8811 	msr	BASEPRI, r3
  401f70:	f3bf 8f6f 	isb	sy
  401f74:	f3bf 8f4f 	dsb	sy
  401f78:	b662      	cpsie	i
  401f7a:	e7fe      	b.n	401f7a <prvTaskExitError+0x1e>
  401f7c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f80:	b672      	cpsid	i
  401f82:	f383 8811 	msr	BASEPRI, r3
  401f86:	f3bf 8f6f 	isb	sy
  401f8a:	f3bf 8f4f 	dsb	sy
  401f8e:	b662      	cpsie	i
  401f90:	e7fe      	b.n	401f90 <prvTaskExitError+0x34>
  401f92:	bf00      	nop
  401f94:	20400010 	.word	0x20400010

00401f98 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  401f98:	4806      	ldr	r0, [pc, #24]	; (401fb4 <prvPortStartFirstTask+0x1c>)
  401f9a:	6800      	ldr	r0, [r0, #0]
  401f9c:	6800      	ldr	r0, [r0, #0]
  401f9e:	f380 8808 	msr	MSP, r0
  401fa2:	b662      	cpsie	i
  401fa4:	b661      	cpsie	f
  401fa6:	f3bf 8f4f 	dsb	sy
  401faa:	f3bf 8f6f 	isb	sy
  401fae:	df00      	svc	0
  401fb0:	bf00      	nop
  401fb2:	0000      	.short	0x0000
  401fb4:	e000ed08 	.word	0xe000ed08

00401fb8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401fb8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401fc8 <vPortEnableVFP+0x10>
  401fbc:	6801      	ldr	r1, [r0, #0]
  401fbe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401fc2:	6001      	str	r1, [r0, #0]
  401fc4:	4770      	bx	lr
  401fc6:	0000      	.short	0x0000
  401fc8:	e000ed88 	.word	0xe000ed88

00401fcc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401fcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401fd0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401fd4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401fd8:	4b05      	ldr	r3, [pc, #20]	; (401ff0 <pxPortInitialiseStack+0x24>)
  401fda:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  401fde:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  401fe2:	f06f 0302 	mvn.w	r3, #2
  401fe6:	f840 3c24 	str.w	r3, [r0, #-36]
}
  401fea:	3844      	subs	r0, #68	; 0x44
  401fec:	4770      	bx	lr
  401fee:	bf00      	nop
  401ff0:	00401f5d 	.word	0x00401f5d

00401ff4 <SVC_Handler>:
	__asm volatile (
  401ff4:	4b06      	ldr	r3, [pc, #24]	; (402010 <pxCurrentTCBConst2>)
  401ff6:	6819      	ldr	r1, [r3, #0]
  401ff8:	6808      	ldr	r0, [r1, #0]
  401ffa:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ffe:	f380 8809 	msr	PSP, r0
  402002:	f3bf 8f6f 	isb	sy
  402006:	f04f 0000 	mov.w	r0, #0
  40200a:	f380 8811 	msr	BASEPRI, r0
  40200e:	4770      	bx	lr

00402010 <pxCurrentTCBConst2>:
  402010:	2040c624 	.word	0x2040c624
  402014:	4770      	bx	lr
  402016:	bf00      	nop

00402018 <vPortEnterCritical>:
  402018:	f04f 0380 	mov.w	r3, #128	; 0x80
  40201c:	b672      	cpsid	i
  40201e:	f383 8811 	msr	BASEPRI, r3
  402022:	f3bf 8f6f 	isb	sy
  402026:	f3bf 8f4f 	dsb	sy
  40202a:	b662      	cpsie	i
	uxCriticalNesting++;
  40202c:	4a0b      	ldr	r2, [pc, #44]	; (40205c <vPortEnterCritical+0x44>)
  40202e:	6813      	ldr	r3, [r2, #0]
  402030:	3301      	adds	r3, #1
  402032:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  402034:	2b01      	cmp	r3, #1
  402036:	d10f      	bne.n	402058 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  402038:	4b09      	ldr	r3, [pc, #36]	; (402060 <vPortEnterCritical+0x48>)
  40203a:	681b      	ldr	r3, [r3, #0]
  40203c:	f013 0fff 	tst.w	r3, #255	; 0xff
  402040:	d00a      	beq.n	402058 <vPortEnterCritical+0x40>
  402042:	f04f 0380 	mov.w	r3, #128	; 0x80
  402046:	b672      	cpsid	i
  402048:	f383 8811 	msr	BASEPRI, r3
  40204c:	f3bf 8f6f 	isb	sy
  402050:	f3bf 8f4f 	dsb	sy
  402054:	b662      	cpsie	i
  402056:	e7fe      	b.n	402056 <vPortEnterCritical+0x3e>
  402058:	4770      	bx	lr
  40205a:	bf00      	nop
  40205c:	20400010 	.word	0x20400010
  402060:	e000ed04 	.word	0xe000ed04

00402064 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  402064:	4b0a      	ldr	r3, [pc, #40]	; (402090 <vPortExitCritical+0x2c>)
  402066:	681b      	ldr	r3, [r3, #0]
  402068:	b953      	cbnz	r3, 402080 <vPortExitCritical+0x1c>
  40206a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40206e:	b672      	cpsid	i
  402070:	f383 8811 	msr	BASEPRI, r3
  402074:	f3bf 8f6f 	isb	sy
  402078:	f3bf 8f4f 	dsb	sy
  40207c:	b662      	cpsie	i
  40207e:	e7fe      	b.n	40207e <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  402080:	3b01      	subs	r3, #1
  402082:	4a03      	ldr	r2, [pc, #12]	; (402090 <vPortExitCritical+0x2c>)
  402084:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  402086:	b90b      	cbnz	r3, 40208c <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  402088:	f383 8811 	msr	BASEPRI, r3
  40208c:	4770      	bx	lr
  40208e:	bf00      	nop
  402090:	20400010 	.word	0x20400010

00402094 <PendSV_Handler>:
	__asm volatile
  402094:	f3ef 8009 	mrs	r0, PSP
  402098:	f3bf 8f6f 	isb	sy
  40209c:	4b15      	ldr	r3, [pc, #84]	; (4020f4 <pxCurrentTCBConst>)
  40209e:	681a      	ldr	r2, [r3, #0]
  4020a0:	f01e 0f10 	tst.w	lr, #16
  4020a4:	bf08      	it	eq
  4020a6:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4020aa:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4020ae:	6010      	str	r0, [r2, #0]
  4020b0:	f84d 3d04 	str.w	r3, [sp, #-4]!
  4020b4:	f04f 0080 	mov.w	r0, #128	; 0x80
  4020b8:	b672      	cpsid	i
  4020ba:	f380 8811 	msr	BASEPRI, r0
  4020be:	f3bf 8f4f 	dsb	sy
  4020c2:	f3bf 8f6f 	isb	sy
  4020c6:	b662      	cpsie	i
  4020c8:	f001 f8aa 	bl	403220 <vTaskSwitchContext>
  4020cc:	f04f 0000 	mov.w	r0, #0
  4020d0:	f380 8811 	msr	BASEPRI, r0
  4020d4:	bc08      	pop	{r3}
  4020d6:	6819      	ldr	r1, [r3, #0]
  4020d8:	6808      	ldr	r0, [r1, #0]
  4020da:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4020de:	f01e 0f10 	tst.w	lr, #16
  4020e2:	bf08      	it	eq
  4020e4:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4020e8:	f380 8809 	msr	PSP, r0
  4020ec:	f3bf 8f6f 	isb	sy
  4020f0:	4770      	bx	lr
  4020f2:	bf00      	nop

004020f4 <pxCurrentTCBConst>:
  4020f4:	2040c624 	.word	0x2040c624
  4020f8:	4770      	bx	lr
  4020fa:	bf00      	nop

004020fc <SysTick_Handler>:
{
  4020fc:	b508      	push	{r3, lr}
	__asm volatile
  4020fe:	f3ef 8311 	mrs	r3, BASEPRI
  402102:	f04f 0280 	mov.w	r2, #128	; 0x80
  402106:	b672      	cpsid	i
  402108:	f382 8811 	msr	BASEPRI, r2
  40210c:	f3bf 8f6f 	isb	sy
  402110:	f3bf 8f4f 	dsb	sy
  402114:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  402116:	4b05      	ldr	r3, [pc, #20]	; (40212c <SysTick_Handler+0x30>)
  402118:	4798      	blx	r3
  40211a:	b118      	cbz	r0, 402124 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40211c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402120:	4b03      	ldr	r3, [pc, #12]	; (402130 <SysTick_Handler+0x34>)
  402122:	601a      	str	r2, [r3, #0]
	__asm volatile
  402124:	2300      	movs	r3, #0
  402126:	f383 8811 	msr	BASEPRI, r3
  40212a:	bd08      	pop	{r3, pc}
  40212c:	00402e8d 	.word	0x00402e8d
  402130:	e000ed04 	.word	0xe000ed04

00402134 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  402134:	4a03      	ldr	r2, [pc, #12]	; (402144 <vPortSetupTimerInterrupt+0x10>)
  402136:	4b04      	ldr	r3, [pc, #16]	; (402148 <vPortSetupTimerInterrupt+0x14>)
  402138:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40213a:	2207      	movs	r2, #7
  40213c:	3b04      	subs	r3, #4
  40213e:	601a      	str	r2, [r3, #0]
  402140:	4770      	bx	lr
  402142:	bf00      	nop
  402144:	0003a97f 	.word	0x0003a97f
  402148:	e000e014 	.word	0xe000e014

0040214c <xPortStartScheduler>:
{
  40214c:	b500      	push	{lr}
  40214e:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  402150:	4b25      	ldr	r3, [pc, #148]	; (4021e8 <xPortStartScheduler+0x9c>)
  402152:	781a      	ldrb	r2, [r3, #0]
  402154:	b2d2      	uxtb	r2, r2
  402156:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  402158:	22ff      	movs	r2, #255	; 0xff
  40215a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  40215c:	781b      	ldrb	r3, [r3, #0]
  40215e:	b2db      	uxtb	r3, r3
  402160:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  402164:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402168:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40216c:	4a1f      	ldr	r2, [pc, #124]	; (4021ec <xPortStartScheduler+0xa0>)
  40216e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  402170:	2207      	movs	r2, #7
  402172:	4b1f      	ldr	r3, [pc, #124]	; (4021f0 <xPortStartScheduler+0xa4>)
  402174:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  402176:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40217a:	f013 0f80 	tst.w	r3, #128	; 0x80
  40217e:	d010      	beq.n	4021a2 <xPortStartScheduler+0x56>
  402180:	2206      	movs	r2, #6
  402182:	e000      	b.n	402186 <xPortStartScheduler+0x3a>
  402184:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  402186:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40218a:	005b      	lsls	r3, r3, #1
  40218c:	b2db      	uxtb	r3, r3
  40218e:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  402192:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402196:	1e51      	subs	r1, r2, #1
  402198:	f013 0f80 	tst.w	r3, #128	; 0x80
  40219c:	d1f2      	bne.n	402184 <xPortStartScheduler+0x38>
  40219e:	4b14      	ldr	r3, [pc, #80]	; (4021f0 <xPortStartScheduler+0xa4>)
  4021a0:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4021a2:	4a13      	ldr	r2, [pc, #76]	; (4021f0 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  4021a4:	6813      	ldr	r3, [r2, #0]
  4021a6:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4021a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4021ac:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4021ae:	9b01      	ldr	r3, [sp, #4]
  4021b0:	b2db      	uxtb	r3, r3
  4021b2:	4a0d      	ldr	r2, [pc, #52]	; (4021e8 <xPortStartScheduler+0x9c>)
  4021b4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4021b6:	4b0f      	ldr	r3, [pc, #60]	; (4021f4 <xPortStartScheduler+0xa8>)
  4021b8:	681a      	ldr	r2, [r3, #0]
  4021ba:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4021be:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4021c0:	681a      	ldr	r2, [r3, #0]
  4021c2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4021c6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4021c8:	4b0b      	ldr	r3, [pc, #44]	; (4021f8 <xPortStartScheduler+0xac>)
  4021ca:	4798      	blx	r3
	uxCriticalNesting = 0;
  4021cc:	2200      	movs	r2, #0
  4021ce:	4b0b      	ldr	r3, [pc, #44]	; (4021fc <xPortStartScheduler+0xb0>)
  4021d0:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  4021d2:	4b0b      	ldr	r3, [pc, #44]	; (402200 <xPortStartScheduler+0xb4>)
  4021d4:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4021d6:	4a0b      	ldr	r2, [pc, #44]	; (402204 <xPortStartScheduler+0xb8>)
  4021d8:	6813      	ldr	r3, [r2, #0]
  4021da:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4021de:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4021e0:	4b09      	ldr	r3, [pc, #36]	; (402208 <xPortStartScheduler+0xbc>)
  4021e2:	4798      	blx	r3
	prvTaskExitError();
  4021e4:	4b09      	ldr	r3, [pc, #36]	; (40220c <xPortStartScheduler+0xc0>)
  4021e6:	4798      	blx	r3
  4021e8:	e000e400 	.word	0xe000e400
  4021ec:	20400e14 	.word	0x20400e14
  4021f0:	20400e18 	.word	0x20400e18
  4021f4:	e000ed20 	.word	0xe000ed20
  4021f8:	00402135 	.word	0x00402135
  4021fc:	20400010 	.word	0x20400010
  402200:	00401fb9 	.word	0x00401fb9
  402204:	e000ef34 	.word	0xe000ef34
  402208:	00401f99 	.word	0x00401f99
  40220c:	00401f5d 	.word	0x00401f5d

00402210 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  402210:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  402214:	2b0f      	cmp	r3, #15
  402216:	d911      	bls.n	40223c <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  402218:	4a12      	ldr	r2, [pc, #72]	; (402264 <vPortValidateInterruptPriority+0x54>)
  40221a:	5c9b      	ldrb	r3, [r3, r2]
  40221c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40221e:	4a12      	ldr	r2, [pc, #72]	; (402268 <vPortValidateInterruptPriority+0x58>)
  402220:	7812      	ldrb	r2, [r2, #0]
  402222:	429a      	cmp	r2, r3
  402224:	d90a      	bls.n	40223c <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  402226:	f04f 0380 	mov.w	r3, #128	; 0x80
  40222a:	b672      	cpsid	i
  40222c:	f383 8811 	msr	BASEPRI, r3
  402230:	f3bf 8f6f 	isb	sy
  402234:	f3bf 8f4f 	dsb	sy
  402238:	b662      	cpsie	i
  40223a:	e7fe      	b.n	40223a <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  40223c:	4b0b      	ldr	r3, [pc, #44]	; (40226c <vPortValidateInterruptPriority+0x5c>)
  40223e:	681b      	ldr	r3, [r3, #0]
  402240:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  402244:	4a0a      	ldr	r2, [pc, #40]	; (402270 <vPortValidateInterruptPriority+0x60>)
  402246:	6812      	ldr	r2, [r2, #0]
  402248:	4293      	cmp	r3, r2
  40224a:	d90a      	bls.n	402262 <vPortValidateInterruptPriority+0x52>
  40224c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402250:	b672      	cpsid	i
  402252:	f383 8811 	msr	BASEPRI, r3
  402256:	f3bf 8f6f 	isb	sy
  40225a:	f3bf 8f4f 	dsb	sy
  40225e:	b662      	cpsie	i
  402260:	e7fe      	b.n	402260 <vPortValidateInterruptPriority+0x50>
  402262:	4770      	bx	lr
  402264:	e000e3f0 	.word	0xe000e3f0
  402268:	20400e14 	.word	0x20400e14
  40226c:	e000ed0c 	.word	0xe000ed0c
  402270:	20400e18 	.word	0x20400e18

00402274 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  402274:	b538      	push	{r3, r4, r5, lr}
  402276:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  402278:	f010 0f07 	tst.w	r0, #7
  40227c:	d002      	beq.n	402284 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40227e:	f020 0407 	bic.w	r4, r0, #7
  402282:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  402284:	4b11      	ldr	r3, [pc, #68]	; (4022cc <pvPortMalloc+0x58>)
  402286:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  402288:	4b11      	ldr	r3, [pc, #68]	; (4022d0 <pvPortMalloc+0x5c>)
  40228a:	681b      	ldr	r3, [r3, #0]
  40228c:	b193      	cbz	r3, 4022b4 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  40228e:	4b11      	ldr	r3, [pc, #68]	; (4022d4 <pvPortMalloc+0x60>)
  402290:	681b      	ldr	r3, [r3, #0]
  402292:	441c      	add	r4, r3
  402294:	42a3      	cmp	r3, r4
  402296:	d213      	bcs.n	4022c0 <pvPortMalloc+0x4c>
  402298:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  40229c:	4294      	cmp	r4, r2
  40229e:	d80f      	bhi.n	4022c0 <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  4022a0:	4a0b      	ldr	r2, [pc, #44]	; (4022d0 <pvPortMalloc+0x5c>)
  4022a2:	6815      	ldr	r5, [r2, #0]
  4022a4:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  4022a6:	4b0b      	ldr	r3, [pc, #44]	; (4022d4 <pvPortMalloc+0x60>)
  4022a8:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4022aa:	4b0b      	ldr	r3, [pc, #44]	; (4022d8 <pvPortMalloc+0x64>)
  4022ac:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4022ae:	b14d      	cbz	r5, 4022c4 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  4022b0:	4628      	mov	r0, r5
  4022b2:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  4022b4:	4b09      	ldr	r3, [pc, #36]	; (4022dc <pvPortMalloc+0x68>)
  4022b6:	f023 0307 	bic.w	r3, r3, #7
  4022ba:	4a05      	ldr	r2, [pc, #20]	; (4022d0 <pvPortMalloc+0x5c>)
  4022bc:	6013      	str	r3, [r2, #0]
  4022be:	e7e6      	b.n	40228e <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  4022c0:	4b05      	ldr	r3, [pc, #20]	; (4022d8 <pvPortMalloc+0x64>)
  4022c2:	4798      	blx	r3
			vApplicationMallocFailedHook();
  4022c4:	4b06      	ldr	r3, [pc, #24]	; (4022e0 <pvPortMalloc+0x6c>)
  4022c6:	4798      	blx	r3
  4022c8:	2500      	movs	r5, #0
	return pvReturn;
  4022ca:	e7f1      	b.n	4022b0 <pvPortMalloc+0x3c>
  4022cc:	00402e71 	.word	0x00402e71
  4022d0:	20400e1c 	.word	0x20400e1c
  4022d4:	2040c620 	.word	0x2040c620
  4022d8:	00402fd9 	.word	0x00402fd9
  4022dc:	20400e28 	.word	0x20400e28
  4022e0:	00403d23 	.word	0x00403d23

004022e4 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  4022e4:	b150      	cbz	r0, 4022fc <vPortFree+0x18>
  4022e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022ea:	b672      	cpsid	i
  4022ec:	f383 8811 	msr	BASEPRI, r3
  4022f0:	f3bf 8f6f 	isb	sy
  4022f4:	f3bf 8f4f 	dsb	sy
  4022f8:	b662      	cpsie	i
  4022fa:	e7fe      	b.n	4022fa <vPortFree+0x16>
  4022fc:	4770      	bx	lr
	...

00402300 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  402300:	b538      	push	{r3, r4, r5, lr}
  402302:	4604      	mov	r4, r0
  402304:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  402306:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402308:	b95a      	cbnz	r2, 402322 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40230a:	6803      	ldr	r3, [r0, #0]
  40230c:	2b00      	cmp	r3, #0
  40230e:	d12e      	bne.n	40236e <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  402310:	6840      	ldr	r0, [r0, #4]
  402312:	4b1b      	ldr	r3, [pc, #108]	; (402380 <prvCopyDataToQueue+0x80>)
  402314:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  402316:	2300      	movs	r3, #0
  402318:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  40231a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40231c:	3301      	adds	r3, #1
  40231e:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  402320:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  402322:	b96d      	cbnz	r5, 402340 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  402324:	6880      	ldr	r0, [r0, #8]
  402326:	4b17      	ldr	r3, [pc, #92]	; (402384 <prvCopyDataToQueue+0x84>)
  402328:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40232a:	68a3      	ldr	r3, [r4, #8]
  40232c:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40232e:	4413      	add	r3, r2
  402330:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  402332:	6862      	ldr	r2, [r4, #4]
  402334:	4293      	cmp	r3, r2
  402336:	d31c      	bcc.n	402372 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  402338:	6823      	ldr	r3, [r4, #0]
  40233a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  40233c:	2000      	movs	r0, #0
  40233e:	e7ec      	b.n	40231a <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402340:	68c0      	ldr	r0, [r0, #12]
  402342:	4b10      	ldr	r3, [pc, #64]	; (402384 <prvCopyDataToQueue+0x84>)
  402344:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  402346:	6c23      	ldr	r3, [r4, #64]	; 0x40
  402348:	425b      	negs	r3, r3
  40234a:	68e2      	ldr	r2, [r4, #12]
  40234c:	441a      	add	r2, r3
  40234e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  402350:	6821      	ldr	r1, [r4, #0]
  402352:	428a      	cmp	r2, r1
  402354:	d202      	bcs.n	40235c <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  402356:	6862      	ldr	r2, [r4, #4]
  402358:	4413      	add	r3, r2
  40235a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  40235c:	2d02      	cmp	r5, #2
  40235e:	d10a      	bne.n	402376 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  402360:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402362:	b153      	cbz	r3, 40237a <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  402364:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402366:	3b01      	subs	r3, #1
  402368:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  40236a:	2000      	movs	r0, #0
  40236c:	e7d5      	b.n	40231a <prvCopyDataToQueue+0x1a>
  40236e:	2000      	movs	r0, #0
  402370:	e7d3      	b.n	40231a <prvCopyDataToQueue+0x1a>
  402372:	2000      	movs	r0, #0
  402374:	e7d1      	b.n	40231a <prvCopyDataToQueue+0x1a>
  402376:	2000      	movs	r0, #0
  402378:	e7cf      	b.n	40231a <prvCopyDataToQueue+0x1a>
  40237a:	2000      	movs	r0, #0
  40237c:	e7cd      	b.n	40231a <prvCopyDataToQueue+0x1a>
  40237e:	bf00      	nop
  402380:	00403621 	.word	0x00403621
  402384:	0040471d 	.word	0x0040471d

00402388 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  402388:	b530      	push	{r4, r5, lr}
  40238a:	b083      	sub	sp, #12
  40238c:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  40238e:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  402390:	b174      	cbz	r4, 4023b0 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  402392:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402394:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402396:	429a      	cmp	r2, r3
  402398:	d315      	bcc.n	4023c6 <prvNotifyQueueSetContainer+0x3e>
  40239a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40239e:	b672      	cpsid	i
  4023a0:	f383 8811 	msr	BASEPRI, r3
  4023a4:	f3bf 8f6f 	isb	sy
  4023a8:	f3bf 8f4f 	dsb	sy
  4023ac:	b662      	cpsie	i
  4023ae:	e7fe      	b.n	4023ae <prvNotifyQueueSetContainer+0x26>
  4023b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023b4:	b672      	cpsid	i
  4023b6:	f383 8811 	msr	BASEPRI, r3
  4023ba:	f3bf 8f6f 	isb	sy
  4023be:	f3bf 8f4f 	dsb	sy
  4023c2:	b662      	cpsie	i
  4023c4:	e7fe      	b.n	4023c4 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  4023c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4023c8:	4293      	cmp	r3, r2
  4023ca:	d803      	bhi.n	4023d4 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  4023cc:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4023ce:	4628      	mov	r0, r5
  4023d0:	b003      	add	sp, #12
  4023d2:	bd30      	pop	{r4, r5, pc}
  4023d4:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  4023d6:	a901      	add	r1, sp, #4
  4023d8:	4620      	mov	r0, r4
  4023da:	4b0b      	ldr	r3, [pc, #44]	; (402408 <prvNotifyQueueSetContainer+0x80>)
  4023dc:	4798      	blx	r3
  4023de:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  4023e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4023e2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4023e6:	d10a      	bne.n	4023fe <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  4023e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4023ea:	2b00      	cmp	r3, #0
  4023ec:	d0ef      	beq.n	4023ce <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  4023ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4023f2:	4b06      	ldr	r3, [pc, #24]	; (40240c <prvNotifyQueueSetContainer+0x84>)
  4023f4:	4798      	blx	r3
  4023f6:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  4023f8:	bf18      	it	ne
  4023fa:	2501      	movne	r5, #1
  4023fc:	e7e7      	b.n	4023ce <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  4023fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402400:	3301      	adds	r3, #1
  402402:	64a3      	str	r3, [r4, #72]	; 0x48
  402404:	e7e3      	b.n	4023ce <prvNotifyQueueSetContainer+0x46>
  402406:	bf00      	nop
  402408:	00402301 	.word	0x00402301
  40240c:	004033f5 	.word	0x004033f5

00402410 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  402410:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402412:	b172      	cbz	r2, 402432 <prvCopyDataFromQueue+0x22>
{
  402414:	b510      	push	{r4, lr}
  402416:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  402418:	68c4      	ldr	r4, [r0, #12]
  40241a:	4414      	add	r4, r2
  40241c:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40241e:	6840      	ldr	r0, [r0, #4]
  402420:	4284      	cmp	r4, r0
  402422:	d301      	bcc.n	402428 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  402424:	6818      	ldr	r0, [r3, #0]
  402426:	60d8      	str	r0, [r3, #12]
  402428:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  40242a:	68d9      	ldr	r1, [r3, #12]
  40242c:	4b01      	ldr	r3, [pc, #4]	; (402434 <prvCopyDataFromQueue+0x24>)
  40242e:	4798      	blx	r3
  402430:	bd10      	pop	{r4, pc}
  402432:	4770      	bx	lr
  402434:	0040471d 	.word	0x0040471d

00402438 <prvUnlockQueue>:
{
  402438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40243a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  40243c:	4b22      	ldr	r3, [pc, #136]	; (4024c8 <prvUnlockQueue+0x90>)
  40243e:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  402440:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402442:	2b00      	cmp	r3, #0
  402444:	dd1b      	ble.n	40247e <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  402446:	4d21      	ldr	r5, [pc, #132]	; (4024cc <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  402448:	4f21      	ldr	r7, [pc, #132]	; (4024d0 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40244a:	4e22      	ldr	r6, [pc, #136]	; (4024d4 <prvUnlockQueue+0x9c>)
  40244c:	e00b      	b.n	402466 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40244e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402450:	b1ab      	cbz	r3, 40247e <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402452:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402456:	47b0      	blx	r6
  402458:	b978      	cbnz	r0, 40247a <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  40245a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40245c:	3b01      	subs	r3, #1
  40245e:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  402460:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402462:	2b00      	cmp	r3, #0
  402464:	dd0b      	ble.n	40247e <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  402466:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402468:	2b00      	cmp	r3, #0
  40246a:	d0f0      	beq.n	40244e <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40246c:	2100      	movs	r1, #0
  40246e:	4620      	mov	r0, r4
  402470:	47a8      	blx	r5
  402472:	2801      	cmp	r0, #1
  402474:	d1f1      	bne.n	40245a <prvUnlockQueue+0x22>
						vTaskMissedYield();
  402476:	47b8      	blx	r7
  402478:	e7ef      	b.n	40245a <prvUnlockQueue+0x22>
							vTaskMissedYield();
  40247a:	47b8      	blx	r7
  40247c:	e7ed      	b.n	40245a <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  40247e:	f04f 33ff 	mov.w	r3, #4294967295
  402482:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  402484:	4b14      	ldr	r3, [pc, #80]	; (4024d8 <prvUnlockQueue+0xa0>)
  402486:	4798      	blx	r3
	taskENTER_CRITICAL();
  402488:	4b0f      	ldr	r3, [pc, #60]	; (4024c8 <prvUnlockQueue+0x90>)
  40248a:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40248c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40248e:	2b00      	cmp	r3, #0
  402490:	dd14      	ble.n	4024bc <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402492:	6923      	ldr	r3, [r4, #16]
  402494:	b193      	cbz	r3, 4024bc <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  402496:	f104 0610 	add.w	r6, r4, #16
  40249a:	4d0e      	ldr	r5, [pc, #56]	; (4024d4 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  40249c:	4f0c      	ldr	r7, [pc, #48]	; (4024d0 <prvUnlockQueue+0x98>)
  40249e:	e007      	b.n	4024b0 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  4024a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4024a2:	3b01      	subs	r3, #1
  4024a4:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4024a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4024a8:	2b00      	cmp	r3, #0
  4024aa:	dd07      	ble.n	4024bc <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4024ac:	6923      	ldr	r3, [r4, #16]
  4024ae:	b12b      	cbz	r3, 4024bc <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4024b0:	4630      	mov	r0, r6
  4024b2:	47a8      	blx	r5
  4024b4:	2800      	cmp	r0, #0
  4024b6:	d0f3      	beq.n	4024a0 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  4024b8:	47b8      	blx	r7
  4024ba:	e7f1      	b.n	4024a0 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  4024bc:	f04f 33ff 	mov.w	r3, #4294967295
  4024c0:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  4024c2:	4b05      	ldr	r3, [pc, #20]	; (4024d8 <prvUnlockQueue+0xa0>)
  4024c4:	4798      	blx	r3
  4024c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4024c8:	00402019 	.word	0x00402019
  4024cc:	00402389 	.word	0x00402389
  4024d0:	00403551 	.word	0x00403551
  4024d4:	004033f5 	.word	0x004033f5
  4024d8:	00402065 	.word	0x00402065

004024dc <xQueueGenericReset>:
{
  4024dc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  4024de:	b308      	cbz	r0, 402524 <xQueueGenericReset+0x48>
  4024e0:	4604      	mov	r4, r0
  4024e2:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4024e4:	4b1d      	ldr	r3, [pc, #116]	; (40255c <xQueueGenericReset+0x80>)
  4024e6:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4024e8:	6822      	ldr	r2, [r4, #0]
  4024ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4024ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4024ee:	fb03 f301 	mul.w	r3, r3, r1
  4024f2:	18d0      	adds	r0, r2, r3
  4024f4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4024f6:	2000      	movs	r0, #0
  4024f8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4024fa:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4024fc:	1a5b      	subs	r3, r3, r1
  4024fe:	4413      	add	r3, r2
  402500:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  402502:	f04f 33ff 	mov.w	r3, #4294967295
  402506:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  402508:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  40250a:	b9fd      	cbnz	r5, 40254c <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40250c:	6923      	ldr	r3, [r4, #16]
  40250e:	b12b      	cbz	r3, 40251c <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  402510:	f104 0010 	add.w	r0, r4, #16
  402514:	4b12      	ldr	r3, [pc, #72]	; (402560 <xQueueGenericReset+0x84>)
  402516:	4798      	blx	r3
  402518:	2801      	cmp	r0, #1
  40251a:	d00e      	beq.n	40253a <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  40251c:	4b11      	ldr	r3, [pc, #68]	; (402564 <xQueueGenericReset+0x88>)
  40251e:	4798      	blx	r3
}
  402520:	2001      	movs	r0, #1
  402522:	bd38      	pop	{r3, r4, r5, pc}
  402524:	f04f 0380 	mov.w	r3, #128	; 0x80
  402528:	b672      	cpsid	i
  40252a:	f383 8811 	msr	BASEPRI, r3
  40252e:	f3bf 8f6f 	isb	sy
  402532:	f3bf 8f4f 	dsb	sy
  402536:	b662      	cpsie	i
  402538:	e7fe      	b.n	402538 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  40253a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40253e:	4b0a      	ldr	r3, [pc, #40]	; (402568 <xQueueGenericReset+0x8c>)
  402540:	601a      	str	r2, [r3, #0]
  402542:	f3bf 8f4f 	dsb	sy
  402546:	f3bf 8f6f 	isb	sy
  40254a:	e7e7      	b.n	40251c <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  40254c:	f104 0010 	add.w	r0, r4, #16
  402550:	4d06      	ldr	r5, [pc, #24]	; (40256c <xQueueGenericReset+0x90>)
  402552:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  402554:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402558:	47a8      	blx	r5
  40255a:	e7df      	b.n	40251c <xQueueGenericReset+0x40>
  40255c:	00402019 	.word	0x00402019
  402560:	004033f5 	.word	0x004033f5
  402564:	00402065 	.word	0x00402065
  402568:	e000ed04 	.word	0xe000ed04
  40256c:	00401ecd 	.word	0x00401ecd

00402570 <xQueueGenericCreate>:
{
  402570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  402572:	b950      	cbnz	r0, 40258a <xQueueGenericCreate+0x1a>
  402574:	f04f 0380 	mov.w	r3, #128	; 0x80
  402578:	b672      	cpsid	i
  40257a:	f383 8811 	msr	BASEPRI, r3
  40257e:	f3bf 8f6f 	isb	sy
  402582:	f3bf 8f4f 	dsb	sy
  402586:	b662      	cpsie	i
  402588:	e7fe      	b.n	402588 <xQueueGenericCreate+0x18>
  40258a:	4606      	mov	r6, r0
  40258c:	4617      	mov	r7, r2
  40258e:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  402590:	b189      	cbz	r1, 4025b6 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402592:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  402596:	3059      	adds	r0, #89	; 0x59
  402598:	4b12      	ldr	r3, [pc, #72]	; (4025e4 <xQueueGenericCreate+0x74>)
  40259a:	4798      	blx	r3
	if( pxNewQueue != NULL )
  40259c:	4604      	mov	r4, r0
  40259e:	b9e8      	cbnz	r0, 4025dc <xQueueGenericCreate+0x6c>
  4025a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025a4:	b672      	cpsid	i
  4025a6:	f383 8811 	msr	BASEPRI, r3
  4025aa:	f3bf 8f6f 	isb	sy
  4025ae:	f3bf 8f4f 	dsb	sy
  4025b2:	b662      	cpsie	i
  4025b4:	e7fe      	b.n	4025b4 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4025b6:	2058      	movs	r0, #88	; 0x58
  4025b8:	4b0a      	ldr	r3, [pc, #40]	; (4025e4 <xQueueGenericCreate+0x74>)
  4025ba:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4025bc:	4604      	mov	r4, r0
  4025be:	2800      	cmp	r0, #0
  4025c0:	d0ee      	beq.n	4025a0 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  4025c2:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  4025c4:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  4025c6:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  4025c8:	2101      	movs	r1, #1
  4025ca:	4620      	mov	r0, r4
  4025cc:	4b06      	ldr	r3, [pc, #24]	; (4025e8 <xQueueGenericCreate+0x78>)
  4025ce:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  4025d0:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  4025d4:	2300      	movs	r3, #0
  4025d6:	6563      	str	r3, [r4, #84]	; 0x54
}
  4025d8:	4620      	mov	r0, r4
  4025da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  4025dc:	f100 0358 	add.w	r3, r0, #88	; 0x58
  4025e0:	6003      	str	r3, [r0, #0]
  4025e2:	e7ef      	b.n	4025c4 <xQueueGenericCreate+0x54>
  4025e4:	00402275 	.word	0x00402275
  4025e8:	004024dd 	.word	0x004024dd

004025ec <xQueueGenericSend>:
{
  4025ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4025f0:	b085      	sub	sp, #20
  4025f2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4025f4:	b1b8      	cbz	r0, 402626 <xQueueGenericSend+0x3a>
  4025f6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4025f8:	b301      	cbz	r1, 40263c <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4025fa:	2b02      	cmp	r3, #2
  4025fc:	d02c      	beq.n	402658 <xQueueGenericSend+0x6c>
  4025fe:	461d      	mov	r5, r3
  402600:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  402602:	4b66      	ldr	r3, [pc, #408]	; (40279c <xQueueGenericSend+0x1b0>)
  402604:	4798      	blx	r3
  402606:	2800      	cmp	r0, #0
  402608:	d134      	bne.n	402674 <xQueueGenericSend+0x88>
  40260a:	9b01      	ldr	r3, [sp, #4]
  40260c:	2b00      	cmp	r3, #0
  40260e:	d038      	beq.n	402682 <xQueueGenericSend+0x96>
  402610:	f04f 0380 	mov.w	r3, #128	; 0x80
  402614:	b672      	cpsid	i
  402616:	f383 8811 	msr	BASEPRI, r3
  40261a:	f3bf 8f6f 	isb	sy
  40261e:	f3bf 8f4f 	dsb	sy
  402622:	b662      	cpsie	i
  402624:	e7fe      	b.n	402624 <xQueueGenericSend+0x38>
  402626:	f04f 0380 	mov.w	r3, #128	; 0x80
  40262a:	b672      	cpsid	i
  40262c:	f383 8811 	msr	BASEPRI, r3
  402630:	f3bf 8f6f 	isb	sy
  402634:	f3bf 8f4f 	dsb	sy
  402638:	b662      	cpsie	i
  40263a:	e7fe      	b.n	40263a <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40263c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40263e:	2a00      	cmp	r2, #0
  402640:	d0db      	beq.n	4025fa <xQueueGenericSend+0xe>
  402642:	f04f 0380 	mov.w	r3, #128	; 0x80
  402646:	b672      	cpsid	i
  402648:	f383 8811 	msr	BASEPRI, r3
  40264c:	f3bf 8f6f 	isb	sy
  402650:	f3bf 8f4f 	dsb	sy
  402654:	b662      	cpsie	i
  402656:	e7fe      	b.n	402656 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402658:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  40265a:	2a01      	cmp	r2, #1
  40265c:	d0cf      	beq.n	4025fe <xQueueGenericSend+0x12>
  40265e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402662:	b672      	cpsid	i
  402664:	f383 8811 	msr	BASEPRI, r3
  402668:	f3bf 8f6f 	isb	sy
  40266c:	f3bf 8f4f 	dsb	sy
  402670:	b662      	cpsie	i
  402672:	e7fe      	b.n	402672 <xQueueGenericSend+0x86>
  402674:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  402676:	4e4a      	ldr	r6, [pc, #296]	; (4027a0 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  402678:	f8df a150 	ldr.w	sl, [pc, #336]	; 4027cc <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  40267c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 4027ac <xQueueGenericSend+0x1c0>
  402680:	e042      	b.n	402708 <xQueueGenericSend+0x11c>
  402682:	2700      	movs	r7, #0
  402684:	e7f7      	b.n	402676 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  402686:	462a      	mov	r2, r5
  402688:	4641      	mov	r1, r8
  40268a:	4620      	mov	r0, r4
  40268c:	4b45      	ldr	r3, [pc, #276]	; (4027a4 <xQueueGenericSend+0x1b8>)
  40268e:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  402690:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402692:	b19b      	cbz	r3, 4026bc <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402694:	4629      	mov	r1, r5
  402696:	4620      	mov	r0, r4
  402698:	4b43      	ldr	r3, [pc, #268]	; (4027a8 <xQueueGenericSend+0x1bc>)
  40269a:	4798      	blx	r3
  40269c:	2801      	cmp	r0, #1
  40269e:	d107      	bne.n	4026b0 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4026a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4026a4:	4b41      	ldr	r3, [pc, #260]	; (4027ac <xQueueGenericSend+0x1c0>)
  4026a6:	601a      	str	r2, [r3, #0]
  4026a8:	f3bf 8f4f 	dsb	sy
  4026ac:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4026b0:	4b3f      	ldr	r3, [pc, #252]	; (4027b0 <xQueueGenericSend+0x1c4>)
  4026b2:	4798      	blx	r3
				return pdPASS;
  4026b4:	2001      	movs	r0, #1
}
  4026b6:	b005      	add	sp, #20
  4026b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4026bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4026be:	b173      	cbz	r3, 4026de <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4026c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4026c4:	4b3b      	ldr	r3, [pc, #236]	; (4027b4 <xQueueGenericSend+0x1c8>)
  4026c6:	4798      	blx	r3
  4026c8:	2801      	cmp	r0, #1
  4026ca:	d1f1      	bne.n	4026b0 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  4026cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4026d0:	4b36      	ldr	r3, [pc, #216]	; (4027ac <xQueueGenericSend+0x1c0>)
  4026d2:	601a      	str	r2, [r3, #0]
  4026d4:	f3bf 8f4f 	dsb	sy
  4026d8:	f3bf 8f6f 	isb	sy
  4026dc:	e7e8      	b.n	4026b0 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  4026de:	2800      	cmp	r0, #0
  4026e0:	d0e6      	beq.n	4026b0 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4026e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4026e6:	4b31      	ldr	r3, [pc, #196]	; (4027ac <xQueueGenericSend+0x1c0>)
  4026e8:	601a      	str	r2, [r3, #0]
  4026ea:	f3bf 8f4f 	dsb	sy
  4026ee:	f3bf 8f6f 	isb	sy
  4026f2:	e7dd      	b.n	4026b0 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  4026f4:	4b2e      	ldr	r3, [pc, #184]	; (4027b0 <xQueueGenericSend+0x1c4>)
  4026f6:	4798      	blx	r3
					return errQUEUE_FULL;
  4026f8:	2000      	movs	r0, #0
  4026fa:	e7dc      	b.n	4026b6 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  4026fc:	4620      	mov	r0, r4
  4026fe:	4b2e      	ldr	r3, [pc, #184]	; (4027b8 <xQueueGenericSend+0x1cc>)
  402700:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402702:	4b2e      	ldr	r3, [pc, #184]	; (4027bc <xQueueGenericSend+0x1d0>)
  402704:	4798      	blx	r3
  402706:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  402708:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40270a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40270c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40270e:	429a      	cmp	r2, r3
  402710:	d3b9      	bcc.n	402686 <xQueueGenericSend+0x9a>
  402712:	2d02      	cmp	r5, #2
  402714:	d0b7      	beq.n	402686 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  402716:	9b01      	ldr	r3, [sp, #4]
  402718:	2b00      	cmp	r3, #0
  40271a:	d0eb      	beq.n	4026f4 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  40271c:	b90f      	cbnz	r7, 402722 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  40271e:	a802      	add	r0, sp, #8
  402720:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  402722:	4b23      	ldr	r3, [pc, #140]	; (4027b0 <xQueueGenericSend+0x1c4>)
  402724:	4798      	blx	r3
		vTaskSuspendAll();
  402726:	4b26      	ldr	r3, [pc, #152]	; (4027c0 <xQueueGenericSend+0x1d4>)
  402728:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40272a:	47b0      	blx	r6
  40272c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40272e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402732:	d101      	bne.n	402738 <xQueueGenericSend+0x14c>
  402734:	2300      	movs	r3, #0
  402736:	6463      	str	r3, [r4, #68]	; 0x44
  402738:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40273a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40273e:	d101      	bne.n	402744 <xQueueGenericSend+0x158>
  402740:	2300      	movs	r3, #0
  402742:	64a3      	str	r3, [r4, #72]	; 0x48
  402744:	4b1a      	ldr	r3, [pc, #104]	; (4027b0 <xQueueGenericSend+0x1c4>)
  402746:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402748:	a901      	add	r1, sp, #4
  40274a:	a802      	add	r0, sp, #8
  40274c:	4b1d      	ldr	r3, [pc, #116]	; (4027c4 <xQueueGenericSend+0x1d8>)
  40274e:	4798      	blx	r3
  402750:	b9e0      	cbnz	r0, 40278c <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  402752:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  402754:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  402758:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  40275a:	4b15      	ldr	r3, [pc, #84]	; (4027b0 <xQueueGenericSend+0x1c4>)
  40275c:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40275e:	45bb      	cmp	fp, r7
  402760:	d1cc      	bne.n	4026fc <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  402762:	9901      	ldr	r1, [sp, #4]
  402764:	f104 0010 	add.w	r0, r4, #16
  402768:	4b17      	ldr	r3, [pc, #92]	; (4027c8 <xQueueGenericSend+0x1dc>)
  40276a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40276c:	4620      	mov	r0, r4
  40276e:	4b12      	ldr	r3, [pc, #72]	; (4027b8 <xQueueGenericSend+0x1cc>)
  402770:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402772:	4b12      	ldr	r3, [pc, #72]	; (4027bc <xQueueGenericSend+0x1d0>)
  402774:	4798      	blx	r3
  402776:	2800      	cmp	r0, #0
  402778:	d1c5      	bne.n	402706 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  40277a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40277e:	f8c9 3000 	str.w	r3, [r9]
  402782:	f3bf 8f4f 	dsb	sy
  402786:	f3bf 8f6f 	isb	sy
  40278a:	e7bc      	b.n	402706 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  40278c:	4620      	mov	r0, r4
  40278e:	4b0a      	ldr	r3, [pc, #40]	; (4027b8 <xQueueGenericSend+0x1cc>)
  402790:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402792:	4b0a      	ldr	r3, [pc, #40]	; (4027bc <xQueueGenericSend+0x1d0>)
  402794:	4798      	blx	r3
			return errQUEUE_FULL;
  402796:	2000      	movs	r0, #0
  402798:	e78d      	b.n	4026b6 <xQueueGenericSend+0xca>
  40279a:	bf00      	nop
  40279c:	0040355d 	.word	0x0040355d
  4027a0:	00402019 	.word	0x00402019
  4027a4:	00402301 	.word	0x00402301
  4027a8:	00402389 	.word	0x00402389
  4027ac:	e000ed04 	.word	0xe000ed04
  4027b0:	00402065 	.word	0x00402065
  4027b4:	004033f5 	.word	0x004033f5
  4027b8:	00402439 	.word	0x00402439
  4027bc:	00402fd9 	.word	0x00402fd9
  4027c0:	00402e71 	.word	0x00402e71
  4027c4:	004034bd 	.word	0x004034bd
  4027c8:	004032f1 	.word	0x004032f1
  4027cc:	0040348d 	.word	0x0040348d

004027d0 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  4027d0:	2800      	cmp	r0, #0
  4027d2:	d036      	beq.n	402842 <xQueueGenericSendFromISR+0x72>
{
  4027d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4027d8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4027da:	2900      	cmp	r1, #0
  4027dc:	d03c      	beq.n	402858 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4027de:	2b02      	cmp	r3, #2
  4027e0:	d048      	beq.n	402874 <xQueueGenericSendFromISR+0xa4>
  4027e2:	461e      	mov	r6, r3
  4027e4:	4615      	mov	r5, r2
  4027e6:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4027e8:	4b35      	ldr	r3, [pc, #212]	; (4028c0 <xQueueGenericSendFromISR+0xf0>)
  4027ea:	4798      	blx	r3
	__asm volatile
  4027ec:	f3ef 8711 	mrs	r7, BASEPRI
  4027f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027f4:	b672      	cpsid	i
  4027f6:	f383 8811 	msr	BASEPRI, r3
  4027fa:	f3bf 8f6f 	isb	sy
  4027fe:	f3bf 8f4f 	dsb	sy
  402802:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402804:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402806:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402808:	429a      	cmp	r2, r3
  40280a:	d301      	bcc.n	402810 <xQueueGenericSendFromISR+0x40>
  40280c:	2e02      	cmp	r6, #2
  40280e:	d14f      	bne.n	4028b0 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  402810:	4632      	mov	r2, r6
  402812:	4641      	mov	r1, r8
  402814:	4620      	mov	r0, r4
  402816:	4b2b      	ldr	r3, [pc, #172]	; (4028c4 <xQueueGenericSendFromISR+0xf4>)
  402818:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  40281a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40281c:	f1b3 3fff 	cmp.w	r3, #4294967295
  402820:	d141      	bne.n	4028a6 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  402822:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402824:	2b00      	cmp	r3, #0
  402826:	d033      	beq.n	402890 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402828:	4631      	mov	r1, r6
  40282a:	4620      	mov	r0, r4
  40282c:	4b26      	ldr	r3, [pc, #152]	; (4028c8 <xQueueGenericSendFromISR+0xf8>)
  40282e:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  402830:	2d00      	cmp	r5, #0
  402832:	d03f      	beq.n	4028b4 <xQueueGenericSendFromISR+0xe4>
  402834:	2801      	cmp	r0, #1
  402836:	d13d      	bne.n	4028b4 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  402838:	6028      	str	r0, [r5, #0]
	__asm volatile
  40283a:	f387 8811 	msr	BASEPRI, r7
}
  40283e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  402842:	f04f 0380 	mov.w	r3, #128	; 0x80
  402846:	b672      	cpsid	i
  402848:	f383 8811 	msr	BASEPRI, r3
  40284c:	f3bf 8f6f 	isb	sy
  402850:	f3bf 8f4f 	dsb	sy
  402854:	b662      	cpsie	i
  402856:	e7fe      	b.n	402856 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402858:	6c00      	ldr	r0, [r0, #64]	; 0x40
  40285a:	2800      	cmp	r0, #0
  40285c:	d0bf      	beq.n	4027de <xQueueGenericSendFromISR+0xe>
  40285e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402862:	b672      	cpsid	i
  402864:	f383 8811 	msr	BASEPRI, r3
  402868:	f3bf 8f6f 	isb	sy
  40286c:	f3bf 8f4f 	dsb	sy
  402870:	b662      	cpsie	i
  402872:	e7fe      	b.n	402872 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402874:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  402876:	2801      	cmp	r0, #1
  402878:	d0b3      	beq.n	4027e2 <xQueueGenericSendFromISR+0x12>
  40287a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40287e:	b672      	cpsid	i
  402880:	f383 8811 	msr	BASEPRI, r3
  402884:	f3bf 8f6f 	isb	sy
  402888:	f3bf 8f4f 	dsb	sy
  40288c:	b662      	cpsie	i
  40288e:	e7fe      	b.n	40288e <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402890:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402892:	b18b      	cbz	r3, 4028b8 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402894:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402898:	4b0c      	ldr	r3, [pc, #48]	; (4028cc <xQueueGenericSendFromISR+0xfc>)
  40289a:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  40289c:	b175      	cbz	r5, 4028bc <xQueueGenericSendFromISR+0xec>
  40289e:	b168      	cbz	r0, 4028bc <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  4028a0:	2001      	movs	r0, #1
  4028a2:	6028      	str	r0, [r5, #0]
  4028a4:	e7c9      	b.n	40283a <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  4028a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4028a8:	3301      	adds	r3, #1
  4028aa:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  4028ac:	2001      	movs	r0, #1
  4028ae:	e7c4      	b.n	40283a <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  4028b0:	2000      	movs	r0, #0
  4028b2:	e7c2      	b.n	40283a <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  4028b4:	2001      	movs	r0, #1
  4028b6:	e7c0      	b.n	40283a <xQueueGenericSendFromISR+0x6a>
  4028b8:	2001      	movs	r0, #1
  4028ba:	e7be      	b.n	40283a <xQueueGenericSendFromISR+0x6a>
  4028bc:	2001      	movs	r0, #1
  4028be:	e7bc      	b.n	40283a <xQueueGenericSendFromISR+0x6a>
  4028c0:	00402211 	.word	0x00402211
  4028c4:	00402301 	.word	0x00402301
  4028c8:	00402389 	.word	0x00402389
  4028cc:	004033f5 	.word	0x004033f5

004028d0 <xQueueGenericReceive>:
{
  4028d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4028d4:	b084      	sub	sp, #16
  4028d6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4028d8:	b198      	cbz	r0, 402902 <xQueueGenericReceive+0x32>
  4028da:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4028dc:	b1e1      	cbz	r1, 402918 <xQueueGenericReceive+0x48>
  4028de:	4698      	mov	r8, r3
  4028e0:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4028e2:	4b61      	ldr	r3, [pc, #388]	; (402a68 <xQueueGenericReceive+0x198>)
  4028e4:	4798      	blx	r3
  4028e6:	bb28      	cbnz	r0, 402934 <xQueueGenericReceive+0x64>
  4028e8:	9b01      	ldr	r3, [sp, #4]
  4028ea:	b353      	cbz	r3, 402942 <xQueueGenericReceive+0x72>
  4028ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028f0:	b672      	cpsid	i
  4028f2:	f383 8811 	msr	BASEPRI, r3
  4028f6:	f3bf 8f6f 	isb	sy
  4028fa:	f3bf 8f4f 	dsb	sy
  4028fe:	b662      	cpsie	i
  402900:	e7fe      	b.n	402900 <xQueueGenericReceive+0x30>
  402902:	f04f 0380 	mov.w	r3, #128	; 0x80
  402906:	b672      	cpsid	i
  402908:	f383 8811 	msr	BASEPRI, r3
  40290c:	f3bf 8f6f 	isb	sy
  402910:	f3bf 8f4f 	dsb	sy
  402914:	b662      	cpsie	i
  402916:	e7fe      	b.n	402916 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402918:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40291a:	2a00      	cmp	r2, #0
  40291c:	d0df      	beq.n	4028de <xQueueGenericReceive+0xe>
  40291e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402922:	b672      	cpsid	i
  402924:	f383 8811 	msr	BASEPRI, r3
  402928:	f3bf 8f6f 	isb	sy
  40292c:	f3bf 8f4f 	dsb	sy
  402930:	b662      	cpsie	i
  402932:	e7fe      	b.n	402932 <xQueueGenericReceive+0x62>
  402934:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  402936:	4d4d      	ldr	r5, [pc, #308]	; (402a6c <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  402938:	f8df a160 	ldr.w	sl, [pc, #352]	; 402a9c <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  40293c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 402a7c <xQueueGenericReceive+0x1ac>
  402940:	e04b      	b.n	4029da <xQueueGenericReceive+0x10a>
  402942:	2600      	movs	r6, #0
  402944:	e7f7      	b.n	402936 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  402946:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  402948:	4639      	mov	r1, r7
  40294a:	4620      	mov	r0, r4
  40294c:	4b48      	ldr	r3, [pc, #288]	; (402a70 <xQueueGenericReceive+0x1a0>)
  40294e:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  402950:	f1b8 0f00 	cmp.w	r8, #0
  402954:	d11d      	bne.n	402992 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  402956:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402958:	3b01      	subs	r3, #1
  40295a:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40295c:	6823      	ldr	r3, [r4, #0]
  40295e:	b913      	cbnz	r3, 402966 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  402960:	4b44      	ldr	r3, [pc, #272]	; (402a74 <xQueueGenericReceive+0x1a4>)
  402962:	4798      	blx	r3
  402964:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402966:	6923      	ldr	r3, [r4, #16]
  402968:	b16b      	cbz	r3, 402986 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40296a:	f104 0010 	add.w	r0, r4, #16
  40296e:	4b42      	ldr	r3, [pc, #264]	; (402a78 <xQueueGenericReceive+0x1a8>)
  402970:	4798      	blx	r3
  402972:	2801      	cmp	r0, #1
  402974:	d107      	bne.n	402986 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  402976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40297a:	4b40      	ldr	r3, [pc, #256]	; (402a7c <xQueueGenericReceive+0x1ac>)
  40297c:	601a      	str	r2, [r3, #0]
  40297e:	f3bf 8f4f 	dsb	sy
  402982:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  402986:	4b3e      	ldr	r3, [pc, #248]	; (402a80 <xQueueGenericReceive+0x1b0>)
  402988:	4798      	blx	r3
				return pdPASS;
  40298a:	2001      	movs	r0, #1
}
  40298c:	b004      	add	sp, #16
  40298e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  402992:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402994:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402996:	2b00      	cmp	r3, #0
  402998:	d0f5      	beq.n	402986 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40299a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40299e:	4b36      	ldr	r3, [pc, #216]	; (402a78 <xQueueGenericReceive+0x1a8>)
  4029a0:	4798      	blx	r3
  4029a2:	2800      	cmp	r0, #0
  4029a4:	d0ef      	beq.n	402986 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  4029a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4029aa:	4b34      	ldr	r3, [pc, #208]	; (402a7c <xQueueGenericReceive+0x1ac>)
  4029ac:	601a      	str	r2, [r3, #0]
  4029ae:	f3bf 8f4f 	dsb	sy
  4029b2:	f3bf 8f6f 	isb	sy
  4029b6:	e7e6      	b.n	402986 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  4029b8:	4b31      	ldr	r3, [pc, #196]	; (402a80 <xQueueGenericReceive+0x1b0>)
  4029ba:	4798      	blx	r3
					return errQUEUE_EMPTY;
  4029bc:	2000      	movs	r0, #0
  4029be:	e7e5      	b.n	40298c <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  4029c0:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4029c2:	6860      	ldr	r0, [r4, #4]
  4029c4:	4b2f      	ldr	r3, [pc, #188]	; (402a84 <xQueueGenericReceive+0x1b4>)
  4029c6:	4798      	blx	r3
						taskEXIT_CRITICAL();
  4029c8:	4b2d      	ldr	r3, [pc, #180]	; (402a80 <xQueueGenericReceive+0x1b0>)
  4029ca:	4798      	blx	r3
  4029cc:	e030      	b.n	402a30 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  4029ce:	4620      	mov	r0, r4
  4029d0:	4b2d      	ldr	r3, [pc, #180]	; (402a88 <xQueueGenericReceive+0x1b8>)
  4029d2:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4029d4:	4b2d      	ldr	r3, [pc, #180]	; (402a8c <xQueueGenericReceive+0x1bc>)
  4029d6:	4798      	blx	r3
  4029d8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  4029da:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4029dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4029de:	2b00      	cmp	r3, #0
  4029e0:	d1b1      	bne.n	402946 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  4029e2:	9b01      	ldr	r3, [sp, #4]
  4029e4:	2b00      	cmp	r3, #0
  4029e6:	d0e7      	beq.n	4029b8 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  4029e8:	b90e      	cbnz	r6, 4029ee <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  4029ea:	a802      	add	r0, sp, #8
  4029ec:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  4029ee:	4b24      	ldr	r3, [pc, #144]	; (402a80 <xQueueGenericReceive+0x1b0>)
  4029f0:	4798      	blx	r3
		vTaskSuspendAll();
  4029f2:	4b27      	ldr	r3, [pc, #156]	; (402a90 <xQueueGenericReceive+0x1c0>)
  4029f4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4029f6:	47a8      	blx	r5
  4029f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4029fa:	f1b3 3fff 	cmp.w	r3, #4294967295
  4029fe:	d101      	bne.n	402a04 <xQueueGenericReceive+0x134>
  402a00:	2300      	movs	r3, #0
  402a02:	6463      	str	r3, [r4, #68]	; 0x44
  402a04:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402a06:	f1b3 3fff 	cmp.w	r3, #4294967295
  402a0a:	d101      	bne.n	402a10 <xQueueGenericReceive+0x140>
  402a0c:	2300      	movs	r3, #0
  402a0e:	64a3      	str	r3, [r4, #72]	; 0x48
  402a10:	4b1b      	ldr	r3, [pc, #108]	; (402a80 <xQueueGenericReceive+0x1b0>)
  402a12:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402a14:	a901      	add	r1, sp, #4
  402a16:	a802      	add	r0, sp, #8
  402a18:	4b1e      	ldr	r3, [pc, #120]	; (402a94 <xQueueGenericReceive+0x1c4>)
  402a1a:	4798      	blx	r3
  402a1c:	b9e8      	cbnz	r0, 402a5a <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  402a1e:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  402a20:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  402a22:	4b17      	ldr	r3, [pc, #92]	; (402a80 <xQueueGenericReceive+0x1b0>)
  402a24:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  402a26:	2e00      	cmp	r6, #0
  402a28:	d1d1      	bne.n	4029ce <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402a2a:	6823      	ldr	r3, [r4, #0]
  402a2c:	2b00      	cmp	r3, #0
  402a2e:	d0c7      	beq.n	4029c0 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  402a30:	9901      	ldr	r1, [sp, #4]
  402a32:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402a36:	4b18      	ldr	r3, [pc, #96]	; (402a98 <xQueueGenericReceive+0x1c8>)
  402a38:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  402a3a:	4620      	mov	r0, r4
  402a3c:	4b12      	ldr	r3, [pc, #72]	; (402a88 <xQueueGenericReceive+0x1b8>)
  402a3e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402a40:	4b12      	ldr	r3, [pc, #72]	; (402a8c <xQueueGenericReceive+0x1bc>)
  402a42:	4798      	blx	r3
  402a44:	2800      	cmp	r0, #0
  402a46:	d1c7      	bne.n	4029d8 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  402a48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402a4c:	f8c9 3000 	str.w	r3, [r9]
  402a50:	f3bf 8f4f 	dsb	sy
  402a54:	f3bf 8f6f 	isb	sy
  402a58:	e7be      	b.n	4029d8 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  402a5a:	4620      	mov	r0, r4
  402a5c:	4b0a      	ldr	r3, [pc, #40]	; (402a88 <xQueueGenericReceive+0x1b8>)
  402a5e:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402a60:	4b0a      	ldr	r3, [pc, #40]	; (402a8c <xQueueGenericReceive+0x1bc>)
  402a62:	4798      	blx	r3
			return errQUEUE_EMPTY;
  402a64:	2000      	movs	r0, #0
  402a66:	e791      	b.n	40298c <xQueueGenericReceive+0xbc>
  402a68:	0040355d 	.word	0x0040355d
  402a6c:	00402019 	.word	0x00402019
  402a70:	00402411 	.word	0x00402411
  402a74:	004036dd 	.word	0x004036dd
  402a78:	004033f5 	.word	0x004033f5
  402a7c:	e000ed04 	.word	0xe000ed04
  402a80:	00402065 	.word	0x00402065
  402a84:	0040357d 	.word	0x0040357d
  402a88:	00402439 	.word	0x00402439
  402a8c:	00402fd9 	.word	0x00402fd9
  402a90:	00402e71 	.word	0x00402e71
  402a94:	004034bd 	.word	0x004034bd
  402a98:	004032f1 	.word	0x004032f1
  402a9c:	0040348d 	.word	0x0040348d

00402aa0 <vQueueAddToRegistry>:
	{
  402aa0:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  402aa2:	4b0b      	ldr	r3, [pc, #44]	; (402ad0 <vQueueAddToRegistry+0x30>)
  402aa4:	681b      	ldr	r3, [r3, #0]
  402aa6:	b153      	cbz	r3, 402abe <vQueueAddToRegistry+0x1e>
  402aa8:	2301      	movs	r3, #1
  402aaa:	4c09      	ldr	r4, [pc, #36]	; (402ad0 <vQueueAddToRegistry+0x30>)
  402aac:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  402ab0:	b132      	cbz	r2, 402ac0 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402ab2:	3301      	adds	r3, #1
  402ab4:	2b08      	cmp	r3, #8
  402ab6:	d1f9      	bne.n	402aac <vQueueAddToRegistry+0xc>
	}
  402ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
  402abc:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402abe:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  402ac0:	4a03      	ldr	r2, [pc, #12]	; (402ad0 <vQueueAddToRegistry+0x30>)
  402ac2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  402ac6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  402aca:	6058      	str	r0, [r3, #4]
				break;
  402acc:	e7f4      	b.n	402ab8 <vQueueAddToRegistry+0x18>
  402ace:	bf00      	nop
  402ad0:	2040c79c 	.word	0x2040c79c

00402ad4 <vQueueWaitForMessageRestricted>:
	{
  402ad4:	b570      	push	{r4, r5, r6, lr}
  402ad6:	4604      	mov	r4, r0
  402ad8:	460d      	mov	r5, r1
  402ada:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  402adc:	4b0f      	ldr	r3, [pc, #60]	; (402b1c <vQueueWaitForMessageRestricted+0x48>)
  402ade:	4798      	blx	r3
  402ae0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
  402ae6:	d00b      	beq.n	402b00 <vQueueWaitForMessageRestricted+0x2c>
  402ae8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402aea:	f1b3 3fff 	cmp.w	r3, #4294967295
  402aee:	d00a      	beq.n	402b06 <vQueueWaitForMessageRestricted+0x32>
  402af0:	4b0b      	ldr	r3, [pc, #44]	; (402b20 <vQueueWaitForMessageRestricted+0x4c>)
  402af2:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402af4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402af6:	b14b      	cbz	r3, 402b0c <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  402af8:	4620      	mov	r0, r4
  402afa:	4b0a      	ldr	r3, [pc, #40]	; (402b24 <vQueueWaitForMessageRestricted+0x50>)
  402afc:	4798      	blx	r3
  402afe:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  402b00:	2300      	movs	r3, #0
  402b02:	6463      	str	r3, [r4, #68]	; 0x44
  402b04:	e7f0      	b.n	402ae8 <vQueueWaitForMessageRestricted+0x14>
  402b06:	2300      	movs	r3, #0
  402b08:	64a3      	str	r3, [r4, #72]	; 0x48
  402b0a:	e7f1      	b.n	402af0 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  402b0c:	4632      	mov	r2, r6
  402b0e:	4629      	mov	r1, r5
  402b10:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402b14:	4b04      	ldr	r3, [pc, #16]	; (402b28 <vQueueWaitForMessageRestricted+0x54>)
  402b16:	4798      	blx	r3
  402b18:	e7ee      	b.n	402af8 <vQueueWaitForMessageRestricted+0x24>
  402b1a:	bf00      	nop
  402b1c:	00402019 	.word	0x00402019
  402b20:	00402065 	.word	0x00402065
  402b24:	00402439 	.word	0x00402439
  402b28:	00403375 	.word	0x00403375

00402b2c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402b2c:	4b08      	ldr	r3, [pc, #32]	; (402b50 <prvResetNextTaskUnblockTime+0x24>)
  402b2e:	681b      	ldr	r3, [r3, #0]
  402b30:	681b      	ldr	r3, [r3, #0]
  402b32:	b13b      	cbz	r3, 402b44 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402b34:	4b06      	ldr	r3, [pc, #24]	; (402b50 <prvResetNextTaskUnblockTime+0x24>)
  402b36:	681b      	ldr	r3, [r3, #0]
  402b38:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  402b3a:	68db      	ldr	r3, [r3, #12]
  402b3c:	685a      	ldr	r2, [r3, #4]
  402b3e:	4b05      	ldr	r3, [pc, #20]	; (402b54 <prvResetNextTaskUnblockTime+0x28>)
  402b40:	601a      	str	r2, [r3, #0]
  402b42:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  402b44:	f04f 32ff 	mov.w	r2, #4294967295
  402b48:	4b02      	ldr	r3, [pc, #8]	; (402b54 <prvResetNextTaskUnblockTime+0x28>)
  402b4a:	601a      	str	r2, [r3, #0]
  402b4c:	4770      	bx	lr
  402b4e:	bf00      	nop
  402b50:	2040c628 	.word	0x2040c628
  402b54:	2040c6d4 	.word	0x2040c6d4

00402b58 <prvAddCurrentTaskToDelayedList>:
{
  402b58:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  402b5a:	4b0f      	ldr	r3, [pc, #60]	; (402b98 <prvAddCurrentTaskToDelayedList+0x40>)
  402b5c:	681b      	ldr	r3, [r3, #0]
  402b5e:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  402b60:	4b0e      	ldr	r3, [pc, #56]	; (402b9c <prvAddCurrentTaskToDelayedList+0x44>)
  402b62:	681b      	ldr	r3, [r3, #0]
  402b64:	4298      	cmp	r0, r3
  402b66:	d30e      	bcc.n	402b86 <prvAddCurrentTaskToDelayedList+0x2e>
  402b68:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402b6a:	4b0d      	ldr	r3, [pc, #52]	; (402ba0 <prvAddCurrentTaskToDelayedList+0x48>)
  402b6c:	6818      	ldr	r0, [r3, #0]
  402b6e:	4b0a      	ldr	r3, [pc, #40]	; (402b98 <prvAddCurrentTaskToDelayedList+0x40>)
  402b70:	6819      	ldr	r1, [r3, #0]
  402b72:	3104      	adds	r1, #4
  402b74:	4b0b      	ldr	r3, [pc, #44]	; (402ba4 <prvAddCurrentTaskToDelayedList+0x4c>)
  402b76:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  402b78:	4b0b      	ldr	r3, [pc, #44]	; (402ba8 <prvAddCurrentTaskToDelayedList+0x50>)
  402b7a:	681b      	ldr	r3, [r3, #0]
  402b7c:	429c      	cmp	r4, r3
  402b7e:	d201      	bcs.n	402b84 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  402b80:	4b09      	ldr	r3, [pc, #36]	; (402ba8 <prvAddCurrentTaskToDelayedList+0x50>)
  402b82:	601c      	str	r4, [r3, #0]
  402b84:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402b86:	4b09      	ldr	r3, [pc, #36]	; (402bac <prvAddCurrentTaskToDelayedList+0x54>)
  402b88:	6818      	ldr	r0, [r3, #0]
  402b8a:	4b03      	ldr	r3, [pc, #12]	; (402b98 <prvAddCurrentTaskToDelayedList+0x40>)
  402b8c:	6819      	ldr	r1, [r3, #0]
  402b8e:	3104      	adds	r1, #4
  402b90:	4b04      	ldr	r3, [pc, #16]	; (402ba4 <prvAddCurrentTaskToDelayedList+0x4c>)
  402b92:	4798      	blx	r3
  402b94:	bd10      	pop	{r4, pc}
  402b96:	bf00      	nop
  402b98:	2040c624 	.word	0x2040c624
  402b9c:	2040c71c 	.word	0x2040c71c
  402ba0:	2040c628 	.word	0x2040c628
  402ba4:	00401f01 	.word	0x00401f01
  402ba8:	2040c6d4 	.word	0x2040c6d4
  402bac:	2040c62c 	.word	0x2040c62c

00402bb0 <xTaskGenericCreate>:
{
  402bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402bb4:	b083      	sub	sp, #12
  402bb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  402bb8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  402bbc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  402bbe:	b160      	cbz	r0, 402bda <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  402bc0:	2d04      	cmp	r5, #4
  402bc2:	d915      	bls.n	402bf0 <xTaskGenericCreate+0x40>
  402bc4:	f04f 0380 	mov.w	r3, #128	; 0x80
  402bc8:	b672      	cpsid	i
  402bca:	f383 8811 	msr	BASEPRI, r3
  402bce:	f3bf 8f6f 	isb	sy
  402bd2:	f3bf 8f4f 	dsb	sy
  402bd6:	b662      	cpsie	i
  402bd8:	e7fe      	b.n	402bd8 <xTaskGenericCreate+0x28>
  402bda:	f04f 0380 	mov.w	r3, #128	; 0x80
  402bde:	b672      	cpsid	i
  402be0:	f383 8811 	msr	BASEPRI, r3
  402be4:	f3bf 8f6f 	isb	sy
  402be8:	f3bf 8f4f 	dsb	sy
  402bec:	b662      	cpsie	i
  402bee:	e7fe      	b.n	402bee <xTaskGenericCreate+0x3e>
  402bf0:	9001      	str	r0, [sp, #4]
  402bf2:	4698      	mov	r8, r3
  402bf4:	4691      	mov	r9, r2
  402bf6:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402bf8:	b936      	cbnz	r6, 402c08 <xTaskGenericCreate+0x58>
  402bfa:	0090      	lsls	r0, r2, #2
  402bfc:	4b62      	ldr	r3, [pc, #392]	; (402d88 <xTaskGenericCreate+0x1d8>)
  402bfe:	4798      	blx	r3
		if( pxStack != NULL )
  402c00:	4606      	mov	r6, r0
  402c02:	2800      	cmp	r0, #0
  402c04:	f000 809e 	beq.w	402d44 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  402c08:	2058      	movs	r0, #88	; 0x58
  402c0a:	4b5f      	ldr	r3, [pc, #380]	; (402d88 <xTaskGenericCreate+0x1d8>)
  402c0c:	4798      	blx	r3
			if( pxNewTCB != NULL )
  402c0e:	4604      	mov	r4, r0
  402c10:	2800      	cmp	r0, #0
  402c12:	f000 8094 	beq.w	402d3e <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  402c16:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  402c18:	ea4f 0289 	mov.w	r2, r9, lsl #2
  402c1c:	21a5      	movs	r1, #165	; 0xa5
  402c1e:	4630      	mov	r0, r6
  402c20:	4b5a      	ldr	r3, [pc, #360]	; (402d8c <xTaskGenericCreate+0x1dc>)
  402c22:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  402c24:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  402c28:	444e      	add	r6, r9
  402c2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402c2c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  402c30:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402c34:	783b      	ldrb	r3, [r7, #0]
  402c36:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  402c3a:	783b      	ldrb	r3, [r7, #0]
  402c3c:	2b00      	cmp	r3, #0
  402c3e:	f040 8084 	bne.w	402d4a <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  402c42:	2700      	movs	r7, #0
  402c44:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  402c48:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  402c4a:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  402c4c:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  402c4e:	f104 0904 	add.w	r9, r4, #4
  402c52:	4648      	mov	r0, r9
  402c54:	f8df b184 	ldr.w	fp, [pc, #388]	; 402ddc <xTaskGenericCreate+0x22c>
  402c58:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  402c5a:	f104 0018 	add.w	r0, r4, #24
  402c5e:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  402c60:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402c62:	f1c5 0305 	rsb	r3, r5, #5
  402c66:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  402c68:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  402c6a:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  402c6c:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  402c70:	4642      	mov	r2, r8
  402c72:	9901      	ldr	r1, [sp, #4]
  402c74:	4630      	mov	r0, r6
  402c76:	4b46      	ldr	r3, [pc, #280]	; (402d90 <xTaskGenericCreate+0x1e0>)
  402c78:	4798      	blx	r3
  402c7a:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  402c7c:	f1ba 0f00 	cmp.w	sl, #0
  402c80:	d001      	beq.n	402c86 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  402c82:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  402c86:	4b43      	ldr	r3, [pc, #268]	; (402d94 <xTaskGenericCreate+0x1e4>)
  402c88:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  402c8a:	4a43      	ldr	r2, [pc, #268]	; (402d98 <xTaskGenericCreate+0x1e8>)
  402c8c:	6813      	ldr	r3, [r2, #0]
  402c8e:	3301      	adds	r3, #1
  402c90:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  402c92:	4b42      	ldr	r3, [pc, #264]	; (402d9c <xTaskGenericCreate+0x1ec>)
  402c94:	681b      	ldr	r3, [r3, #0]
  402c96:	2b00      	cmp	r3, #0
  402c98:	d166      	bne.n	402d68 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  402c9a:	4b40      	ldr	r3, [pc, #256]	; (402d9c <xTaskGenericCreate+0x1ec>)
  402c9c:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  402c9e:	6813      	ldr	r3, [r2, #0]
  402ca0:	2b01      	cmp	r3, #1
  402ca2:	d121      	bne.n	402ce8 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  402ca4:	4f3e      	ldr	r7, [pc, #248]	; (402da0 <xTaskGenericCreate+0x1f0>)
  402ca6:	4638      	mov	r0, r7
  402ca8:	4e3e      	ldr	r6, [pc, #248]	; (402da4 <xTaskGenericCreate+0x1f4>)
  402caa:	47b0      	blx	r6
  402cac:	f107 0014 	add.w	r0, r7, #20
  402cb0:	47b0      	blx	r6
  402cb2:	f107 0028 	add.w	r0, r7, #40	; 0x28
  402cb6:	47b0      	blx	r6
  402cb8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  402cbc:	47b0      	blx	r6
  402cbe:	f107 0050 	add.w	r0, r7, #80	; 0x50
  402cc2:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  402cc4:	f8df 8118 	ldr.w	r8, [pc, #280]	; 402de0 <xTaskGenericCreate+0x230>
  402cc8:	4640      	mov	r0, r8
  402cca:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  402ccc:	4f36      	ldr	r7, [pc, #216]	; (402da8 <xTaskGenericCreate+0x1f8>)
  402cce:	4638      	mov	r0, r7
  402cd0:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  402cd2:	4836      	ldr	r0, [pc, #216]	; (402dac <xTaskGenericCreate+0x1fc>)
  402cd4:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  402cd6:	4836      	ldr	r0, [pc, #216]	; (402db0 <xTaskGenericCreate+0x200>)
  402cd8:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  402cda:	4836      	ldr	r0, [pc, #216]	; (402db4 <xTaskGenericCreate+0x204>)
  402cdc:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  402cde:	4b36      	ldr	r3, [pc, #216]	; (402db8 <xTaskGenericCreate+0x208>)
  402ce0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402ce4:	4b35      	ldr	r3, [pc, #212]	; (402dbc <xTaskGenericCreate+0x20c>)
  402ce6:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  402ce8:	4a35      	ldr	r2, [pc, #212]	; (402dc0 <xTaskGenericCreate+0x210>)
  402cea:	6813      	ldr	r3, [r2, #0]
  402cec:	3301      	adds	r3, #1
  402cee:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  402cf0:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  402cf2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402cf4:	4a33      	ldr	r2, [pc, #204]	; (402dc4 <xTaskGenericCreate+0x214>)
  402cf6:	6811      	ldr	r1, [r2, #0]
  402cf8:	2301      	movs	r3, #1
  402cfa:	4083      	lsls	r3, r0
  402cfc:	430b      	orrs	r3, r1
  402cfe:	6013      	str	r3, [r2, #0]
  402d00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402d04:	4649      	mov	r1, r9
  402d06:	4b26      	ldr	r3, [pc, #152]	; (402da0 <xTaskGenericCreate+0x1f0>)
  402d08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402d0c:	4b2e      	ldr	r3, [pc, #184]	; (402dc8 <xTaskGenericCreate+0x218>)
  402d0e:	4798      	blx	r3
		taskEXIT_CRITICAL();
  402d10:	4b2e      	ldr	r3, [pc, #184]	; (402dcc <xTaskGenericCreate+0x21c>)
  402d12:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  402d14:	4b2e      	ldr	r3, [pc, #184]	; (402dd0 <xTaskGenericCreate+0x220>)
  402d16:	681b      	ldr	r3, [r3, #0]
  402d18:	2b00      	cmp	r3, #0
  402d1a:	d031      	beq.n	402d80 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  402d1c:	4b1f      	ldr	r3, [pc, #124]	; (402d9c <xTaskGenericCreate+0x1ec>)
  402d1e:	681b      	ldr	r3, [r3, #0]
  402d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402d22:	429d      	cmp	r5, r3
  402d24:	d92e      	bls.n	402d84 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  402d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402d2a:	4b2a      	ldr	r3, [pc, #168]	; (402dd4 <xTaskGenericCreate+0x224>)
  402d2c:	601a      	str	r2, [r3, #0]
  402d2e:	f3bf 8f4f 	dsb	sy
  402d32:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  402d36:	2001      	movs	r0, #1
}
  402d38:	b003      	add	sp, #12
  402d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  402d3e:	4630      	mov	r0, r6
  402d40:	4b25      	ldr	r3, [pc, #148]	; (402dd8 <xTaskGenericCreate+0x228>)
  402d42:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402d44:	f04f 30ff 	mov.w	r0, #4294967295
  402d48:	e7f6      	b.n	402d38 <xTaskGenericCreate+0x188>
  402d4a:	463b      	mov	r3, r7
  402d4c:	f104 0234 	add.w	r2, r4, #52	; 0x34
  402d50:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402d52:	7859      	ldrb	r1, [r3, #1]
  402d54:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  402d58:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  402d5c:	2900      	cmp	r1, #0
  402d5e:	f43f af70 	beq.w	402c42 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  402d62:	42bb      	cmp	r3, r7
  402d64:	d1f5      	bne.n	402d52 <xTaskGenericCreate+0x1a2>
  402d66:	e76c      	b.n	402c42 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  402d68:	4b19      	ldr	r3, [pc, #100]	; (402dd0 <xTaskGenericCreate+0x220>)
  402d6a:	681b      	ldr	r3, [r3, #0]
  402d6c:	2b00      	cmp	r3, #0
  402d6e:	d1bb      	bne.n	402ce8 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  402d70:	4b0a      	ldr	r3, [pc, #40]	; (402d9c <xTaskGenericCreate+0x1ec>)
  402d72:	681b      	ldr	r3, [r3, #0]
  402d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402d76:	429d      	cmp	r5, r3
  402d78:	d3b6      	bcc.n	402ce8 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  402d7a:	4b08      	ldr	r3, [pc, #32]	; (402d9c <xTaskGenericCreate+0x1ec>)
  402d7c:	601c      	str	r4, [r3, #0]
  402d7e:	e7b3      	b.n	402ce8 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  402d80:	2001      	movs	r0, #1
  402d82:	e7d9      	b.n	402d38 <xTaskGenericCreate+0x188>
  402d84:	2001      	movs	r0, #1
	return xReturn;
  402d86:	e7d7      	b.n	402d38 <xTaskGenericCreate+0x188>
  402d88:	00402275 	.word	0x00402275
  402d8c:	00404851 	.word	0x00404851
  402d90:	00401fcd 	.word	0x00401fcd
  402d94:	00402019 	.word	0x00402019
  402d98:	2040c694 	.word	0x2040c694
  402d9c:	2040c624 	.word	0x2040c624
  402da0:	2040c630 	.word	0x2040c630
  402da4:	00401ecd 	.word	0x00401ecd
  402da8:	2040c6c0 	.word	0x2040c6c0
  402dac:	2040c6dc 	.word	0x2040c6dc
  402db0:	2040c708 	.word	0x2040c708
  402db4:	2040c6f4 	.word	0x2040c6f4
  402db8:	2040c628 	.word	0x2040c628
  402dbc:	2040c62c 	.word	0x2040c62c
  402dc0:	2040c6a0 	.word	0x2040c6a0
  402dc4:	2040c6a8 	.word	0x2040c6a8
  402dc8:	00401ee9 	.word	0x00401ee9
  402dcc:	00402065 	.word	0x00402065
  402dd0:	2040c6f0 	.word	0x2040c6f0
  402dd4:	e000ed04 	.word	0xe000ed04
  402dd8:	004022e5 	.word	0x004022e5
  402ddc:	00401ee3 	.word	0x00401ee3
  402de0:	2040c6ac 	.word	0x2040c6ac

00402de4 <vTaskStartScheduler>:
{
  402de4:	b510      	push	{r4, lr}
  402de6:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402de8:	2300      	movs	r3, #0
  402dea:	9303      	str	r3, [sp, #12]
  402dec:	9302      	str	r3, [sp, #8]
  402dee:	9301      	str	r3, [sp, #4]
  402df0:	9300      	str	r3, [sp, #0]
  402df2:	2282      	movs	r2, #130	; 0x82
  402df4:	4916      	ldr	r1, [pc, #88]	; (402e50 <vTaskStartScheduler+0x6c>)
  402df6:	4817      	ldr	r0, [pc, #92]	; (402e54 <vTaskStartScheduler+0x70>)
  402df8:	4c17      	ldr	r4, [pc, #92]	; (402e58 <vTaskStartScheduler+0x74>)
  402dfa:	47a0      	blx	r4
		if( xReturn == pdPASS )
  402dfc:	2801      	cmp	r0, #1
  402dfe:	d00b      	beq.n	402e18 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  402e00:	bb20      	cbnz	r0, 402e4c <vTaskStartScheduler+0x68>
  402e02:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e06:	b672      	cpsid	i
  402e08:	f383 8811 	msr	BASEPRI, r3
  402e0c:	f3bf 8f6f 	isb	sy
  402e10:	f3bf 8f4f 	dsb	sy
  402e14:	b662      	cpsie	i
  402e16:	e7fe      	b.n	402e16 <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  402e18:	4b10      	ldr	r3, [pc, #64]	; (402e5c <vTaskStartScheduler+0x78>)
  402e1a:	4798      	blx	r3
	if( xReturn == pdPASS )
  402e1c:	2801      	cmp	r0, #1
  402e1e:	d1ef      	bne.n	402e00 <vTaskStartScheduler+0x1c>
  402e20:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e24:	b672      	cpsid	i
  402e26:	f383 8811 	msr	BASEPRI, r3
  402e2a:	f3bf 8f6f 	isb	sy
  402e2e:	f3bf 8f4f 	dsb	sy
  402e32:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402e34:	f04f 32ff 	mov.w	r2, #4294967295
  402e38:	4b09      	ldr	r3, [pc, #36]	; (402e60 <vTaskStartScheduler+0x7c>)
  402e3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  402e3c:	2201      	movs	r2, #1
  402e3e:	4b09      	ldr	r3, [pc, #36]	; (402e64 <vTaskStartScheduler+0x80>)
  402e40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402e42:	2200      	movs	r2, #0
  402e44:	4b08      	ldr	r3, [pc, #32]	; (402e68 <vTaskStartScheduler+0x84>)
  402e46:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  402e48:	4b08      	ldr	r3, [pc, #32]	; (402e6c <vTaskStartScheduler+0x88>)
  402e4a:	4798      	blx	r3
}
  402e4c:	b004      	add	sp, #16
  402e4e:	bd10      	pop	{r4, pc}
  402e50:	004070d8 	.word	0x004070d8
  402e54:	00403189 	.word	0x00403189
  402e58:	00402bb1 	.word	0x00402bb1
  402e5c:	004037c9 	.word	0x004037c9
  402e60:	2040c6d4 	.word	0x2040c6d4
  402e64:	2040c6f0 	.word	0x2040c6f0
  402e68:	2040c71c 	.word	0x2040c71c
  402e6c:	0040214d 	.word	0x0040214d

00402e70 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402e70:	4a02      	ldr	r2, [pc, #8]	; (402e7c <vTaskSuspendAll+0xc>)
  402e72:	6813      	ldr	r3, [r2, #0]
  402e74:	3301      	adds	r3, #1
  402e76:	6013      	str	r3, [r2, #0]
  402e78:	4770      	bx	lr
  402e7a:	bf00      	nop
  402e7c:	2040c69c 	.word	0x2040c69c

00402e80 <xTaskGetTickCount>:
		xTicks = xTickCount;
  402e80:	4b01      	ldr	r3, [pc, #4]	; (402e88 <xTaskGetTickCount+0x8>)
  402e82:	6818      	ldr	r0, [r3, #0]
}
  402e84:	4770      	bx	lr
  402e86:	bf00      	nop
  402e88:	2040c71c 	.word	0x2040c71c

00402e8c <xTaskIncrementTick>:
{
  402e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402e90:	4b42      	ldr	r3, [pc, #264]	; (402f9c <xTaskIncrementTick+0x110>)
  402e92:	681b      	ldr	r3, [r3, #0]
  402e94:	2b00      	cmp	r3, #0
  402e96:	d178      	bne.n	402f8a <xTaskIncrementTick+0xfe>
		++xTickCount;
  402e98:	4b41      	ldr	r3, [pc, #260]	; (402fa0 <xTaskIncrementTick+0x114>)
  402e9a:	681a      	ldr	r2, [r3, #0]
  402e9c:	3201      	adds	r2, #1
  402e9e:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  402ea0:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  402ea2:	b9d6      	cbnz	r6, 402eda <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  402ea4:	4b3f      	ldr	r3, [pc, #252]	; (402fa4 <xTaskIncrementTick+0x118>)
  402ea6:	681b      	ldr	r3, [r3, #0]
  402ea8:	681b      	ldr	r3, [r3, #0]
  402eaa:	b153      	cbz	r3, 402ec2 <xTaskIncrementTick+0x36>
  402eac:	f04f 0380 	mov.w	r3, #128	; 0x80
  402eb0:	b672      	cpsid	i
  402eb2:	f383 8811 	msr	BASEPRI, r3
  402eb6:	f3bf 8f6f 	isb	sy
  402eba:	f3bf 8f4f 	dsb	sy
  402ebe:	b662      	cpsie	i
  402ec0:	e7fe      	b.n	402ec0 <xTaskIncrementTick+0x34>
  402ec2:	4a38      	ldr	r2, [pc, #224]	; (402fa4 <xTaskIncrementTick+0x118>)
  402ec4:	6811      	ldr	r1, [r2, #0]
  402ec6:	4b38      	ldr	r3, [pc, #224]	; (402fa8 <xTaskIncrementTick+0x11c>)
  402ec8:	6818      	ldr	r0, [r3, #0]
  402eca:	6010      	str	r0, [r2, #0]
  402ecc:	6019      	str	r1, [r3, #0]
  402ece:	4a37      	ldr	r2, [pc, #220]	; (402fac <xTaskIncrementTick+0x120>)
  402ed0:	6813      	ldr	r3, [r2, #0]
  402ed2:	3301      	adds	r3, #1
  402ed4:	6013      	str	r3, [r2, #0]
  402ed6:	4b36      	ldr	r3, [pc, #216]	; (402fb0 <xTaskIncrementTick+0x124>)
  402ed8:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  402eda:	4b36      	ldr	r3, [pc, #216]	; (402fb4 <xTaskIncrementTick+0x128>)
  402edc:	681b      	ldr	r3, [r3, #0]
  402ede:	429e      	cmp	r6, r3
  402ee0:	d218      	bcs.n	402f14 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  402ee2:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402ee4:	4b34      	ldr	r3, [pc, #208]	; (402fb8 <xTaskIncrementTick+0x12c>)
  402ee6:	681b      	ldr	r3, [r3, #0]
  402ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402eea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402eee:	4a33      	ldr	r2, [pc, #204]	; (402fbc <xTaskIncrementTick+0x130>)
  402ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  402ef4:	2b02      	cmp	r3, #2
  402ef6:	bf28      	it	cs
  402ef8:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  402efa:	4b31      	ldr	r3, [pc, #196]	; (402fc0 <xTaskIncrementTick+0x134>)
  402efc:	681b      	ldr	r3, [r3, #0]
  402efe:	b90b      	cbnz	r3, 402f04 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  402f00:	4b30      	ldr	r3, [pc, #192]	; (402fc4 <xTaskIncrementTick+0x138>)
  402f02:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402f04:	4b30      	ldr	r3, [pc, #192]	; (402fc8 <xTaskIncrementTick+0x13c>)
  402f06:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402f08:	2b00      	cmp	r3, #0
}
  402f0a:	bf0c      	ite	eq
  402f0c:	4620      	moveq	r0, r4
  402f0e:	2001      	movne	r0, #1
  402f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402f14:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402f16:	f8df 908c 	ldr.w	r9, [pc, #140]	; 402fa4 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402f1a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 402fd4 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  402f1e:	4f2b      	ldr	r7, [pc, #172]	; (402fcc <xTaskIncrementTick+0x140>)
  402f20:	e01f      	b.n	402f62 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  402f22:	f04f 32ff 	mov.w	r2, #4294967295
  402f26:	4b23      	ldr	r3, [pc, #140]	; (402fb4 <xTaskIncrementTick+0x128>)
  402f28:	601a      	str	r2, [r3, #0]
						break;
  402f2a:	e7db      	b.n	402ee4 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  402f2c:	4a21      	ldr	r2, [pc, #132]	; (402fb4 <xTaskIncrementTick+0x128>)
  402f2e:	6013      	str	r3, [r2, #0]
							break;
  402f30:	e7d8      	b.n	402ee4 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402f32:	f105 0018 	add.w	r0, r5, #24
  402f36:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  402f38:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  402f3a:	683a      	ldr	r2, [r7, #0]
  402f3c:	2301      	movs	r3, #1
  402f3e:	4083      	lsls	r3, r0
  402f40:	4313      	orrs	r3, r2
  402f42:	603b      	str	r3, [r7, #0]
  402f44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402f48:	4651      	mov	r1, sl
  402f4a:	4b1c      	ldr	r3, [pc, #112]	; (402fbc <xTaskIncrementTick+0x130>)
  402f4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402f50:	4b1f      	ldr	r3, [pc, #124]	; (402fd0 <xTaskIncrementTick+0x144>)
  402f52:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402f54:	4b18      	ldr	r3, [pc, #96]	; (402fb8 <xTaskIncrementTick+0x12c>)
  402f56:	681b      	ldr	r3, [r3, #0]
  402f58:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  402f5c:	429a      	cmp	r2, r3
  402f5e:	bf28      	it	cs
  402f60:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402f62:	f8d9 3000 	ldr.w	r3, [r9]
  402f66:	681b      	ldr	r3, [r3, #0]
  402f68:	2b00      	cmp	r3, #0
  402f6a:	d0da      	beq.n	402f22 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402f6c:	f8d9 3000 	ldr.w	r3, [r9]
  402f70:	68db      	ldr	r3, [r3, #12]
  402f72:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  402f74:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  402f76:	429e      	cmp	r6, r3
  402f78:	d3d8      	bcc.n	402f2c <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402f7a:	f105 0a04 	add.w	sl, r5, #4
  402f7e:	4650      	mov	r0, sl
  402f80:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  402f82:	6aab      	ldr	r3, [r5, #40]	; 0x28
  402f84:	2b00      	cmp	r3, #0
  402f86:	d1d4      	bne.n	402f32 <xTaskIncrementTick+0xa6>
  402f88:	e7d6      	b.n	402f38 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  402f8a:	4a0d      	ldr	r2, [pc, #52]	; (402fc0 <xTaskIncrementTick+0x134>)
  402f8c:	6813      	ldr	r3, [r2, #0]
  402f8e:	3301      	adds	r3, #1
  402f90:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  402f92:	4b0c      	ldr	r3, [pc, #48]	; (402fc4 <xTaskIncrementTick+0x138>)
  402f94:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  402f96:	2400      	movs	r4, #0
  402f98:	e7b4      	b.n	402f04 <xTaskIncrementTick+0x78>
  402f9a:	bf00      	nop
  402f9c:	2040c69c 	.word	0x2040c69c
  402fa0:	2040c71c 	.word	0x2040c71c
  402fa4:	2040c628 	.word	0x2040c628
  402fa8:	2040c62c 	.word	0x2040c62c
  402fac:	2040c6d8 	.word	0x2040c6d8
  402fb0:	00402b2d 	.word	0x00402b2d
  402fb4:	2040c6d4 	.word	0x2040c6d4
  402fb8:	2040c624 	.word	0x2040c624
  402fbc:	2040c630 	.word	0x2040c630
  402fc0:	2040c698 	.word	0x2040c698
  402fc4:	00403d21 	.word	0x00403d21
  402fc8:	2040c720 	.word	0x2040c720
  402fcc:	2040c6a8 	.word	0x2040c6a8
  402fd0:	00401ee9 	.word	0x00401ee9
  402fd4:	00401f35 	.word	0x00401f35

00402fd8 <xTaskResumeAll>:
{
  402fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  402fdc:	4b38      	ldr	r3, [pc, #224]	; (4030c0 <xTaskResumeAll+0xe8>)
  402fde:	681b      	ldr	r3, [r3, #0]
  402fe0:	b953      	cbnz	r3, 402ff8 <xTaskResumeAll+0x20>
  402fe2:	f04f 0380 	mov.w	r3, #128	; 0x80
  402fe6:	b672      	cpsid	i
  402fe8:	f383 8811 	msr	BASEPRI, r3
  402fec:	f3bf 8f6f 	isb	sy
  402ff0:	f3bf 8f4f 	dsb	sy
  402ff4:	b662      	cpsie	i
  402ff6:	e7fe      	b.n	402ff6 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  402ff8:	4b32      	ldr	r3, [pc, #200]	; (4030c4 <xTaskResumeAll+0xec>)
  402ffa:	4798      	blx	r3
		--uxSchedulerSuspended;
  402ffc:	4b30      	ldr	r3, [pc, #192]	; (4030c0 <xTaskResumeAll+0xe8>)
  402ffe:	681a      	ldr	r2, [r3, #0]
  403000:	3a01      	subs	r2, #1
  403002:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403004:	681b      	ldr	r3, [r3, #0]
  403006:	2b00      	cmp	r3, #0
  403008:	d155      	bne.n	4030b6 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  40300a:	4b2f      	ldr	r3, [pc, #188]	; (4030c8 <xTaskResumeAll+0xf0>)
  40300c:	681b      	ldr	r3, [r3, #0]
  40300e:	2b00      	cmp	r3, #0
  403010:	d132      	bne.n	403078 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  403012:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  403014:	4b2d      	ldr	r3, [pc, #180]	; (4030cc <xTaskResumeAll+0xf4>)
  403016:	4798      	blx	r3
}
  403018:	4620      	mov	r0, r4
  40301a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  40301e:	68fb      	ldr	r3, [r7, #12]
  403020:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  403022:	f104 0018 	add.w	r0, r4, #24
  403026:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  403028:	f104 0804 	add.w	r8, r4, #4
  40302c:	4640      	mov	r0, r8
  40302e:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  403030:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  403032:	682a      	ldr	r2, [r5, #0]
  403034:	2301      	movs	r3, #1
  403036:	4083      	lsls	r3, r0
  403038:	4313      	orrs	r3, r2
  40303a:	602b      	str	r3, [r5, #0]
  40303c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403040:	4641      	mov	r1, r8
  403042:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  403046:	4b22      	ldr	r3, [pc, #136]	; (4030d0 <xTaskResumeAll+0xf8>)
  403048:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40304a:	4b22      	ldr	r3, [pc, #136]	; (4030d4 <xTaskResumeAll+0xfc>)
  40304c:	681b      	ldr	r3, [r3, #0]
  40304e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  403050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403052:	429a      	cmp	r2, r3
  403054:	d20c      	bcs.n	403070 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  403056:	683b      	ldr	r3, [r7, #0]
  403058:	2b00      	cmp	r3, #0
  40305a:	d1e0      	bne.n	40301e <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  40305c:	4b1e      	ldr	r3, [pc, #120]	; (4030d8 <xTaskResumeAll+0x100>)
  40305e:	681b      	ldr	r3, [r3, #0]
  403060:	b1db      	cbz	r3, 40309a <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  403062:	4b1d      	ldr	r3, [pc, #116]	; (4030d8 <xTaskResumeAll+0x100>)
  403064:	681b      	ldr	r3, [r3, #0]
  403066:	b1c3      	cbz	r3, 40309a <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  403068:	4e1c      	ldr	r6, [pc, #112]	; (4030dc <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  40306a:	4d1d      	ldr	r5, [pc, #116]	; (4030e0 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  40306c:	4c1a      	ldr	r4, [pc, #104]	; (4030d8 <xTaskResumeAll+0x100>)
  40306e:	e00e      	b.n	40308e <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  403070:	2201      	movs	r2, #1
  403072:	4b1b      	ldr	r3, [pc, #108]	; (4030e0 <xTaskResumeAll+0x108>)
  403074:	601a      	str	r2, [r3, #0]
  403076:	e7ee      	b.n	403056 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  403078:	4f1a      	ldr	r7, [pc, #104]	; (4030e4 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40307a:	4e1b      	ldr	r6, [pc, #108]	; (4030e8 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  40307c:	4d1b      	ldr	r5, [pc, #108]	; (4030ec <xTaskResumeAll+0x114>)
  40307e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4030f4 <xTaskResumeAll+0x11c>
  403082:	e7e8      	b.n	403056 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  403084:	6823      	ldr	r3, [r4, #0]
  403086:	3b01      	subs	r3, #1
  403088:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40308a:	6823      	ldr	r3, [r4, #0]
  40308c:	b12b      	cbz	r3, 40309a <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  40308e:	47b0      	blx	r6
  403090:	2800      	cmp	r0, #0
  403092:	d0f7      	beq.n	403084 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  403094:	2301      	movs	r3, #1
  403096:	602b      	str	r3, [r5, #0]
  403098:	e7f4      	b.n	403084 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  40309a:	4b11      	ldr	r3, [pc, #68]	; (4030e0 <xTaskResumeAll+0x108>)
  40309c:	681b      	ldr	r3, [r3, #0]
  40309e:	2b01      	cmp	r3, #1
  4030a0:	d10b      	bne.n	4030ba <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  4030a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4030a6:	4b12      	ldr	r3, [pc, #72]	; (4030f0 <xTaskResumeAll+0x118>)
  4030a8:	601a      	str	r2, [r3, #0]
  4030aa:	f3bf 8f4f 	dsb	sy
  4030ae:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4030b2:	2401      	movs	r4, #1
  4030b4:	e7ae      	b.n	403014 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  4030b6:	2400      	movs	r4, #0
  4030b8:	e7ac      	b.n	403014 <xTaskResumeAll+0x3c>
  4030ba:	2400      	movs	r4, #0
  4030bc:	e7aa      	b.n	403014 <xTaskResumeAll+0x3c>
  4030be:	bf00      	nop
  4030c0:	2040c69c 	.word	0x2040c69c
  4030c4:	00402019 	.word	0x00402019
  4030c8:	2040c694 	.word	0x2040c694
  4030cc:	00402065 	.word	0x00402065
  4030d0:	00401ee9 	.word	0x00401ee9
  4030d4:	2040c624 	.word	0x2040c624
  4030d8:	2040c698 	.word	0x2040c698
  4030dc:	00402e8d 	.word	0x00402e8d
  4030e0:	2040c720 	.word	0x2040c720
  4030e4:	2040c6dc 	.word	0x2040c6dc
  4030e8:	00401f35 	.word	0x00401f35
  4030ec:	2040c6a8 	.word	0x2040c6a8
  4030f0:	e000ed04 	.word	0xe000ed04
  4030f4:	2040c630 	.word	0x2040c630

004030f8 <vTaskDelay>:
	{
  4030f8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  4030fa:	2800      	cmp	r0, #0
  4030fc:	d029      	beq.n	403152 <vTaskDelay+0x5a>
  4030fe:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  403100:	4b18      	ldr	r3, [pc, #96]	; (403164 <vTaskDelay+0x6c>)
  403102:	681b      	ldr	r3, [r3, #0]
  403104:	b153      	cbz	r3, 40311c <vTaskDelay+0x24>
  403106:	f04f 0380 	mov.w	r3, #128	; 0x80
  40310a:	b672      	cpsid	i
  40310c:	f383 8811 	msr	BASEPRI, r3
  403110:	f3bf 8f6f 	isb	sy
  403114:	f3bf 8f4f 	dsb	sy
  403118:	b662      	cpsie	i
  40311a:	e7fe      	b.n	40311a <vTaskDelay+0x22>
			vTaskSuspendAll();
  40311c:	4b12      	ldr	r3, [pc, #72]	; (403168 <vTaskDelay+0x70>)
  40311e:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  403120:	4b12      	ldr	r3, [pc, #72]	; (40316c <vTaskDelay+0x74>)
  403122:	681b      	ldr	r3, [r3, #0]
  403124:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403126:	4b12      	ldr	r3, [pc, #72]	; (403170 <vTaskDelay+0x78>)
  403128:	6818      	ldr	r0, [r3, #0]
  40312a:	3004      	adds	r0, #4
  40312c:	4b11      	ldr	r3, [pc, #68]	; (403174 <vTaskDelay+0x7c>)
  40312e:	4798      	blx	r3
  403130:	b948      	cbnz	r0, 403146 <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  403132:	4b0f      	ldr	r3, [pc, #60]	; (403170 <vTaskDelay+0x78>)
  403134:	681a      	ldr	r2, [r3, #0]
  403136:	4910      	ldr	r1, [pc, #64]	; (403178 <vTaskDelay+0x80>)
  403138:	680b      	ldr	r3, [r1, #0]
  40313a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40313c:	2201      	movs	r2, #1
  40313e:	4082      	lsls	r2, r0
  403140:	ea23 0302 	bic.w	r3, r3, r2
  403144:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  403146:	4620      	mov	r0, r4
  403148:	4b0c      	ldr	r3, [pc, #48]	; (40317c <vTaskDelay+0x84>)
  40314a:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  40314c:	4b0c      	ldr	r3, [pc, #48]	; (403180 <vTaskDelay+0x88>)
  40314e:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  403150:	b938      	cbnz	r0, 403162 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  403152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403156:	4b0b      	ldr	r3, [pc, #44]	; (403184 <vTaskDelay+0x8c>)
  403158:	601a      	str	r2, [r3, #0]
  40315a:	f3bf 8f4f 	dsb	sy
  40315e:	f3bf 8f6f 	isb	sy
  403162:	bd10      	pop	{r4, pc}
  403164:	2040c69c 	.word	0x2040c69c
  403168:	00402e71 	.word	0x00402e71
  40316c:	2040c71c 	.word	0x2040c71c
  403170:	2040c624 	.word	0x2040c624
  403174:	00401f35 	.word	0x00401f35
  403178:	2040c6a8 	.word	0x2040c6a8
  40317c:	00402b59 	.word	0x00402b59
  403180:	00402fd9 	.word	0x00402fd9
  403184:	e000ed04 	.word	0xe000ed04

00403188 <prvIdleTask>:
{
  403188:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  40318a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 403214 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40318e:	4e19      	ldr	r6, [pc, #100]	; (4031f4 <prvIdleTask+0x6c>)
				taskYIELD();
  403190:	f8df 9084 	ldr.w	r9, [pc, #132]	; 403218 <prvIdleTask+0x90>
  403194:	e02a      	b.n	4031ec <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  403196:	4b18      	ldr	r3, [pc, #96]	; (4031f8 <prvIdleTask+0x70>)
  403198:	681b      	ldr	r3, [r3, #0]
  40319a:	2b01      	cmp	r3, #1
  40319c:	d81e      	bhi.n	4031dc <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40319e:	682b      	ldr	r3, [r5, #0]
  4031a0:	2b00      	cmp	r3, #0
  4031a2:	d0f8      	beq.n	403196 <prvIdleTask+0xe>
			vTaskSuspendAll();
  4031a4:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4031a6:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  4031a8:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  4031aa:	2c00      	cmp	r4, #0
  4031ac:	d0f7      	beq.n	40319e <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  4031ae:	4b13      	ldr	r3, [pc, #76]	; (4031fc <prvIdleTask+0x74>)
  4031b0:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4031b2:	68f3      	ldr	r3, [r6, #12]
  4031b4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4031b6:	1d20      	adds	r0, r4, #4
  4031b8:	4b11      	ldr	r3, [pc, #68]	; (403200 <prvIdleTask+0x78>)
  4031ba:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4031bc:	4a11      	ldr	r2, [pc, #68]	; (403204 <prvIdleTask+0x7c>)
  4031be:	6813      	ldr	r3, [r2, #0]
  4031c0:	3b01      	subs	r3, #1
  4031c2:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4031c4:	682b      	ldr	r3, [r5, #0]
  4031c6:	3b01      	subs	r3, #1
  4031c8:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  4031ca:	4b0f      	ldr	r3, [pc, #60]	; (403208 <prvIdleTask+0x80>)
  4031cc:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  4031ce:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4031d0:	f8df a048 	ldr.w	sl, [pc, #72]	; 40321c <prvIdleTask+0x94>
  4031d4:	47d0      	blx	sl
		vPortFree( pxTCB );
  4031d6:	4620      	mov	r0, r4
  4031d8:	47d0      	blx	sl
  4031da:	e7e0      	b.n	40319e <prvIdleTask+0x16>
				taskYIELD();
  4031dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4031e0:	f8c9 3000 	str.w	r3, [r9]
  4031e4:	f3bf 8f4f 	dsb	sy
  4031e8:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4031ec:	4d07      	ldr	r5, [pc, #28]	; (40320c <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  4031ee:	4f08      	ldr	r7, [pc, #32]	; (403210 <prvIdleTask+0x88>)
  4031f0:	e7d5      	b.n	40319e <prvIdleTask+0x16>
  4031f2:	bf00      	nop
  4031f4:	2040c708 	.word	0x2040c708
  4031f8:	2040c630 	.word	0x2040c630
  4031fc:	00402019 	.word	0x00402019
  403200:	00401f35 	.word	0x00401f35
  403204:	2040c694 	.word	0x2040c694
  403208:	00402065 	.word	0x00402065
  40320c:	2040c6a4 	.word	0x2040c6a4
  403210:	00402fd9 	.word	0x00402fd9
  403214:	00402e71 	.word	0x00402e71
  403218:	e000ed04 	.word	0xe000ed04
  40321c:	004022e5 	.word	0x004022e5

00403220 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  403220:	4b2d      	ldr	r3, [pc, #180]	; (4032d8 <vTaskSwitchContext+0xb8>)
  403222:	681b      	ldr	r3, [r3, #0]
  403224:	2b00      	cmp	r3, #0
  403226:	d12c      	bne.n	403282 <vTaskSwitchContext+0x62>
{
  403228:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  40322a:	2200      	movs	r2, #0
  40322c:	4b2b      	ldr	r3, [pc, #172]	; (4032dc <vTaskSwitchContext+0xbc>)
  40322e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  403230:	4b2b      	ldr	r3, [pc, #172]	; (4032e0 <vTaskSwitchContext+0xc0>)
  403232:	681b      	ldr	r3, [r3, #0]
  403234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403236:	681a      	ldr	r2, [r3, #0]
  403238:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40323c:	d103      	bne.n	403246 <vTaskSwitchContext+0x26>
  40323e:	685a      	ldr	r2, [r3, #4]
  403240:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  403244:	d021      	beq.n	40328a <vTaskSwitchContext+0x6a>
  403246:	4b26      	ldr	r3, [pc, #152]	; (4032e0 <vTaskSwitchContext+0xc0>)
  403248:	6818      	ldr	r0, [r3, #0]
  40324a:	6819      	ldr	r1, [r3, #0]
  40324c:	3134      	adds	r1, #52	; 0x34
  40324e:	4b25      	ldr	r3, [pc, #148]	; (4032e4 <vTaskSwitchContext+0xc4>)
  403250:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  403252:	4b25      	ldr	r3, [pc, #148]	; (4032e8 <vTaskSwitchContext+0xc8>)
  403254:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  403256:	fab3 f383 	clz	r3, r3
  40325a:	b2db      	uxtb	r3, r3
  40325c:	f1c3 031f 	rsb	r3, r3, #31
  403260:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  403264:	4a21      	ldr	r2, [pc, #132]	; (4032ec <vTaskSwitchContext+0xcc>)
  403266:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40326a:	b9ba      	cbnz	r2, 40329c <vTaskSwitchContext+0x7c>
	__asm volatile
  40326c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403270:	b672      	cpsid	i
  403272:	f383 8811 	msr	BASEPRI, r3
  403276:	f3bf 8f6f 	isb	sy
  40327a:	f3bf 8f4f 	dsb	sy
  40327e:	b662      	cpsie	i
  403280:	e7fe      	b.n	403280 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  403282:	2201      	movs	r2, #1
  403284:	4b15      	ldr	r3, [pc, #84]	; (4032dc <vTaskSwitchContext+0xbc>)
  403286:	601a      	str	r2, [r3, #0]
  403288:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  40328a:	689a      	ldr	r2, [r3, #8]
  40328c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  403290:	d1d9      	bne.n	403246 <vTaskSwitchContext+0x26>
  403292:	68db      	ldr	r3, [r3, #12]
  403294:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  403298:	d1d5      	bne.n	403246 <vTaskSwitchContext+0x26>
  40329a:	e7da      	b.n	403252 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40329c:	4a13      	ldr	r2, [pc, #76]	; (4032ec <vTaskSwitchContext+0xcc>)
  40329e:	0099      	lsls	r1, r3, #2
  4032a0:	18c8      	adds	r0, r1, r3
  4032a2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4032a6:	6844      	ldr	r4, [r0, #4]
  4032a8:	6864      	ldr	r4, [r4, #4]
  4032aa:	6044      	str	r4, [r0, #4]
  4032ac:	4419      	add	r1, r3
  4032ae:	4602      	mov	r2, r0
  4032b0:	3208      	adds	r2, #8
  4032b2:	4294      	cmp	r4, r2
  4032b4:	d009      	beq.n	4032ca <vTaskSwitchContext+0xaa>
  4032b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4032ba:	4a0c      	ldr	r2, [pc, #48]	; (4032ec <vTaskSwitchContext+0xcc>)
  4032bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4032c0:	685b      	ldr	r3, [r3, #4]
  4032c2:	68da      	ldr	r2, [r3, #12]
  4032c4:	4b06      	ldr	r3, [pc, #24]	; (4032e0 <vTaskSwitchContext+0xc0>)
  4032c6:	601a      	str	r2, [r3, #0]
  4032c8:	bd10      	pop	{r4, pc}
  4032ca:	6860      	ldr	r0, [r4, #4]
  4032cc:	4a07      	ldr	r2, [pc, #28]	; (4032ec <vTaskSwitchContext+0xcc>)
  4032ce:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4032d2:	6050      	str	r0, [r2, #4]
  4032d4:	e7ef      	b.n	4032b6 <vTaskSwitchContext+0x96>
  4032d6:	bf00      	nop
  4032d8:	2040c69c 	.word	0x2040c69c
  4032dc:	2040c720 	.word	0x2040c720
  4032e0:	2040c624 	.word	0x2040c624
  4032e4:	00403d09 	.word	0x00403d09
  4032e8:	2040c6a8 	.word	0x2040c6a8
  4032ec:	2040c630 	.word	0x2040c630

004032f0 <vTaskPlaceOnEventList>:
{
  4032f0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  4032f2:	b1e0      	cbz	r0, 40332e <vTaskPlaceOnEventList+0x3e>
  4032f4:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4032f6:	4d17      	ldr	r5, [pc, #92]	; (403354 <vTaskPlaceOnEventList+0x64>)
  4032f8:	6829      	ldr	r1, [r5, #0]
  4032fa:	3118      	adds	r1, #24
  4032fc:	4b16      	ldr	r3, [pc, #88]	; (403358 <vTaskPlaceOnEventList+0x68>)
  4032fe:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403300:	6828      	ldr	r0, [r5, #0]
  403302:	3004      	adds	r0, #4
  403304:	4b15      	ldr	r3, [pc, #84]	; (40335c <vTaskPlaceOnEventList+0x6c>)
  403306:	4798      	blx	r3
  403308:	b940      	cbnz	r0, 40331c <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40330a:	682a      	ldr	r2, [r5, #0]
  40330c:	4914      	ldr	r1, [pc, #80]	; (403360 <vTaskPlaceOnEventList+0x70>)
  40330e:	680b      	ldr	r3, [r1, #0]
  403310:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  403312:	2201      	movs	r2, #1
  403314:	4082      	lsls	r2, r0
  403316:	ea23 0302 	bic.w	r3, r3, r2
  40331a:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  40331c:	f1b4 3fff 	cmp.w	r4, #4294967295
  403320:	d010      	beq.n	403344 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  403322:	4b10      	ldr	r3, [pc, #64]	; (403364 <vTaskPlaceOnEventList+0x74>)
  403324:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  403326:	4420      	add	r0, r4
  403328:	4b0f      	ldr	r3, [pc, #60]	; (403368 <vTaskPlaceOnEventList+0x78>)
  40332a:	4798      	blx	r3
  40332c:	bd38      	pop	{r3, r4, r5, pc}
  40332e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403332:	b672      	cpsid	i
  403334:	f383 8811 	msr	BASEPRI, r3
  403338:	f3bf 8f6f 	isb	sy
  40333c:	f3bf 8f4f 	dsb	sy
  403340:	b662      	cpsie	i
  403342:	e7fe      	b.n	403342 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  403344:	4b03      	ldr	r3, [pc, #12]	; (403354 <vTaskPlaceOnEventList+0x64>)
  403346:	6819      	ldr	r1, [r3, #0]
  403348:	3104      	adds	r1, #4
  40334a:	4808      	ldr	r0, [pc, #32]	; (40336c <vTaskPlaceOnEventList+0x7c>)
  40334c:	4b08      	ldr	r3, [pc, #32]	; (403370 <vTaskPlaceOnEventList+0x80>)
  40334e:	4798      	blx	r3
  403350:	bd38      	pop	{r3, r4, r5, pc}
  403352:	bf00      	nop
  403354:	2040c624 	.word	0x2040c624
  403358:	00401f01 	.word	0x00401f01
  40335c:	00401f35 	.word	0x00401f35
  403360:	2040c6a8 	.word	0x2040c6a8
  403364:	2040c71c 	.word	0x2040c71c
  403368:	00402b59 	.word	0x00402b59
  40336c:	2040c6f4 	.word	0x2040c6f4
  403370:	00401ee9 	.word	0x00401ee9

00403374 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  403374:	b1e8      	cbz	r0, 4033b2 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  403376:	b570      	push	{r4, r5, r6, lr}
  403378:	4615      	mov	r5, r2
  40337a:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40337c:	4e16      	ldr	r6, [pc, #88]	; (4033d8 <vTaskPlaceOnEventListRestricted+0x64>)
  40337e:	6831      	ldr	r1, [r6, #0]
  403380:	3118      	adds	r1, #24
  403382:	4b16      	ldr	r3, [pc, #88]	; (4033dc <vTaskPlaceOnEventListRestricted+0x68>)
  403384:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403386:	6830      	ldr	r0, [r6, #0]
  403388:	3004      	adds	r0, #4
  40338a:	4b15      	ldr	r3, [pc, #84]	; (4033e0 <vTaskPlaceOnEventListRestricted+0x6c>)
  40338c:	4798      	blx	r3
  40338e:	b940      	cbnz	r0, 4033a2 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  403390:	6832      	ldr	r2, [r6, #0]
  403392:	4914      	ldr	r1, [pc, #80]	; (4033e4 <vTaskPlaceOnEventListRestricted+0x70>)
  403394:	680b      	ldr	r3, [r1, #0]
  403396:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  403398:	2201      	movs	r2, #1
  40339a:	4082      	lsls	r2, r0
  40339c:	ea23 0302 	bic.w	r3, r3, r2
  4033a0:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  4033a2:	2d01      	cmp	r5, #1
  4033a4:	d010      	beq.n	4033c8 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  4033a6:	4b10      	ldr	r3, [pc, #64]	; (4033e8 <vTaskPlaceOnEventListRestricted+0x74>)
  4033a8:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4033aa:	4420      	add	r0, r4
  4033ac:	4b0f      	ldr	r3, [pc, #60]	; (4033ec <vTaskPlaceOnEventListRestricted+0x78>)
  4033ae:	4798      	blx	r3
  4033b0:	bd70      	pop	{r4, r5, r6, pc}
  4033b2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4033b6:	b672      	cpsid	i
  4033b8:	f383 8811 	msr	BASEPRI, r3
  4033bc:	f3bf 8f6f 	isb	sy
  4033c0:	f3bf 8f4f 	dsb	sy
  4033c4:	b662      	cpsie	i
  4033c6:	e7fe      	b.n	4033c6 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4033c8:	4b03      	ldr	r3, [pc, #12]	; (4033d8 <vTaskPlaceOnEventListRestricted+0x64>)
  4033ca:	6819      	ldr	r1, [r3, #0]
  4033cc:	3104      	adds	r1, #4
  4033ce:	4808      	ldr	r0, [pc, #32]	; (4033f0 <vTaskPlaceOnEventListRestricted+0x7c>)
  4033d0:	4b02      	ldr	r3, [pc, #8]	; (4033dc <vTaskPlaceOnEventListRestricted+0x68>)
  4033d2:	4798      	blx	r3
  4033d4:	bd70      	pop	{r4, r5, r6, pc}
  4033d6:	bf00      	nop
  4033d8:	2040c624 	.word	0x2040c624
  4033dc:	00401ee9 	.word	0x00401ee9
  4033e0:	00401f35 	.word	0x00401f35
  4033e4:	2040c6a8 	.word	0x2040c6a8
  4033e8:	2040c71c 	.word	0x2040c71c
  4033ec:	00402b59 	.word	0x00402b59
  4033f0:	2040c6f4 	.word	0x2040c6f4

004033f4 <xTaskRemoveFromEventList>:
{
  4033f4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4033f6:	68c3      	ldr	r3, [r0, #12]
  4033f8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4033fa:	b324      	cbz	r4, 403446 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4033fc:	f104 0518 	add.w	r5, r4, #24
  403400:	4628      	mov	r0, r5
  403402:	4b1a      	ldr	r3, [pc, #104]	; (40346c <xTaskRemoveFromEventList+0x78>)
  403404:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403406:	4b1a      	ldr	r3, [pc, #104]	; (403470 <xTaskRemoveFromEventList+0x7c>)
  403408:	681b      	ldr	r3, [r3, #0]
  40340a:	bb3b      	cbnz	r3, 40345c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  40340c:	1d25      	adds	r5, r4, #4
  40340e:	4628      	mov	r0, r5
  403410:	4b16      	ldr	r3, [pc, #88]	; (40346c <xTaskRemoveFromEventList+0x78>)
  403412:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  403414:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  403416:	4a17      	ldr	r2, [pc, #92]	; (403474 <xTaskRemoveFromEventList+0x80>)
  403418:	6811      	ldr	r1, [r2, #0]
  40341a:	2301      	movs	r3, #1
  40341c:	4083      	lsls	r3, r0
  40341e:	430b      	orrs	r3, r1
  403420:	6013      	str	r3, [r2, #0]
  403422:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403426:	4629      	mov	r1, r5
  403428:	4b13      	ldr	r3, [pc, #76]	; (403478 <xTaskRemoveFromEventList+0x84>)
  40342a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40342e:	4b13      	ldr	r3, [pc, #76]	; (40347c <xTaskRemoveFromEventList+0x88>)
  403430:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  403432:	4b13      	ldr	r3, [pc, #76]	; (403480 <xTaskRemoveFromEventList+0x8c>)
  403434:	681b      	ldr	r3, [r3, #0]
  403436:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  403438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40343a:	429a      	cmp	r2, r3
  40343c:	d913      	bls.n	403466 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  40343e:	2001      	movs	r0, #1
  403440:	4b10      	ldr	r3, [pc, #64]	; (403484 <xTaskRemoveFromEventList+0x90>)
  403442:	6018      	str	r0, [r3, #0]
  403444:	bd38      	pop	{r3, r4, r5, pc}
  403446:	f04f 0380 	mov.w	r3, #128	; 0x80
  40344a:	b672      	cpsid	i
  40344c:	f383 8811 	msr	BASEPRI, r3
  403450:	f3bf 8f6f 	isb	sy
  403454:	f3bf 8f4f 	dsb	sy
  403458:	b662      	cpsie	i
  40345a:	e7fe      	b.n	40345a <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  40345c:	4629      	mov	r1, r5
  40345e:	480a      	ldr	r0, [pc, #40]	; (403488 <xTaskRemoveFromEventList+0x94>)
  403460:	4b06      	ldr	r3, [pc, #24]	; (40347c <xTaskRemoveFromEventList+0x88>)
  403462:	4798      	blx	r3
  403464:	e7e5      	b.n	403432 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  403466:	2000      	movs	r0, #0
}
  403468:	bd38      	pop	{r3, r4, r5, pc}
  40346a:	bf00      	nop
  40346c:	00401f35 	.word	0x00401f35
  403470:	2040c69c 	.word	0x2040c69c
  403474:	2040c6a8 	.word	0x2040c6a8
  403478:	2040c630 	.word	0x2040c630
  40347c:	00401ee9 	.word	0x00401ee9
  403480:	2040c624 	.word	0x2040c624
  403484:	2040c720 	.word	0x2040c720
  403488:	2040c6dc 	.word	0x2040c6dc

0040348c <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  40348c:	b130      	cbz	r0, 40349c <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40348e:	4a09      	ldr	r2, [pc, #36]	; (4034b4 <vTaskSetTimeOutState+0x28>)
  403490:	6812      	ldr	r2, [r2, #0]
  403492:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  403494:	4a08      	ldr	r2, [pc, #32]	; (4034b8 <vTaskSetTimeOutState+0x2c>)
  403496:	6812      	ldr	r2, [r2, #0]
  403498:	6042      	str	r2, [r0, #4]
  40349a:	4770      	bx	lr
  40349c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4034a0:	b672      	cpsid	i
  4034a2:	f383 8811 	msr	BASEPRI, r3
  4034a6:	f3bf 8f6f 	isb	sy
  4034aa:	f3bf 8f4f 	dsb	sy
  4034ae:	b662      	cpsie	i
  4034b0:	e7fe      	b.n	4034b0 <vTaskSetTimeOutState+0x24>
  4034b2:	bf00      	nop
  4034b4:	2040c6d8 	.word	0x2040c6d8
  4034b8:	2040c71c 	.word	0x2040c71c

004034bc <xTaskCheckForTimeOut>:
{
  4034bc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  4034be:	b1c0      	cbz	r0, 4034f2 <xTaskCheckForTimeOut+0x36>
  4034c0:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  4034c2:	b309      	cbz	r1, 403508 <xTaskCheckForTimeOut+0x4c>
  4034c4:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4034c6:	4b1d      	ldr	r3, [pc, #116]	; (40353c <xTaskCheckForTimeOut+0x80>)
  4034c8:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  4034ca:	4b1d      	ldr	r3, [pc, #116]	; (403540 <xTaskCheckForTimeOut+0x84>)
  4034cc:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  4034ce:	682b      	ldr	r3, [r5, #0]
  4034d0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4034d4:	d02e      	beq.n	403534 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4034d6:	491b      	ldr	r1, [pc, #108]	; (403544 <xTaskCheckForTimeOut+0x88>)
  4034d8:	6809      	ldr	r1, [r1, #0]
  4034da:	6820      	ldr	r0, [r4, #0]
  4034dc:	4288      	cmp	r0, r1
  4034de:	d002      	beq.n	4034e6 <xTaskCheckForTimeOut+0x2a>
  4034e0:	6861      	ldr	r1, [r4, #4]
  4034e2:	428a      	cmp	r2, r1
  4034e4:	d228      	bcs.n	403538 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  4034e6:	6861      	ldr	r1, [r4, #4]
  4034e8:	1a50      	subs	r0, r2, r1
  4034ea:	4283      	cmp	r3, r0
  4034ec:	d817      	bhi.n	40351e <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  4034ee:	2401      	movs	r4, #1
  4034f0:	e01c      	b.n	40352c <xTaskCheckForTimeOut+0x70>
  4034f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4034f6:	b672      	cpsid	i
  4034f8:	f383 8811 	msr	BASEPRI, r3
  4034fc:	f3bf 8f6f 	isb	sy
  403500:	f3bf 8f4f 	dsb	sy
  403504:	b662      	cpsie	i
  403506:	e7fe      	b.n	403506 <xTaskCheckForTimeOut+0x4a>
  403508:	f04f 0380 	mov.w	r3, #128	; 0x80
  40350c:	b672      	cpsid	i
  40350e:	f383 8811 	msr	BASEPRI, r3
  403512:	f3bf 8f6f 	isb	sy
  403516:	f3bf 8f4f 	dsb	sy
  40351a:	b662      	cpsie	i
  40351c:	e7fe      	b.n	40351c <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  40351e:	1a9b      	subs	r3, r3, r2
  403520:	440b      	add	r3, r1
  403522:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  403524:	4620      	mov	r0, r4
  403526:	4b08      	ldr	r3, [pc, #32]	; (403548 <xTaskCheckForTimeOut+0x8c>)
  403528:	4798      	blx	r3
			xReturn = pdFALSE;
  40352a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  40352c:	4b07      	ldr	r3, [pc, #28]	; (40354c <xTaskCheckForTimeOut+0x90>)
  40352e:	4798      	blx	r3
}
  403530:	4620      	mov	r0, r4
  403532:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  403534:	2400      	movs	r4, #0
  403536:	e7f9      	b.n	40352c <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  403538:	2401      	movs	r4, #1
  40353a:	e7f7      	b.n	40352c <xTaskCheckForTimeOut+0x70>
  40353c:	00402019 	.word	0x00402019
  403540:	2040c71c 	.word	0x2040c71c
  403544:	2040c6d8 	.word	0x2040c6d8
  403548:	0040348d 	.word	0x0040348d
  40354c:	00402065 	.word	0x00402065

00403550 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  403550:	2201      	movs	r2, #1
  403552:	4b01      	ldr	r3, [pc, #4]	; (403558 <vTaskMissedYield+0x8>)
  403554:	601a      	str	r2, [r3, #0]
  403556:	4770      	bx	lr
  403558:	2040c720 	.word	0x2040c720

0040355c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  40355c:	4b05      	ldr	r3, [pc, #20]	; (403574 <xTaskGetSchedulerState+0x18>)
  40355e:	681b      	ldr	r3, [r3, #0]
  403560:	b133      	cbz	r3, 403570 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403562:	4b05      	ldr	r3, [pc, #20]	; (403578 <xTaskGetSchedulerState+0x1c>)
  403564:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  403566:	2b00      	cmp	r3, #0
  403568:	bf0c      	ite	eq
  40356a:	2002      	moveq	r0, #2
  40356c:	2000      	movne	r0, #0
  40356e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  403570:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  403572:	4770      	bx	lr
  403574:	2040c6f0 	.word	0x2040c6f0
  403578:	2040c69c 	.word	0x2040c69c

0040357c <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  40357c:	2800      	cmp	r0, #0
  40357e:	d044      	beq.n	40360a <vTaskPriorityInherit+0x8e>
	{
  403580:	b538      	push	{r3, r4, r5, lr}
  403582:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  403584:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  403586:	4921      	ldr	r1, [pc, #132]	; (40360c <vTaskPriorityInherit+0x90>)
  403588:	6809      	ldr	r1, [r1, #0]
  40358a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  40358c:	428a      	cmp	r2, r1
  40358e:	d214      	bcs.n	4035ba <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  403590:	6981      	ldr	r1, [r0, #24]
  403592:	2900      	cmp	r1, #0
  403594:	db05      	blt.n	4035a2 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403596:	491d      	ldr	r1, [pc, #116]	; (40360c <vTaskPriorityInherit+0x90>)
  403598:	6809      	ldr	r1, [r1, #0]
  40359a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  40359c:	f1c1 0105 	rsb	r1, r1, #5
  4035a0:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4035a2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4035a6:	491a      	ldr	r1, [pc, #104]	; (403610 <vTaskPriorityInherit+0x94>)
  4035a8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4035ac:	6961      	ldr	r1, [r4, #20]
  4035ae:	4291      	cmp	r1, r2
  4035b0:	d004      	beq.n	4035bc <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4035b2:	4a16      	ldr	r2, [pc, #88]	; (40360c <vTaskPriorityInherit+0x90>)
  4035b4:	6812      	ldr	r2, [r2, #0]
  4035b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4035b8:	62e2      	str	r2, [r4, #44]	; 0x2c
  4035ba:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4035bc:	1d25      	adds	r5, r4, #4
  4035be:	4628      	mov	r0, r5
  4035c0:	4b14      	ldr	r3, [pc, #80]	; (403614 <vTaskPriorityInherit+0x98>)
  4035c2:	4798      	blx	r3
  4035c4:	b970      	cbnz	r0, 4035e4 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4035c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4035c8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4035cc:	4a10      	ldr	r2, [pc, #64]	; (403610 <vTaskPriorityInherit+0x94>)
  4035ce:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4035d2:	b93a      	cbnz	r2, 4035e4 <vTaskPriorityInherit+0x68>
  4035d4:	4810      	ldr	r0, [pc, #64]	; (403618 <vTaskPriorityInherit+0x9c>)
  4035d6:	6802      	ldr	r2, [r0, #0]
  4035d8:	2101      	movs	r1, #1
  4035da:	fa01 f303 	lsl.w	r3, r1, r3
  4035de:	ea22 0303 	bic.w	r3, r2, r3
  4035e2:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4035e4:	4b09      	ldr	r3, [pc, #36]	; (40360c <vTaskPriorityInherit+0x90>)
  4035e6:	681b      	ldr	r3, [r3, #0]
  4035e8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4035ea:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4035ec:	4a0a      	ldr	r2, [pc, #40]	; (403618 <vTaskPriorityInherit+0x9c>)
  4035ee:	6811      	ldr	r1, [r2, #0]
  4035f0:	2301      	movs	r3, #1
  4035f2:	4083      	lsls	r3, r0
  4035f4:	430b      	orrs	r3, r1
  4035f6:	6013      	str	r3, [r2, #0]
  4035f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4035fc:	4629      	mov	r1, r5
  4035fe:	4b04      	ldr	r3, [pc, #16]	; (403610 <vTaskPriorityInherit+0x94>)
  403600:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403604:	4b05      	ldr	r3, [pc, #20]	; (40361c <vTaskPriorityInherit+0xa0>)
  403606:	4798      	blx	r3
  403608:	bd38      	pop	{r3, r4, r5, pc}
  40360a:	4770      	bx	lr
  40360c:	2040c624 	.word	0x2040c624
  403610:	2040c630 	.word	0x2040c630
  403614:	00401f35 	.word	0x00401f35
  403618:	2040c6a8 	.word	0x2040c6a8
  40361c:	00401ee9 	.word	0x00401ee9

00403620 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  403620:	2800      	cmp	r0, #0
  403622:	d04d      	beq.n	4036c0 <xTaskPriorityDisinherit+0xa0>
	{
  403624:	b538      	push	{r3, r4, r5, lr}
  403626:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  403628:	4a27      	ldr	r2, [pc, #156]	; (4036c8 <xTaskPriorityDisinherit+0xa8>)
  40362a:	6812      	ldr	r2, [r2, #0]
  40362c:	4290      	cmp	r0, r2
  40362e:	d00a      	beq.n	403646 <xTaskPriorityDisinherit+0x26>
  403630:	f04f 0380 	mov.w	r3, #128	; 0x80
  403634:	b672      	cpsid	i
  403636:	f383 8811 	msr	BASEPRI, r3
  40363a:	f3bf 8f6f 	isb	sy
  40363e:	f3bf 8f4f 	dsb	sy
  403642:	b662      	cpsie	i
  403644:	e7fe      	b.n	403644 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  403646:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  403648:	b952      	cbnz	r2, 403660 <xTaskPriorityDisinherit+0x40>
  40364a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40364e:	b672      	cpsid	i
  403650:	f383 8811 	msr	BASEPRI, r3
  403654:	f3bf 8f6f 	isb	sy
  403658:	f3bf 8f4f 	dsb	sy
  40365c:	b662      	cpsie	i
  40365e:	e7fe      	b.n	40365e <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  403660:	3a01      	subs	r2, #1
  403662:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  403664:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  403666:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  403668:	4288      	cmp	r0, r1
  40366a:	d02b      	beq.n	4036c4 <xTaskPriorityDisinherit+0xa4>
  40366c:	bb52      	cbnz	r2, 4036c4 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40366e:	1d25      	adds	r5, r4, #4
  403670:	4628      	mov	r0, r5
  403672:	4b16      	ldr	r3, [pc, #88]	; (4036cc <xTaskPriorityDisinherit+0xac>)
  403674:	4798      	blx	r3
  403676:	b968      	cbnz	r0, 403694 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  403678:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  40367a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40367e:	4b14      	ldr	r3, [pc, #80]	; (4036d0 <xTaskPriorityDisinherit+0xb0>)
  403680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403684:	b933      	cbnz	r3, 403694 <xTaskPriorityDisinherit+0x74>
  403686:	4813      	ldr	r0, [pc, #76]	; (4036d4 <xTaskPriorityDisinherit+0xb4>)
  403688:	6803      	ldr	r3, [r0, #0]
  40368a:	2201      	movs	r2, #1
  40368c:	408a      	lsls	r2, r1
  40368e:	ea23 0302 	bic.w	r3, r3, r2
  403692:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  403694:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  403696:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403698:	f1c0 0305 	rsb	r3, r0, #5
  40369c:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  40369e:	4a0d      	ldr	r2, [pc, #52]	; (4036d4 <xTaskPriorityDisinherit+0xb4>)
  4036a0:	6811      	ldr	r1, [r2, #0]
  4036a2:	2401      	movs	r4, #1
  4036a4:	fa04 f300 	lsl.w	r3, r4, r0
  4036a8:	430b      	orrs	r3, r1
  4036aa:	6013      	str	r3, [r2, #0]
  4036ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4036b0:	4629      	mov	r1, r5
  4036b2:	4b07      	ldr	r3, [pc, #28]	; (4036d0 <xTaskPriorityDisinherit+0xb0>)
  4036b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4036b8:	4b07      	ldr	r3, [pc, #28]	; (4036d8 <xTaskPriorityDisinherit+0xb8>)
  4036ba:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  4036bc:	4620      	mov	r0, r4
  4036be:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  4036c0:	2000      	movs	r0, #0
  4036c2:	4770      	bx	lr
  4036c4:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4036c6:	bd38      	pop	{r3, r4, r5, pc}
  4036c8:	2040c624 	.word	0x2040c624
  4036cc:	00401f35 	.word	0x00401f35
  4036d0:	2040c630 	.word	0x2040c630
  4036d4:	2040c6a8 	.word	0x2040c6a8
  4036d8:	00401ee9 	.word	0x00401ee9

004036dc <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  4036dc:	4b05      	ldr	r3, [pc, #20]	; (4036f4 <pvTaskIncrementMutexHeldCount+0x18>)
  4036de:	681b      	ldr	r3, [r3, #0]
  4036e0:	b123      	cbz	r3, 4036ec <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  4036e2:	4b04      	ldr	r3, [pc, #16]	; (4036f4 <pvTaskIncrementMutexHeldCount+0x18>)
  4036e4:	681a      	ldr	r2, [r3, #0]
  4036e6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  4036e8:	3301      	adds	r3, #1
  4036ea:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  4036ec:	4b01      	ldr	r3, [pc, #4]	; (4036f4 <pvTaskIncrementMutexHeldCount+0x18>)
  4036ee:	6818      	ldr	r0, [r3, #0]
	}
  4036f0:	4770      	bx	lr
  4036f2:	bf00      	nop
  4036f4:	2040c624 	.word	0x2040c624

004036f8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  4036f8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  4036fa:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4036fc:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  4036fe:	4291      	cmp	r1, r2
  403700:	d80c      	bhi.n	40371c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  403702:	1ad2      	subs	r2, r2, r3
  403704:	6983      	ldr	r3, [r0, #24]
  403706:	429a      	cmp	r2, r3
  403708:	d301      	bcc.n	40370e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40370a:	2001      	movs	r0, #1
  40370c:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40370e:	1d01      	adds	r1, r0, #4
  403710:	4b09      	ldr	r3, [pc, #36]	; (403738 <prvInsertTimerInActiveList+0x40>)
  403712:	6818      	ldr	r0, [r3, #0]
  403714:	4b09      	ldr	r3, [pc, #36]	; (40373c <prvInsertTimerInActiveList+0x44>)
  403716:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  403718:	2000      	movs	r0, #0
  40371a:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  40371c:	429a      	cmp	r2, r3
  40371e:	d203      	bcs.n	403728 <prvInsertTimerInActiveList+0x30>
  403720:	4299      	cmp	r1, r3
  403722:	d301      	bcc.n	403728 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  403724:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  403726:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403728:	1d01      	adds	r1, r0, #4
  40372a:	4b05      	ldr	r3, [pc, #20]	; (403740 <prvInsertTimerInActiveList+0x48>)
  40372c:	6818      	ldr	r0, [r3, #0]
  40372e:	4b03      	ldr	r3, [pc, #12]	; (40373c <prvInsertTimerInActiveList+0x44>)
  403730:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  403732:	2000      	movs	r0, #0
  403734:	bd08      	pop	{r3, pc}
  403736:	bf00      	nop
  403738:	2040c728 	.word	0x2040c728
  40373c:	00401f01 	.word	0x00401f01
  403740:	2040c724 	.word	0x2040c724

00403744 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  403744:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  403746:	4b15      	ldr	r3, [pc, #84]	; (40379c <prvCheckForValidListAndQueue+0x58>)
  403748:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40374a:	4b15      	ldr	r3, [pc, #84]	; (4037a0 <prvCheckForValidListAndQueue+0x5c>)
  40374c:	681b      	ldr	r3, [r3, #0]
  40374e:	b113      	cbz	r3, 403756 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  403750:	4b14      	ldr	r3, [pc, #80]	; (4037a4 <prvCheckForValidListAndQueue+0x60>)
  403752:	4798      	blx	r3
  403754:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  403756:	4d14      	ldr	r5, [pc, #80]	; (4037a8 <prvCheckForValidListAndQueue+0x64>)
  403758:	4628      	mov	r0, r5
  40375a:	4e14      	ldr	r6, [pc, #80]	; (4037ac <prvCheckForValidListAndQueue+0x68>)
  40375c:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  40375e:	4c14      	ldr	r4, [pc, #80]	; (4037b0 <prvCheckForValidListAndQueue+0x6c>)
  403760:	4620      	mov	r0, r4
  403762:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  403764:	4b13      	ldr	r3, [pc, #76]	; (4037b4 <prvCheckForValidListAndQueue+0x70>)
  403766:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  403768:	4b13      	ldr	r3, [pc, #76]	; (4037b8 <prvCheckForValidListAndQueue+0x74>)
  40376a:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  40376c:	2200      	movs	r2, #0
  40376e:	2110      	movs	r1, #16
  403770:	2005      	movs	r0, #5
  403772:	4b12      	ldr	r3, [pc, #72]	; (4037bc <prvCheckForValidListAndQueue+0x78>)
  403774:	4798      	blx	r3
  403776:	4b0a      	ldr	r3, [pc, #40]	; (4037a0 <prvCheckForValidListAndQueue+0x5c>)
  403778:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  40377a:	b118      	cbz	r0, 403784 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  40377c:	4910      	ldr	r1, [pc, #64]	; (4037c0 <prvCheckForValidListAndQueue+0x7c>)
  40377e:	4b11      	ldr	r3, [pc, #68]	; (4037c4 <prvCheckForValidListAndQueue+0x80>)
  403780:	4798      	blx	r3
  403782:	e7e5      	b.n	403750 <prvCheckForValidListAndQueue+0xc>
  403784:	f04f 0380 	mov.w	r3, #128	; 0x80
  403788:	b672      	cpsid	i
  40378a:	f383 8811 	msr	BASEPRI, r3
  40378e:	f3bf 8f6f 	isb	sy
  403792:	f3bf 8f4f 	dsb	sy
  403796:	b662      	cpsie	i
  403798:	e7fe      	b.n	403798 <prvCheckForValidListAndQueue+0x54>
  40379a:	bf00      	nop
  40379c:	00402019 	.word	0x00402019
  4037a0:	2040c758 	.word	0x2040c758
  4037a4:	00402065 	.word	0x00402065
  4037a8:	2040c72c 	.word	0x2040c72c
  4037ac:	00401ecd 	.word	0x00401ecd
  4037b0:	2040c740 	.word	0x2040c740
  4037b4:	2040c724 	.word	0x2040c724
  4037b8:	2040c728 	.word	0x2040c728
  4037bc:	00402571 	.word	0x00402571
  4037c0:	004070e0 	.word	0x004070e0
  4037c4:	00402aa1 	.word	0x00402aa1

004037c8 <xTimerCreateTimerTask>:
{
  4037c8:	b510      	push	{r4, lr}
  4037ca:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  4037cc:	4b0f      	ldr	r3, [pc, #60]	; (40380c <xTimerCreateTimerTask+0x44>)
  4037ce:	4798      	blx	r3
	if( xTimerQueue != NULL )
  4037d0:	4b0f      	ldr	r3, [pc, #60]	; (403810 <xTimerCreateTimerTask+0x48>)
  4037d2:	681b      	ldr	r3, [r3, #0]
  4037d4:	b173      	cbz	r3, 4037f4 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4037d6:	2300      	movs	r3, #0
  4037d8:	9303      	str	r3, [sp, #12]
  4037da:	9302      	str	r3, [sp, #8]
  4037dc:	9301      	str	r3, [sp, #4]
  4037de:	2204      	movs	r2, #4
  4037e0:	9200      	str	r2, [sp, #0]
  4037e2:	f44f 7282 	mov.w	r2, #260	; 0x104
  4037e6:	490b      	ldr	r1, [pc, #44]	; (403814 <xTimerCreateTimerTask+0x4c>)
  4037e8:	480b      	ldr	r0, [pc, #44]	; (403818 <xTimerCreateTimerTask+0x50>)
  4037ea:	4c0c      	ldr	r4, [pc, #48]	; (40381c <xTimerCreateTimerTask+0x54>)
  4037ec:	47a0      	blx	r4
	configASSERT( xReturn );
  4037ee:	b108      	cbz	r0, 4037f4 <xTimerCreateTimerTask+0x2c>
}
  4037f0:	b004      	add	sp, #16
  4037f2:	bd10      	pop	{r4, pc}
  4037f4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4037f8:	b672      	cpsid	i
  4037fa:	f383 8811 	msr	BASEPRI, r3
  4037fe:	f3bf 8f6f 	isb	sy
  403802:	f3bf 8f4f 	dsb	sy
  403806:	b662      	cpsie	i
  403808:	e7fe      	b.n	403808 <xTimerCreateTimerTask+0x40>
  40380a:	bf00      	nop
  40380c:	00403745 	.word	0x00403745
  403810:	2040c758 	.word	0x2040c758
  403814:	004070e8 	.word	0x004070e8
  403818:	00403949 	.word	0x00403949
  40381c:	00402bb1 	.word	0x00402bb1

00403820 <xTimerGenericCommand>:
	configASSERT( xTimer );
  403820:	b1d8      	cbz	r0, 40385a <xTimerGenericCommand+0x3a>
{
  403822:	b530      	push	{r4, r5, lr}
  403824:	b085      	sub	sp, #20
  403826:	4615      	mov	r5, r2
  403828:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  40382a:	4a15      	ldr	r2, [pc, #84]	; (403880 <xTimerGenericCommand+0x60>)
  40382c:	6810      	ldr	r0, [r2, #0]
  40382e:	b320      	cbz	r0, 40387a <xTimerGenericCommand+0x5a>
  403830:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  403832:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  403834:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  403836:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  403838:	2905      	cmp	r1, #5
  40383a:	dc19      	bgt.n	403870 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  40383c:	4b11      	ldr	r3, [pc, #68]	; (403884 <xTimerGenericCommand+0x64>)
  40383e:	4798      	blx	r3
  403840:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  403842:	f04f 0300 	mov.w	r3, #0
  403846:	bf0c      	ite	eq
  403848:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40384a:	461a      	movne	r2, r3
  40384c:	4669      	mov	r1, sp
  40384e:	480c      	ldr	r0, [pc, #48]	; (403880 <xTimerGenericCommand+0x60>)
  403850:	6800      	ldr	r0, [r0, #0]
  403852:	4c0d      	ldr	r4, [pc, #52]	; (403888 <xTimerGenericCommand+0x68>)
  403854:	47a0      	blx	r4
}
  403856:	b005      	add	sp, #20
  403858:	bd30      	pop	{r4, r5, pc}
  40385a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40385e:	b672      	cpsid	i
  403860:	f383 8811 	msr	BASEPRI, r3
  403864:	f3bf 8f6f 	isb	sy
  403868:	f3bf 8f4f 	dsb	sy
  40386c:	b662      	cpsie	i
  40386e:	e7fe      	b.n	40386e <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  403870:	2300      	movs	r3, #0
  403872:	4669      	mov	r1, sp
  403874:	4c05      	ldr	r4, [pc, #20]	; (40388c <xTimerGenericCommand+0x6c>)
  403876:	47a0      	blx	r4
  403878:	e7ed      	b.n	403856 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  40387a:	2000      	movs	r0, #0
	return xReturn;
  40387c:	e7eb      	b.n	403856 <xTimerGenericCommand+0x36>
  40387e:	bf00      	nop
  403880:	2040c758 	.word	0x2040c758
  403884:	0040355d 	.word	0x0040355d
  403888:	004025ed 	.word	0x004025ed
  40388c:	004027d1 	.word	0x004027d1

00403890 <prvSampleTimeNow>:
{
  403890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403894:	b082      	sub	sp, #8
  403896:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  403898:	4b24      	ldr	r3, [pc, #144]	; (40392c <prvSampleTimeNow+0x9c>)
  40389a:	4798      	blx	r3
  40389c:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  40389e:	4b24      	ldr	r3, [pc, #144]	; (403930 <prvSampleTimeNow+0xa0>)
  4038a0:	681b      	ldr	r3, [r3, #0]
  4038a2:	4298      	cmp	r0, r3
  4038a4:	d31b      	bcc.n	4038de <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  4038a6:	2300      	movs	r3, #0
  4038a8:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  4038ac:	4b20      	ldr	r3, [pc, #128]	; (403930 <prvSampleTimeNow+0xa0>)
  4038ae:	601f      	str	r7, [r3, #0]
}
  4038b0:	4638      	mov	r0, r7
  4038b2:	b002      	add	sp, #8
  4038b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4038b8:	2100      	movs	r1, #0
  4038ba:	9100      	str	r1, [sp, #0]
  4038bc:	460b      	mov	r3, r1
  4038be:	4652      	mov	r2, sl
  4038c0:	4620      	mov	r0, r4
  4038c2:	4c1c      	ldr	r4, [pc, #112]	; (403934 <prvSampleTimeNow+0xa4>)
  4038c4:	47a0      	blx	r4
				configASSERT( xResult );
  4038c6:	b960      	cbnz	r0, 4038e2 <prvSampleTimeNow+0x52>
  4038c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4038cc:	b672      	cpsid	i
  4038ce:	f383 8811 	msr	BASEPRI, r3
  4038d2:	f3bf 8f6f 	isb	sy
  4038d6:	f3bf 8f4f 	dsb	sy
  4038da:	b662      	cpsie	i
  4038dc:	e7fe      	b.n	4038dc <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4038de:	4d16      	ldr	r5, [pc, #88]	; (403938 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4038e0:	4e16      	ldr	r6, [pc, #88]	; (40393c <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4038e2:	682b      	ldr	r3, [r5, #0]
  4038e4:	681a      	ldr	r2, [r3, #0]
  4038e6:	b1c2      	cbz	r2, 40391a <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4038e8:	68db      	ldr	r3, [r3, #12]
  4038ea:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4038ee:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4038f0:	f104 0904 	add.w	r9, r4, #4
  4038f4:	4648      	mov	r0, r9
  4038f6:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4038f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4038fa:	4620      	mov	r0, r4
  4038fc:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4038fe:	69e3      	ldr	r3, [r4, #28]
  403900:	2b01      	cmp	r3, #1
  403902:	d1ee      	bne.n	4038e2 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  403904:	69a3      	ldr	r3, [r4, #24]
  403906:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  403908:	459a      	cmp	sl, r3
  40390a:	d2d5      	bcs.n	4038b8 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  40390c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40390e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403910:	4649      	mov	r1, r9
  403912:	6828      	ldr	r0, [r5, #0]
  403914:	4b0a      	ldr	r3, [pc, #40]	; (403940 <prvSampleTimeNow+0xb0>)
  403916:	4798      	blx	r3
  403918:	e7e3      	b.n	4038e2 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  40391a:	4a0a      	ldr	r2, [pc, #40]	; (403944 <prvSampleTimeNow+0xb4>)
  40391c:	6810      	ldr	r0, [r2, #0]
  40391e:	4906      	ldr	r1, [pc, #24]	; (403938 <prvSampleTimeNow+0xa8>)
  403920:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  403922:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  403924:	2301      	movs	r3, #1
  403926:	f8c8 3000 	str.w	r3, [r8]
  40392a:	e7bf      	b.n	4038ac <prvSampleTimeNow+0x1c>
  40392c:	00402e81 	.word	0x00402e81
  403930:	2040c754 	.word	0x2040c754
  403934:	00403821 	.word	0x00403821
  403938:	2040c724 	.word	0x2040c724
  40393c:	00401f35 	.word	0x00401f35
  403940:	00401f01 	.word	0x00401f01
  403944:	2040c728 	.word	0x2040c728

00403948 <prvTimerTask>:
{
  403948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40394c:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40394e:	4e75      	ldr	r6, [pc, #468]	; (403b24 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  403950:	4f75      	ldr	r7, [pc, #468]	; (403b28 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  403952:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 403b50 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403956:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 403b54 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40395a:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  40395c:	681a      	ldr	r2, [r3, #0]
  40395e:	2a00      	cmp	r2, #0
  403960:	f000 80ce 	beq.w	403b00 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403964:	68db      	ldr	r3, [r3, #12]
  403966:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  403968:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40396a:	a804      	add	r0, sp, #16
  40396c:	4b6f      	ldr	r3, [pc, #444]	; (403b2c <prvTimerTask+0x1e4>)
  40396e:	4798      	blx	r3
  403970:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  403972:	9b04      	ldr	r3, [sp, #16]
  403974:	2b00      	cmp	r3, #0
  403976:	d144      	bne.n	403a02 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  403978:	42a0      	cmp	r0, r4
  40397a:	d212      	bcs.n	4039a2 <prvTimerTask+0x5a>
  40397c:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  40397e:	1b61      	subs	r1, r4, r5
  403980:	4b6b      	ldr	r3, [pc, #428]	; (403b30 <prvTimerTask+0x1e8>)
  403982:	6818      	ldr	r0, [r3, #0]
  403984:	4b6b      	ldr	r3, [pc, #428]	; (403b34 <prvTimerTask+0x1ec>)
  403986:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  403988:	4b6b      	ldr	r3, [pc, #428]	; (403b38 <prvTimerTask+0x1f0>)
  40398a:	4798      	blx	r3
  40398c:	2800      	cmp	r0, #0
  40398e:	d13a      	bne.n	403a06 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  403990:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403994:	f8c9 3000 	str.w	r3, [r9]
  403998:	f3bf 8f4f 	dsb	sy
  40399c:	f3bf 8f6f 	isb	sy
  4039a0:	e031      	b.n	403a06 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  4039a2:	4b65      	ldr	r3, [pc, #404]	; (403b38 <prvTimerTask+0x1f0>)
  4039a4:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4039a6:	6833      	ldr	r3, [r6, #0]
  4039a8:	68db      	ldr	r3, [r3, #12]
  4039aa:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4039ae:	f10a 0004 	add.w	r0, sl, #4
  4039b2:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4039b4:	f8da 301c 	ldr.w	r3, [sl, #28]
  4039b8:	2b01      	cmp	r3, #1
  4039ba:	d004      	beq.n	4039c6 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4039bc:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4039c0:	4650      	mov	r0, sl
  4039c2:	4798      	blx	r3
  4039c4:	e01f      	b.n	403a06 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4039c6:	f8da 1018 	ldr.w	r1, [sl, #24]
  4039ca:	4623      	mov	r3, r4
  4039cc:	462a      	mov	r2, r5
  4039ce:	4421      	add	r1, r4
  4039d0:	4650      	mov	r0, sl
  4039d2:	4d5a      	ldr	r5, [pc, #360]	; (403b3c <prvTimerTask+0x1f4>)
  4039d4:	47a8      	blx	r5
  4039d6:	2801      	cmp	r0, #1
  4039d8:	d1f0      	bne.n	4039bc <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4039da:	2100      	movs	r1, #0
  4039dc:	9100      	str	r1, [sp, #0]
  4039de:	460b      	mov	r3, r1
  4039e0:	4622      	mov	r2, r4
  4039e2:	4650      	mov	r0, sl
  4039e4:	4c56      	ldr	r4, [pc, #344]	; (403b40 <prvTimerTask+0x1f8>)
  4039e6:	47a0      	blx	r4
			configASSERT( xResult );
  4039e8:	2800      	cmp	r0, #0
  4039ea:	d1e7      	bne.n	4039bc <prvTimerTask+0x74>
  4039ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4039f0:	b672      	cpsid	i
  4039f2:	f383 8811 	msr	BASEPRI, r3
  4039f6:	f3bf 8f6f 	isb	sy
  4039fa:	f3bf 8f4f 	dsb	sy
  4039fe:	b662      	cpsie	i
  403a00:	e7fe      	b.n	403a00 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  403a02:	4b4d      	ldr	r3, [pc, #308]	; (403b38 <prvTimerTask+0x1f0>)
  403a04:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403a06:	4d4a      	ldr	r5, [pc, #296]	; (403b30 <prvTimerTask+0x1e8>)
  403a08:	4c4e      	ldr	r4, [pc, #312]	; (403b44 <prvTimerTask+0x1fc>)
  403a0a:	e006      	b.n	403a1a <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  403a0c:	9907      	ldr	r1, [sp, #28]
  403a0e:	9806      	ldr	r0, [sp, #24]
  403a10:	9b05      	ldr	r3, [sp, #20]
  403a12:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  403a14:	9b04      	ldr	r3, [sp, #16]
  403a16:	2b00      	cmp	r3, #0
  403a18:	da09      	bge.n	403a2e <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403a1a:	2300      	movs	r3, #0
  403a1c:	461a      	mov	r2, r3
  403a1e:	a904      	add	r1, sp, #16
  403a20:	6828      	ldr	r0, [r5, #0]
  403a22:	47a0      	blx	r4
  403a24:	2800      	cmp	r0, #0
  403a26:	d098      	beq.n	40395a <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  403a28:	9b04      	ldr	r3, [sp, #16]
  403a2a:	2b00      	cmp	r3, #0
  403a2c:	dbee      	blt.n	403a0c <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  403a2e:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  403a32:	f8da 3014 	ldr.w	r3, [sl, #20]
  403a36:	b113      	cbz	r3, 403a3e <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403a38:	f10a 0004 	add.w	r0, sl, #4
  403a3c:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403a3e:	a803      	add	r0, sp, #12
  403a40:	4b3a      	ldr	r3, [pc, #232]	; (403b2c <prvTimerTask+0x1e4>)
  403a42:	4798      	blx	r3
			switch( xMessage.xMessageID )
  403a44:	9b04      	ldr	r3, [sp, #16]
  403a46:	2b09      	cmp	r3, #9
  403a48:	d8e7      	bhi.n	403a1a <prvTimerTask+0xd2>
  403a4a:	a201      	add	r2, pc, #4	; (adr r2, 403a50 <prvTimerTask+0x108>)
  403a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403a50:	00403a79 	.word	0x00403a79
  403a54:	00403a79 	.word	0x00403a79
  403a58:	00403a79 	.word	0x00403a79
  403a5c:	00403a1b 	.word	0x00403a1b
  403a60:	00403acd 	.word	0x00403acd
  403a64:	00403af9 	.word	0x00403af9
  403a68:	00403a79 	.word	0x00403a79
  403a6c:	00403a79 	.word	0x00403a79
  403a70:	00403a1b 	.word	0x00403a1b
  403a74:	00403acd 	.word	0x00403acd
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  403a78:	9c05      	ldr	r4, [sp, #20]
  403a7a:	f8da 1018 	ldr.w	r1, [sl, #24]
  403a7e:	4623      	mov	r3, r4
  403a80:	4602      	mov	r2, r0
  403a82:	4421      	add	r1, r4
  403a84:	4650      	mov	r0, sl
  403a86:	4c2d      	ldr	r4, [pc, #180]	; (403b3c <prvTimerTask+0x1f4>)
  403a88:	47a0      	blx	r4
  403a8a:	2801      	cmp	r0, #1
  403a8c:	d1bc      	bne.n	403a08 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403a8e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403a92:	4650      	mov	r0, sl
  403a94:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403a96:	f8da 301c 	ldr.w	r3, [sl, #28]
  403a9a:	2b01      	cmp	r3, #1
  403a9c:	d1b4      	bne.n	403a08 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  403a9e:	f8da 2018 	ldr.w	r2, [sl, #24]
  403aa2:	2100      	movs	r1, #0
  403aa4:	9100      	str	r1, [sp, #0]
  403aa6:	460b      	mov	r3, r1
  403aa8:	9805      	ldr	r0, [sp, #20]
  403aaa:	4402      	add	r2, r0
  403aac:	4650      	mov	r0, sl
  403aae:	4c24      	ldr	r4, [pc, #144]	; (403b40 <prvTimerTask+0x1f8>)
  403ab0:	47a0      	blx	r4
							configASSERT( xResult );
  403ab2:	2800      	cmp	r0, #0
  403ab4:	d1a8      	bne.n	403a08 <prvTimerTask+0xc0>
  403ab6:	f04f 0380 	mov.w	r3, #128	; 0x80
  403aba:	b672      	cpsid	i
  403abc:	f383 8811 	msr	BASEPRI, r3
  403ac0:	f3bf 8f6f 	isb	sy
  403ac4:	f3bf 8f4f 	dsb	sy
  403ac8:	b662      	cpsie	i
  403aca:	e7fe      	b.n	403aca <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  403acc:	9905      	ldr	r1, [sp, #20]
  403ace:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  403ad2:	b131      	cbz	r1, 403ae2 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  403ad4:	4603      	mov	r3, r0
  403ad6:	4602      	mov	r2, r0
  403ad8:	4401      	add	r1, r0
  403ada:	4650      	mov	r0, sl
  403adc:	4c17      	ldr	r4, [pc, #92]	; (403b3c <prvTimerTask+0x1f4>)
  403ade:	47a0      	blx	r4
  403ae0:	e792      	b.n	403a08 <prvTimerTask+0xc0>
  403ae2:	f04f 0380 	mov.w	r3, #128	; 0x80
  403ae6:	b672      	cpsid	i
  403ae8:	f383 8811 	msr	BASEPRI, r3
  403aec:	f3bf 8f6f 	isb	sy
  403af0:	f3bf 8f4f 	dsb	sy
  403af4:	b662      	cpsie	i
  403af6:	e7fe      	b.n	403af6 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  403af8:	4650      	mov	r0, sl
  403afa:	4b13      	ldr	r3, [pc, #76]	; (403b48 <prvTimerTask+0x200>)
  403afc:	4798      	blx	r3
  403afe:	e783      	b.n	403a08 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  403b00:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403b02:	a804      	add	r0, sp, #16
  403b04:	4b09      	ldr	r3, [pc, #36]	; (403b2c <prvTimerTask+0x1e4>)
  403b06:	4798      	blx	r3
  403b08:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  403b0a:	9b04      	ldr	r3, [sp, #16]
  403b0c:	2b00      	cmp	r3, #0
  403b0e:	f47f af78 	bne.w	403a02 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  403b12:	4b0e      	ldr	r3, [pc, #56]	; (403b4c <prvTimerTask+0x204>)
  403b14:	681b      	ldr	r3, [r3, #0]
  403b16:	681a      	ldr	r2, [r3, #0]
  403b18:	fab2 f282 	clz	r2, r2
  403b1c:	0952      	lsrs	r2, r2, #5
  403b1e:	2400      	movs	r4, #0
  403b20:	e72d      	b.n	40397e <prvTimerTask+0x36>
  403b22:	bf00      	nop
  403b24:	2040c724 	.word	0x2040c724
  403b28:	00402e71 	.word	0x00402e71
  403b2c:	00403891 	.word	0x00403891
  403b30:	2040c758 	.word	0x2040c758
  403b34:	00402ad5 	.word	0x00402ad5
  403b38:	00402fd9 	.word	0x00402fd9
  403b3c:	004036f9 	.word	0x004036f9
  403b40:	00403821 	.word	0x00403821
  403b44:	004028d1 	.word	0x004028d1
  403b48:	004022e5 	.word	0x004022e5
  403b4c:	2040c728 	.word	0x2040c728
  403b50:	e000ed04 	.word	0xe000ed04
  403b54:	00401f35 	.word	0x00401f35

00403b58 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403b58:	b5f0      	push	{r4, r5, r6, r7, lr}
  403b5a:	b083      	sub	sp, #12
  403b5c:	4605      	mov	r5, r0
  403b5e:	460c      	mov	r4, r1
	uint32_t val = 0;
  403b60:	2300      	movs	r3, #0
  403b62:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403b64:	4b2a      	ldr	r3, [pc, #168]	; (403c10 <usart_serial_getchar+0xb8>)
  403b66:	4298      	cmp	r0, r3
  403b68:	d013      	beq.n	403b92 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403b6a:	4b2a      	ldr	r3, [pc, #168]	; (403c14 <usart_serial_getchar+0xbc>)
  403b6c:	4298      	cmp	r0, r3
  403b6e:	d018      	beq.n	403ba2 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403b70:	4b29      	ldr	r3, [pc, #164]	; (403c18 <usart_serial_getchar+0xc0>)
  403b72:	4298      	cmp	r0, r3
  403b74:	d01d      	beq.n	403bb2 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403b76:	4b29      	ldr	r3, [pc, #164]	; (403c1c <usart_serial_getchar+0xc4>)
  403b78:	429d      	cmp	r5, r3
  403b7a:	d022      	beq.n	403bc2 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403b7c:	4b28      	ldr	r3, [pc, #160]	; (403c20 <usart_serial_getchar+0xc8>)
  403b7e:	429d      	cmp	r5, r3
  403b80:	d027      	beq.n	403bd2 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403b82:	4b28      	ldr	r3, [pc, #160]	; (403c24 <usart_serial_getchar+0xcc>)
  403b84:	429d      	cmp	r5, r3
  403b86:	d02e      	beq.n	403be6 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403b88:	4b27      	ldr	r3, [pc, #156]	; (403c28 <usart_serial_getchar+0xd0>)
  403b8a:	429d      	cmp	r5, r3
  403b8c:	d035      	beq.n	403bfa <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403b8e:	b003      	add	sp, #12
  403b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  403b92:	461f      	mov	r7, r3
  403b94:	4e25      	ldr	r6, [pc, #148]	; (403c2c <usart_serial_getchar+0xd4>)
  403b96:	4621      	mov	r1, r4
  403b98:	4638      	mov	r0, r7
  403b9a:	47b0      	blx	r6
  403b9c:	2800      	cmp	r0, #0
  403b9e:	d1fa      	bne.n	403b96 <usart_serial_getchar+0x3e>
  403ba0:	e7e9      	b.n	403b76 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  403ba2:	461f      	mov	r7, r3
  403ba4:	4e21      	ldr	r6, [pc, #132]	; (403c2c <usart_serial_getchar+0xd4>)
  403ba6:	4621      	mov	r1, r4
  403ba8:	4638      	mov	r0, r7
  403baa:	47b0      	blx	r6
  403bac:	2800      	cmp	r0, #0
  403bae:	d1fa      	bne.n	403ba6 <usart_serial_getchar+0x4e>
  403bb0:	e7e4      	b.n	403b7c <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  403bb2:	461f      	mov	r7, r3
  403bb4:	4e1d      	ldr	r6, [pc, #116]	; (403c2c <usart_serial_getchar+0xd4>)
  403bb6:	4621      	mov	r1, r4
  403bb8:	4638      	mov	r0, r7
  403bba:	47b0      	blx	r6
  403bbc:	2800      	cmp	r0, #0
  403bbe:	d1fa      	bne.n	403bb6 <usart_serial_getchar+0x5e>
  403bc0:	e7df      	b.n	403b82 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  403bc2:	461f      	mov	r7, r3
  403bc4:	4e19      	ldr	r6, [pc, #100]	; (403c2c <usart_serial_getchar+0xd4>)
  403bc6:	4621      	mov	r1, r4
  403bc8:	4638      	mov	r0, r7
  403bca:	47b0      	blx	r6
  403bcc:	2800      	cmp	r0, #0
  403bce:	d1fa      	bne.n	403bc6 <usart_serial_getchar+0x6e>
  403bd0:	e7da      	b.n	403b88 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  403bd2:	461e      	mov	r6, r3
  403bd4:	4d16      	ldr	r5, [pc, #88]	; (403c30 <usart_serial_getchar+0xd8>)
  403bd6:	a901      	add	r1, sp, #4
  403bd8:	4630      	mov	r0, r6
  403bda:	47a8      	blx	r5
  403bdc:	2800      	cmp	r0, #0
  403bde:	d1fa      	bne.n	403bd6 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  403be0:	9b01      	ldr	r3, [sp, #4]
  403be2:	7023      	strb	r3, [r4, #0]
  403be4:	e7d3      	b.n	403b8e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403be6:	461e      	mov	r6, r3
  403be8:	4d11      	ldr	r5, [pc, #68]	; (403c30 <usart_serial_getchar+0xd8>)
  403bea:	a901      	add	r1, sp, #4
  403bec:	4630      	mov	r0, r6
  403bee:	47a8      	blx	r5
  403bf0:	2800      	cmp	r0, #0
  403bf2:	d1fa      	bne.n	403bea <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403bf4:	9b01      	ldr	r3, [sp, #4]
  403bf6:	7023      	strb	r3, [r4, #0]
  403bf8:	e7c9      	b.n	403b8e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403bfa:	461e      	mov	r6, r3
  403bfc:	4d0c      	ldr	r5, [pc, #48]	; (403c30 <usart_serial_getchar+0xd8>)
  403bfe:	a901      	add	r1, sp, #4
  403c00:	4630      	mov	r0, r6
  403c02:	47a8      	blx	r5
  403c04:	2800      	cmp	r0, #0
  403c06:	d1fa      	bne.n	403bfe <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403c08:	9b01      	ldr	r3, [sp, #4]
  403c0a:	7023      	strb	r3, [r4, #0]
}
  403c0c:	e7bf      	b.n	403b8e <usart_serial_getchar+0x36>
  403c0e:	bf00      	nop
  403c10:	400e0800 	.word	0x400e0800
  403c14:	400e0a00 	.word	0x400e0a00
  403c18:	400e1a00 	.word	0x400e1a00
  403c1c:	400e1c00 	.word	0x400e1c00
  403c20:	40024000 	.word	0x40024000
  403c24:	40028000 	.word	0x40028000
  403c28:	4002c000 	.word	0x4002c000
  403c2c:	00401af7 	.word	0x00401af7
  403c30:	00401c03 	.word	0x00401c03

00403c34 <usart_serial_putchar>:
{
  403c34:	b570      	push	{r4, r5, r6, lr}
  403c36:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  403c38:	4b2a      	ldr	r3, [pc, #168]	; (403ce4 <usart_serial_putchar+0xb0>)
  403c3a:	4298      	cmp	r0, r3
  403c3c:	d013      	beq.n	403c66 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  403c3e:	4b2a      	ldr	r3, [pc, #168]	; (403ce8 <usart_serial_putchar+0xb4>)
  403c40:	4298      	cmp	r0, r3
  403c42:	d019      	beq.n	403c78 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403c44:	4b29      	ldr	r3, [pc, #164]	; (403cec <usart_serial_putchar+0xb8>)
  403c46:	4298      	cmp	r0, r3
  403c48:	d01f      	beq.n	403c8a <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  403c4a:	4b29      	ldr	r3, [pc, #164]	; (403cf0 <usart_serial_putchar+0xbc>)
  403c4c:	4298      	cmp	r0, r3
  403c4e:	d025      	beq.n	403c9c <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  403c50:	4b28      	ldr	r3, [pc, #160]	; (403cf4 <usart_serial_putchar+0xc0>)
  403c52:	4298      	cmp	r0, r3
  403c54:	d02b      	beq.n	403cae <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  403c56:	4b28      	ldr	r3, [pc, #160]	; (403cf8 <usart_serial_putchar+0xc4>)
  403c58:	4298      	cmp	r0, r3
  403c5a:	d031      	beq.n	403cc0 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403c5c:	4b27      	ldr	r3, [pc, #156]	; (403cfc <usart_serial_putchar+0xc8>)
  403c5e:	4298      	cmp	r0, r3
  403c60:	d037      	beq.n	403cd2 <usart_serial_putchar+0x9e>
	return 0;
  403c62:	2000      	movs	r0, #0
}
  403c64:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403c66:	461e      	mov	r6, r3
  403c68:	4d25      	ldr	r5, [pc, #148]	; (403d00 <usart_serial_putchar+0xcc>)
  403c6a:	4621      	mov	r1, r4
  403c6c:	4630      	mov	r0, r6
  403c6e:	47a8      	blx	r5
  403c70:	2800      	cmp	r0, #0
  403c72:	d1fa      	bne.n	403c6a <usart_serial_putchar+0x36>
		return 1;
  403c74:	2001      	movs	r0, #1
  403c76:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403c78:	461e      	mov	r6, r3
  403c7a:	4d21      	ldr	r5, [pc, #132]	; (403d00 <usart_serial_putchar+0xcc>)
  403c7c:	4621      	mov	r1, r4
  403c7e:	4630      	mov	r0, r6
  403c80:	47a8      	blx	r5
  403c82:	2800      	cmp	r0, #0
  403c84:	d1fa      	bne.n	403c7c <usart_serial_putchar+0x48>
		return 1;
  403c86:	2001      	movs	r0, #1
  403c88:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403c8a:	461e      	mov	r6, r3
  403c8c:	4d1c      	ldr	r5, [pc, #112]	; (403d00 <usart_serial_putchar+0xcc>)
  403c8e:	4621      	mov	r1, r4
  403c90:	4630      	mov	r0, r6
  403c92:	47a8      	blx	r5
  403c94:	2800      	cmp	r0, #0
  403c96:	d1fa      	bne.n	403c8e <usart_serial_putchar+0x5a>
		return 1;
  403c98:	2001      	movs	r0, #1
  403c9a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403c9c:	461e      	mov	r6, r3
  403c9e:	4d18      	ldr	r5, [pc, #96]	; (403d00 <usart_serial_putchar+0xcc>)
  403ca0:	4621      	mov	r1, r4
  403ca2:	4630      	mov	r0, r6
  403ca4:	47a8      	blx	r5
  403ca6:	2800      	cmp	r0, #0
  403ca8:	d1fa      	bne.n	403ca0 <usart_serial_putchar+0x6c>
		return 1;
  403caa:	2001      	movs	r0, #1
  403cac:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403cae:	461e      	mov	r6, r3
  403cb0:	4d14      	ldr	r5, [pc, #80]	; (403d04 <usart_serial_putchar+0xd0>)
  403cb2:	4621      	mov	r1, r4
  403cb4:	4630      	mov	r0, r6
  403cb6:	47a8      	blx	r5
  403cb8:	2800      	cmp	r0, #0
  403cba:	d1fa      	bne.n	403cb2 <usart_serial_putchar+0x7e>
		return 1;
  403cbc:	2001      	movs	r0, #1
  403cbe:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403cc0:	461e      	mov	r6, r3
  403cc2:	4d10      	ldr	r5, [pc, #64]	; (403d04 <usart_serial_putchar+0xd0>)
  403cc4:	4621      	mov	r1, r4
  403cc6:	4630      	mov	r0, r6
  403cc8:	47a8      	blx	r5
  403cca:	2800      	cmp	r0, #0
  403ccc:	d1fa      	bne.n	403cc4 <usart_serial_putchar+0x90>
		return 1;
  403cce:	2001      	movs	r0, #1
  403cd0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403cd2:	461e      	mov	r6, r3
  403cd4:	4d0b      	ldr	r5, [pc, #44]	; (403d04 <usart_serial_putchar+0xd0>)
  403cd6:	4621      	mov	r1, r4
  403cd8:	4630      	mov	r0, r6
  403cda:	47a8      	blx	r5
  403cdc:	2800      	cmp	r0, #0
  403cde:	d1fa      	bne.n	403cd6 <usart_serial_putchar+0xa2>
		return 1;
  403ce0:	2001      	movs	r0, #1
  403ce2:	bd70      	pop	{r4, r5, r6, pc}
  403ce4:	400e0800 	.word	0x400e0800
  403ce8:	400e0a00 	.word	0x400e0a00
  403cec:	400e1a00 	.word	0x400e1a00
  403cf0:	400e1c00 	.word	0x400e1c00
  403cf4:	40024000 	.word	0x40024000
  403cf8:	40028000 	.word	0x40028000
  403cfc:	4002c000 	.word	0x4002c000
  403d00:	00401ae5 	.word	0x00401ae5
  403d04:	00401bed 	.word	0x00401bed

00403d08 <vApplicationStackOverflowHook>:
/**
 * \brief Called if stack overflow during execution
 */
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask,
		signed char *pcTaskName)
{
  403d08:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  403d0a:	460a      	mov	r2, r1
  403d0c:	4601      	mov	r1, r0
  403d0e:	4802      	ldr	r0, [pc, #8]	; (403d18 <vApplicationStackOverflowHook+0x10>)
  403d10:	4b02      	ldr	r3, [pc, #8]	; (403d1c <vApplicationStackOverflowHook+0x14>)
  403d12:	4798      	blx	r3
  403d14:	e7fe      	b.n	403d14 <vApplicationStackOverflowHook+0xc>
  403d16:	bf00      	nop
  403d18:	00412384 	.word	0x00412384
  403d1c:	00404185 	.word	0x00404185

00403d20 <vApplicationTickHook>:

/**
 * \brief This function is called by FreeRTOS each tick
 */
extern void vApplicationTickHook(void)
{
  403d20:	4770      	bx	lr

00403d22 <vApplicationMallocFailedHook>:
  403d22:	f04f 0380 	mov.w	r3, #128	; 0x80
  403d26:	b672      	cpsid	i
  403d28:	f383 8811 	msr	BASEPRI, r3
  403d2c:	f3bf 8f6f 	isb	sy
  403d30:	f3bf 8f4f 	dsb	sy
  403d34:	b662      	cpsie	i
  403d36:	e7fe      	b.n	403d36 <vApplicationMallocFailedHook+0x14>

00403d38 <draw_screen>:

/************************************************************************/
/* funcoes                                                              */
/************************************************************************/

void draw_screen(void) {	
  403d38:	b530      	push	{r4, r5, lr}
  403d3a:	b083      	sub	sp, #12
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  403d3c:	4816      	ldr	r0, [pc, #88]	; (403d98 <draw_screen+0x60>)
  403d3e:	4c17      	ldr	r4, [pc, #92]	; (403d9c <draw_screen+0x64>)
  403d40:	47a0      	blx	r4
	ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH-1, ILI9488_LCD_HEIGHT-1);
  403d42:	f240 13df 	movw	r3, #479	; 0x1df
  403d46:	f240 123f 	movw	r2, #319	; 0x13f
  403d4a:	2100      	movs	r1, #0
  403d4c:	4608      	mov	r0, r1
  403d4e:	4d14      	ldr	r5, [pc, #80]	; (403da0 <draw_screen+0x68>)
  403d50:	47a8      	blx	r5
	
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  403d52:	2000      	movs	r0, #0
  403d54:	47a0      	blx	r4
	ili9488_draw_line(0,240,320,241);
  403d56:	23f1      	movs	r3, #241	; 0xf1
  403d58:	f44f 72a0 	mov.w	r2, #320	; 0x140
  403d5c:	21f0      	movs	r1, #240	; 0xf0
  403d5e:	2000      	movs	r0, #0
  403d60:	4c10      	ldr	r4, [pc, #64]	; (403da4 <draw_screen+0x6c>)
  403d62:	47a0      	blx	r4
	
	ili9488_draw_pixmap(200,10,soneca.width,soneca.height,soneca.data);
  403d64:	4b10      	ldr	r3, [pc, #64]	; (403da8 <draw_screen+0x70>)
  403d66:	9300      	str	r3, [sp, #0]
  403d68:	2345      	movs	r3, #69	; 0x45
  403d6a:	461a      	mov	r2, r3
  403d6c:	210a      	movs	r1, #10
  403d6e:	20c8      	movs	r0, #200	; 0xc8
  403d70:	4c0e      	ldr	r4, [pc, #56]	; (403dac <draw_screen+0x74>)
  403d72:	47a0      	blx	r4
	ili9488_draw_pixmap(5,260,termometro.width,termometro.height,termometro.data);
  403d74:	4b0e      	ldr	r3, [pc, #56]	; (403db0 <draw_screen+0x78>)
  403d76:	9300      	str	r3, [sp, #0]
  403d78:	234f      	movs	r3, #79	; 0x4f
  403d7a:	2236      	movs	r2, #54	; 0x36
  403d7c:	f44f 7182 	mov.w	r1, #260	; 0x104
  403d80:	2005      	movs	r0, #5
  403d82:	47a0      	blx	r4
	ili9488_draw_pixmap(5,360,ar.width,ar.height,ar.data);
  403d84:	4b0b      	ldr	r3, [pc, #44]	; (403db4 <draw_screen+0x7c>)
  403d86:	9300      	str	r3, [sp, #0]
  403d88:	2346      	movs	r3, #70	; 0x46
  403d8a:	2258      	movs	r2, #88	; 0x58
  403d8c:	f44f 71b4 	mov.w	r1, #360	; 0x168
  403d90:	2005      	movs	r0, #5
  403d92:	47a0      	blx	r4
}
  403d94:	b003      	add	sp, #12
  403d96:	bd30      	pop	{r4, r5, pc}
  403d98:	00fcfcfc 	.word	0x00fcfcfc
  403d9c:	00400dbd 	.word	0x00400dbd
  403da0:	00401049 	.word	0x00401049
  403da4:	00401105 	.word	0x00401105
  403da8:	0040b980 	.word	0x0040b980
  403dac:	004011d9 	.word	0x004011d9
  403db0:	0040f14c 	.word	0x0040f14c
  403db4:	00407150 	.word	0x00407150

00403db8 <task_lcd>:
      }
     vTaskDelay(100);
	}
}

void task_lcd(void){
  403db8:	b500      	push	{lr}
  403dba:	b083      	sub	sp, #12
  xQueueTouch = xQueueCreate( 10, sizeof( touchData ) );
  403dbc:	2200      	movs	r2, #0
  403dbe:	2108      	movs	r1, #8
  403dc0:	200a      	movs	r0, #10
  403dc2:	4b11      	ldr	r3, [pc, #68]	; (403e08 <task_lcd+0x50>)
  403dc4:	4798      	blx	r3
  403dc6:	4b11      	ldr	r3, [pc, #68]	; (403e0c <task_lcd+0x54>)
  403dc8:	6018      	str	r0, [r3, #0]
	g_ili9488_display_opt.ul_width = ILI9488_LCD_WIDTH;
  403dca:	4811      	ldr	r0, [pc, #68]	; (403e10 <task_lcd+0x58>)
  403dcc:	f44f 73a0 	mov.w	r3, #320	; 0x140
  403dd0:	6003      	str	r3, [r0, #0]
	g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  403dd2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  403dd6:	6043      	str	r3, [r0, #4]
	g_ili9488_display_opt.foreground_color = COLOR_CONVERT(COLOR_WHITE);
  403dd8:	4b0e      	ldr	r3, [pc, #56]	; (403e14 <task_lcd+0x5c>)
  403dda:	6083      	str	r3, [r0, #8]
	g_ili9488_display_opt.background_color = COLOR_CONVERT(COLOR_WHITE);
  403ddc:	60c3      	str	r3, [r0, #12]
	ili9488_init(&g_ili9488_display_opt);
  403dde:	4b0e      	ldr	r3, [pc, #56]	; (403e18 <task_lcd+0x60>)
  403de0:	4798      	blx	r3
	configure_lcd();
  
  draw_screen();
  403de2:	4b0e      	ldr	r3, [pc, #56]	; (403e1c <task_lcd+0x64>)
  403de4:	4798      	blx	r3
  // draw_button(0);
  touchData touch;
    
  while (true) {  
     if (xQueueReceive( xQueueTouch, &(touch), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  403de6:	4d09      	ldr	r5, [pc, #36]	; (403e0c <task_lcd+0x54>)
  403de8:	4c0d      	ldr	r4, [pc, #52]	; (403e20 <task_lcd+0x68>)
       update_screen(touch.x, touch.y);
       printf("x:%d y:%d\n", touch.x, touch.y);
  403dea:	4e0e      	ldr	r6, [pc, #56]	; (403e24 <task_lcd+0x6c>)
     if (xQueueReceive( xQueueTouch, &(touch), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  403dec:	2300      	movs	r3, #0
  403dee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  403df2:	4669      	mov	r1, sp
  403df4:	6828      	ldr	r0, [r5, #0]
  403df6:	47a0      	blx	r4
  403df8:	2800      	cmp	r0, #0
  403dfa:	d0f7      	beq.n	403dec <task_lcd+0x34>
       printf("x:%d y:%d\n", touch.x, touch.y);
  403dfc:	9a01      	ldr	r2, [sp, #4]
  403dfe:	9900      	ldr	r1, [sp, #0]
  403e00:	4630      	mov	r0, r6
  403e02:	4b09      	ldr	r3, [pc, #36]	; (403e28 <task_lcd+0x70>)
  403e04:	4798      	blx	r3
  403e06:	e7f1      	b.n	403dec <task_lcd+0x34>
  403e08:	00402571 	.word	0x00402571
  403e0c:	2040c81c 	.word	0x2040c81c
  403e10:	2040c80c 	.word	0x2040c80c
  403e14:	00fcfcfc 	.word	0x00fcfcfc
  403e18:	00400e49 	.word	0x00400e49
  403e1c:	00403d39 	.word	0x00403d39
  403e20:	004028d1 	.word	0x004028d1
  403e24:	00412378 	.word	0x00412378
  403e28:	00404185 	.word	0x00404185

00403e2c <mxt_handler>:
{
  403e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403e30:	b084      	sub	sp, #16
  403e32:	4605      	mov	r5, r0
  403e34:	4689      	mov	r9, r1
  403e36:	4690      	mov	r8, r2
  uint first = 0;
  403e38:	f04f 0a00 	mov.w	sl, #0
	uint8_t i = 0; /* Iterator */
  403e3c:	4654      	mov	r4, sl
		if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  403e3e:	4f15      	ldr	r7, [pc, #84]	; (403e94 <mxt_handler+0x68>)
	} while ((mxt_is_message_pending(device)) & (i < MAX_ENTRIES));
  403e40:	4e15      	ldr	r6, [pc, #84]	; (403e98 <mxt_handler+0x6c>)
  403e42:	e008      	b.n	403e56 <mxt_handler+0x2a>
		i++;
  403e44:	3401      	adds	r4, #1
  403e46:	b2e4      	uxtb	r4, r4
  403e48:	f04f 0a01 	mov.w	sl, #1
	} while ((mxt_is_message_pending(device)) & (i < MAX_ENTRIES));
  403e4c:	4628      	mov	r0, r5
  403e4e:	47b0      	blx	r6
  403e50:	2c02      	cmp	r4, #2
  403e52:	d81b      	bhi.n	403e8c <mxt_handler+0x60>
  403e54:	b1d0      	cbz	r0, 403e8c <mxt_handler+0x60>
		if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  403e56:	a901      	add	r1, sp, #4
  403e58:	4628      	mov	r0, r5
  403e5a:	47b8      	blx	r7
  403e5c:	2800      	cmp	r0, #0
  403e5e:	d1f5      	bne.n	403e4c <mxt_handler+0x20>
    if(first == 0 ){
  403e60:	f1ba 0f00 	cmp.w	sl, #0
  403e64:	d1ee      	bne.n	403e44 <mxt_handler+0x18>
      *x = convert_axis_system_x(touch_event.y);
  403e66:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	return ILI9488_LCD_WIDTH - ILI9488_LCD_WIDTH*touch_y/4096;
  403e6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403e6e:	f3c3 1393 	ubfx	r3, r3, #6, #20
  403e72:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
      *x = convert_axis_system_x(touch_event.y);
  403e76:	f8c9 3000 	str.w	r3, [r9]
      *y = convert_axis_system_y(touch_event.x);
  403e7a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return ILI9488_LCD_HEIGHT*touch_x/4096;
  403e7e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  403e82:	f3c3 13d3 	ubfx	r3, r3, #7, #20
      *y = convert_axis_system_y(touch_event.x);
  403e86:	f8c8 3000 	str.w	r3, [r8]
  403e8a:	e7db      	b.n	403e44 <mxt_handler+0x18>
}
  403e8c:	b004      	add	sp, #16
  403e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e92:	bf00      	nop
  403e94:	004005dd 	.word	0x004005dd
  403e98:	0040056d 	.word	0x0040056d

00403e9c <task_mxt>:
void task_mxt(void){
  403e9c:	b580      	push	{r7, lr}
  403e9e:	b0a6      	sub	sp, #152	; 0x98
	uint8_t t8_object[] = {
  403ea0:	4c51      	ldr	r4, [pc, #324]	; (403fe8 <task_mxt+0x14c>)
  403ea2:	ab04      	add	r3, sp, #16
  403ea4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  403ea8:	c303      	stmia	r3!, {r0, r1}
  403eaa:	801a      	strh	r2, [r3, #0]
	uint8_t t9_object[] = {
  403eac:	ad13      	add	r5, sp, #76	; 0x4c
  403eae:	f104 060c 	add.w	r6, r4, #12
  403eb2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  403eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  403eb6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  403eb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  403eba:	6833      	ldr	r3, [r6, #0]
  403ebc:	602b      	str	r3, [r5, #0]
	uint8_t t46_object[] = {
  403ebe:	ab01      	add	r3, sp, #4
  403ec0:	f104 0230 	add.w	r2, r4, #48	; 0x30
  403ec4:	ca07      	ldmia	r2, {r0, r1, r2}
  403ec6:	c303      	stmia	r3!, {r0, r1}
  403ec8:	701a      	strb	r2, [r3, #0]
	uint8_t t56_object[] = {
  403eca:	ad0a      	add	r5, sp, #40	; 0x28
  403ecc:	343c      	adds	r4, #60	; 0x3c
  403ece:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  403ed0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  403ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  403ed4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  403ed6:	6823      	ldr	r3, [r4, #0]
  403ed8:	702b      	strb	r3, [r5, #0]
	twihs_master_options_t twi_opt = {
  403eda:	2400      	movs	r4, #0
  403edc:	9409      	str	r4, [sp, #36]	; 0x24
  403ede:	4b43      	ldr	r3, [pc, #268]	; (403fec <task_mxt+0x150>)
  403ee0:	9308      	str	r3, [sp, #32]
  403ee2:	264a      	movs	r6, #74	; 0x4a
  403ee4:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  403ee8:	4b41      	ldr	r3, [pc, #260]	; (403ff0 <task_mxt+0x154>)
  403eea:	9307      	str	r3, [sp, #28]
  403eec:	2013      	movs	r0, #19
  403eee:	4b41      	ldr	r3, [pc, #260]	; (403ff4 <task_mxt+0x158>)
  403ef0:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  403ef2:	4d41      	ldr	r5, [pc, #260]	; (403ff8 <task_mxt+0x15c>)
  403ef4:	a907      	add	r1, sp, #28
  403ef6:	4628      	mov	r0, r5
  403ef8:	4b40      	ldr	r3, [pc, #256]	; (403ffc <task_mxt+0x160>)
  403efa:	4798      	blx	r3
	status = mxt_init_device(device, MAXTOUCH_TWI_INTERFACE,
  403efc:	2302      	movs	r3, #2
  403efe:	4632      	mov	r2, r6
  403f00:	4629      	mov	r1, r5
  403f02:	a81e      	add	r0, sp, #120	; 0x78
  403f04:	4d3e      	ldr	r5, [pc, #248]	; (404000 <task_mxt+0x164>)
  403f06:	47a8      	blx	r5
	mxt_write_config_reg(device, mxt_get_object_address(device,
  403f08:	4622      	mov	r2, r4
  403f0a:	2106      	movs	r1, #6
  403f0c:	a81e      	add	r0, sp, #120	; 0x78
  403f0e:	4d3d      	ldr	r5, [pc, #244]	; (404004 <task_mxt+0x168>)
  403f10:	47a8      	blx	r5
  403f12:	2201      	movs	r2, #1
  403f14:	4601      	mov	r1, r0
  403f16:	a81e      	add	r0, sp, #120	; 0x78
  403f18:	4e3b      	ldr	r6, [pc, #236]	; (404008 <task_mxt+0x16c>)
  403f1a:	47b0      	blx	r6
	delay_ms(MXT_RESET_TIME);
  403f1c:	483b      	ldr	r0, [pc, #236]	; (40400c <task_mxt+0x170>)
  403f1e:	4b3c      	ldr	r3, [pc, #240]	; (404010 <task_mxt+0x174>)
  403f20:	4798      	blx	r3
	mxt_write_config_reg(device, mxt_get_object_address(device,
  403f22:	4622      	mov	r2, r4
  403f24:	2107      	movs	r1, #7
  403f26:	a81e      	add	r0, sp, #120	; 0x78
  403f28:	47a8      	blx	r5
  403f2a:	2220      	movs	r2, #32
  403f2c:	4601      	mov	r1, r0
  403f2e:	a81e      	add	r0, sp, #120	; 0x78
  403f30:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  403f32:	4622      	mov	r2, r4
  403f34:	2107      	movs	r1, #7
  403f36:	a81e      	add	r0, sp, #120	; 0x78
  403f38:	47a8      	blx	r5
  403f3a:	1c41      	adds	r1, r0, #1
  403f3c:	2210      	movs	r2, #16
  403f3e:	b289      	uxth	r1, r1
  403f40:	a81e      	add	r0, sp, #120	; 0x78
  403f42:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  403f44:	4622      	mov	r2, r4
  403f46:	2107      	movs	r1, #7
  403f48:	a81e      	add	r0, sp, #120	; 0x78
  403f4a:	47a8      	blx	r5
  403f4c:	1c81      	adds	r1, r0, #2
  403f4e:	224b      	movs	r2, #75	; 0x4b
  403f50:	b289      	uxth	r1, r1
  403f52:	a81e      	add	r0, sp, #120	; 0x78
  403f54:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  403f56:	4622      	mov	r2, r4
  403f58:	2107      	movs	r1, #7
  403f5a:	a81e      	add	r0, sp, #120	; 0x78
  403f5c:	47a8      	blx	r5
  403f5e:	1cc1      	adds	r1, r0, #3
  403f60:	2284      	movs	r2, #132	; 0x84
  403f62:	b289      	uxth	r1, r1
  403f64:	a81e      	add	r0, sp, #120	; 0x78
  403f66:	47b0      	blx	r6
	mxt_write_config_object(device, mxt_get_object_address(device,
  403f68:	4622      	mov	r2, r4
  403f6a:	2108      	movs	r1, #8
  403f6c:	a81e      	add	r0, sp, #120	; 0x78
  403f6e:	47a8      	blx	r5
  403f70:	aa04      	add	r2, sp, #16
  403f72:	4601      	mov	r1, r0
  403f74:	a81e      	add	r0, sp, #120	; 0x78
  403f76:	4f27      	ldr	r7, [pc, #156]	; (404014 <task_mxt+0x178>)
  403f78:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  403f7a:	4622      	mov	r2, r4
  403f7c:	2109      	movs	r1, #9
  403f7e:	a81e      	add	r0, sp, #120	; 0x78
  403f80:	47a8      	blx	r5
  403f82:	aa13      	add	r2, sp, #76	; 0x4c
  403f84:	4601      	mov	r1, r0
  403f86:	a81e      	add	r0, sp, #120	; 0x78
  403f88:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  403f8a:	4622      	mov	r2, r4
  403f8c:	212e      	movs	r1, #46	; 0x2e
  403f8e:	a81e      	add	r0, sp, #120	; 0x78
  403f90:	47a8      	blx	r5
  403f92:	aa01      	add	r2, sp, #4
  403f94:	4601      	mov	r1, r0
  403f96:	a81e      	add	r0, sp, #120	; 0x78
  403f98:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  403f9a:	4622      	mov	r2, r4
  403f9c:	2138      	movs	r1, #56	; 0x38
  403f9e:	a81e      	add	r0, sp, #120	; 0x78
  403fa0:	47a8      	blx	r5
  403fa2:	aa0a      	add	r2, sp, #40	; 0x28
  403fa4:	4601      	mov	r1, r0
  403fa6:	a81e      	add	r0, sp, #120	; 0x78
  403fa8:	47b8      	blx	r7
	mxt_write_config_reg(device, mxt_get_object_address(device,
  403faa:	4622      	mov	r2, r4
  403fac:	2106      	movs	r1, #6
  403fae:	a81e      	add	r0, sp, #120	; 0x78
  403fb0:	47a8      	blx	r5
  403fb2:	1c81      	adds	r1, r0, #2
  403fb4:	2201      	movs	r2, #1
  403fb6:	b289      	uxth	r1, r1
  403fb8:	a81e      	add	r0, sp, #120	; 0x78
  403fba:	47b0      	blx	r6
		  if (mxt_is_message_pending(&device)) {
  403fbc:	4c16      	ldr	r4, [pc, #88]	; (404018 <task_mxt+0x17c>)
		  	mxt_handler(&device, &touch.x, &touch.y);
  403fbe:	4f17      	ldr	r7, [pc, #92]	; (40401c <task_mxt+0x180>)
        xQueueSend( xQueueTouch, &touch, 0);           /* send mesage to queue */
  403fc0:	4e17      	ldr	r6, [pc, #92]	; (404020 <task_mxt+0x184>)
  403fc2:	e002      	b.n	403fca <task_mxt+0x12e>
     vTaskDelay(100);
  403fc4:	2064      	movs	r0, #100	; 0x64
  403fc6:	4b17      	ldr	r3, [pc, #92]	; (404024 <task_mxt+0x188>)
  403fc8:	4798      	blx	r3
		  if (mxt_is_message_pending(&device)) {
  403fca:	a81e      	add	r0, sp, #120	; 0x78
  403fcc:	47a0      	blx	r4
  403fce:	2800      	cmp	r0, #0
  403fd0:	d0f8      	beq.n	403fc4 <task_mxt+0x128>
		  	mxt_handler(&device, &touch.x, &touch.y);
  403fd2:	aa1d      	add	r2, sp, #116	; 0x74
  403fd4:	a91c      	add	r1, sp, #112	; 0x70
  403fd6:	a81e      	add	r0, sp, #120	; 0x78
  403fd8:	47b8      	blx	r7
        xQueueSend( xQueueTouch, &touch, 0);           /* send mesage to queue */
  403fda:	2300      	movs	r3, #0
  403fdc:	461a      	mov	r2, r3
  403fde:	a91c      	add	r1, sp, #112	; 0x70
  403fe0:	6830      	ldr	r0, [r6, #0]
  403fe2:	4d11      	ldr	r5, [pc, #68]	; (404028 <task_mxt+0x18c>)
  403fe4:	47a8      	blx	r5
  403fe6:	e7ed      	b.n	403fc4 <task_mxt+0x128>
  403fe8:	004070f0 	.word	0x004070f0
  403fec:	00061a80 	.word	0x00061a80
  403ff0:	08f0d180 	.word	0x08f0d180
  403ff4:	00401719 	.word	0x00401719
  403ff8:	40018000 	.word	0x40018000
  403ffc:	00401965 	.word	0x00401965
  404000:	004001d5 	.word	0x004001d5
  404004:	0040046d 	.word	0x0040046d
  404008:	00400525 	.word	0x00400525
  40400c:	003228d8 	.word	0x003228d8
  404010:	20400001 	.word	0x20400001
  404014:	004004ad 	.word	0x004004ad
  404018:	0040056d 	.word	0x0040056d
  40401c:	00403e2d 	.word	0x00403e2d
  404020:	2040c81c 	.word	0x2040c81c
  404024:	004030f9 	.word	0x004030f9
  404028:	004025ed 	.word	0x004025ed

0040402c <main>:
/************************************************************************/
/* main                                                                 */
/************************************************************************/

int main(void)
{
  40402c:	b500      	push	{lr}
  40402e:	b08b      	sub	sp, #44	; 0x2c
		.charlength   = USART_SERIAL_CHAR_LENGTH,
		.paritytype   = USART_SERIAL_PARITY,
		.stopbits     = USART_SERIAL_STOP_BIT
	};

	sysclk_init(); /* Initialize system clocks */
  404030:	4b29      	ldr	r3, [pc, #164]	; (4040d8 <main+0xac>)
  404032:	4798      	blx	r3
	board_init();  /* Initialize board */
  404034:	4b29      	ldr	r3, [pc, #164]	; (4040dc <main+0xb0>)
  404036:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  404038:	4d29      	ldr	r5, [pc, #164]	; (4040e0 <main+0xb4>)
  40403a:	4b2a      	ldr	r3, [pc, #168]	; (4040e4 <main+0xb8>)
  40403c:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40403e:	4a2a      	ldr	r2, [pc, #168]	; (4040e8 <main+0xbc>)
  404040:	4b2a      	ldr	r3, [pc, #168]	; (4040ec <main+0xc0>)
  404042:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  404044:	4a2a      	ldr	r2, [pc, #168]	; (4040f0 <main+0xc4>)
  404046:	4b2b      	ldr	r3, [pc, #172]	; (4040f4 <main+0xc8>)
  404048:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  40404a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40404e:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  404050:	23c0      	movs	r3, #192	; 0xc0
  404052:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  404054:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404058:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  40405a:	2400      	movs	r4, #0
  40405c:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40405e:	9408      	str	r4, [sp, #32]
  404060:	200e      	movs	r0, #14
  404062:	4b25      	ldr	r3, [pc, #148]	; (4040f8 <main+0xcc>)
  404064:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  404066:	4a25      	ldr	r2, [pc, #148]	; (4040fc <main+0xd0>)
  404068:	a904      	add	r1, sp, #16
  40406a:	4628      	mov	r0, r5
  40406c:	4b24      	ldr	r3, [pc, #144]	; (404100 <main+0xd4>)
  40406e:	4798      	blx	r3
		usart_enable_tx(p_usart);
  404070:	4628      	mov	r0, r5
  404072:	4b24      	ldr	r3, [pc, #144]	; (404104 <main+0xd8>)
  404074:	4798      	blx	r3
		usart_enable_rx(p_usart);
  404076:	4628      	mov	r0, r5
  404078:	4b23      	ldr	r3, [pc, #140]	; (404108 <main+0xdc>)
  40407a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40407c:	4e23      	ldr	r6, [pc, #140]	; (40410c <main+0xe0>)
  40407e:	6833      	ldr	r3, [r6, #0]
  404080:	4621      	mov	r1, r4
  404082:	6898      	ldr	r0, [r3, #8]
  404084:	4d22      	ldr	r5, [pc, #136]	; (404110 <main+0xe4>)
  404086:	47a8      	blx	r5
	setbuf(stdin, NULL);
  404088:	6833      	ldr	r3, [r6, #0]
  40408a:	4621      	mov	r1, r4
  40408c:	6858      	ldr	r0, [r3, #4]
  40408e:	47a8      	blx	r5
	
	/* Initialize stdio on USART */
	stdio_serial_init(USART_SERIAL_EXAMPLE, &usart_serial_options);
		
  /* Create task to handler touch */
  if (xTaskCreate(task_mxt, "mxt", TASK_MXT_STACK_SIZE, NULL, TASK_MXT_STACK_PRIORITY, NULL) != pdPASS) {
  404090:	9403      	str	r4, [sp, #12]
  404092:	9402      	str	r4, [sp, #8]
  404094:	9401      	str	r4, [sp, #4]
  404096:	9400      	str	r4, [sp, #0]
  404098:	4623      	mov	r3, r4
  40409a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40409e:	491d      	ldr	r1, [pc, #116]	; (404114 <main+0xe8>)
  4040a0:	481d      	ldr	r0, [pc, #116]	; (404118 <main+0xec>)
  4040a2:	4c1e      	ldr	r4, [pc, #120]	; (40411c <main+0xf0>)
  4040a4:	47a0      	blx	r4
  4040a6:	2801      	cmp	r0, #1
  4040a8:	d002      	beq.n	4040b0 <main+0x84>
    printf("Failed to create test led task\r\n");
  4040aa:	481d      	ldr	r0, [pc, #116]	; (404120 <main+0xf4>)
  4040ac:	4b1d      	ldr	r3, [pc, #116]	; (404124 <main+0xf8>)
  4040ae:	4798      	blx	r3
  }
  
  /* Create task to handler LCD */
  if (xTaskCreate(task_lcd, "lcd", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_STACK_PRIORITY, NULL) != pdPASS) {
  4040b0:	2300      	movs	r3, #0
  4040b2:	9303      	str	r3, [sp, #12]
  4040b4:	9302      	str	r3, [sp, #8]
  4040b6:	9301      	str	r3, [sp, #4]
  4040b8:	9300      	str	r3, [sp, #0]
  4040ba:	f44f 7200 	mov.w	r2, #512	; 0x200
  4040be:	491a      	ldr	r1, [pc, #104]	; (404128 <main+0xfc>)
  4040c0:	481a      	ldr	r0, [pc, #104]	; (40412c <main+0x100>)
  4040c2:	4c16      	ldr	r4, [pc, #88]	; (40411c <main+0xf0>)
  4040c4:	47a0      	blx	r4
  4040c6:	2801      	cmp	r0, #1
  4040c8:	d002      	beq.n	4040d0 <main+0xa4>
    printf("Failed to create test led task\r\n");
  4040ca:	4815      	ldr	r0, [pc, #84]	; (404120 <main+0xf4>)
  4040cc:	4b15      	ldr	r3, [pc, #84]	; (404124 <main+0xf8>)
  4040ce:	4798      	blx	r3
  }

  /* Start the scheduler. */
  vTaskStartScheduler();
  4040d0:	4b17      	ldr	r3, [pc, #92]	; (404130 <main+0x104>)
  4040d2:	4798      	blx	r3
  4040d4:	e7fe      	b.n	4040d4 <main+0xa8>
  4040d6:	bf00      	nop
  4040d8:	0040064d 	.word	0x0040064d
  4040dc:	004008dd 	.word	0x004008dd
  4040e0:	40028000 	.word	0x40028000
  4040e4:	2040c798 	.word	0x2040c798
  4040e8:	00403c35 	.word	0x00403c35
  4040ec:	2040c794 	.word	0x2040c794
  4040f0:	00403b59 	.word	0x00403b59
  4040f4:	2040c790 	.word	0x2040c790
  4040f8:	00401719 	.word	0x00401719
  4040fc:	08f0d180 	.word	0x08f0d180
  404100:	00401b8d 	.word	0x00401b8d
  404104:	00401be1 	.word	0x00401be1
  404108:	00401be7 	.word	0x00401be7
  40410c:	20400014 	.word	0x20400014
  404110:	00404929 	.word	0x00404929
  404114:	0041234c 	.word	0x0041234c
  404118:	00403e9d 	.word	0x00403e9d
  40411c:	00402bb1 	.word	0x00402bb1
  404120:	00412350 	.word	0x00412350
  404124:	00404185 	.word	0x00404185
  404128:	00412374 	.word	0x00412374
  40412c:	00403db9 	.word	0x00403db9
  404130:	00402de5 	.word	0x00402de5

00404134 <__libc_init_array>:
  404134:	b570      	push	{r4, r5, r6, lr}
  404136:	4e0f      	ldr	r6, [pc, #60]	; (404174 <__libc_init_array+0x40>)
  404138:	4d0f      	ldr	r5, [pc, #60]	; (404178 <__libc_init_array+0x44>)
  40413a:	1b76      	subs	r6, r6, r5
  40413c:	10b6      	asrs	r6, r6, #2
  40413e:	bf18      	it	ne
  404140:	2400      	movne	r4, #0
  404142:	d005      	beq.n	404150 <__libc_init_array+0x1c>
  404144:	3401      	adds	r4, #1
  404146:	f855 3b04 	ldr.w	r3, [r5], #4
  40414a:	4798      	blx	r3
  40414c:	42a6      	cmp	r6, r4
  40414e:	d1f9      	bne.n	404144 <__libc_init_array+0x10>
  404150:	4e0a      	ldr	r6, [pc, #40]	; (40417c <__libc_init_array+0x48>)
  404152:	4d0b      	ldr	r5, [pc, #44]	; (404180 <__libc_init_array+0x4c>)
  404154:	1b76      	subs	r6, r6, r5
  404156:	f00e f9d5 	bl	412504 <_init>
  40415a:	10b6      	asrs	r6, r6, #2
  40415c:	bf18      	it	ne
  40415e:	2400      	movne	r4, #0
  404160:	d006      	beq.n	404170 <__libc_init_array+0x3c>
  404162:	3401      	adds	r4, #1
  404164:	f855 3b04 	ldr.w	r3, [r5], #4
  404168:	4798      	blx	r3
  40416a:	42a6      	cmp	r6, r4
  40416c:	d1f9      	bne.n	404162 <__libc_init_array+0x2e>
  40416e:	bd70      	pop	{r4, r5, r6, pc}
  404170:	bd70      	pop	{r4, r5, r6, pc}
  404172:	bf00      	nop
  404174:	00412510 	.word	0x00412510
  404178:	00412510 	.word	0x00412510
  40417c:	00412518 	.word	0x00412518
  404180:	00412510 	.word	0x00412510

00404184 <iprintf>:
  404184:	b40f      	push	{r0, r1, r2, r3}
  404186:	b500      	push	{lr}
  404188:	4907      	ldr	r1, [pc, #28]	; (4041a8 <iprintf+0x24>)
  40418a:	b083      	sub	sp, #12
  40418c:	ab04      	add	r3, sp, #16
  40418e:	6808      	ldr	r0, [r1, #0]
  404190:	f853 2b04 	ldr.w	r2, [r3], #4
  404194:	6881      	ldr	r1, [r0, #8]
  404196:	9301      	str	r3, [sp, #4]
  404198:	f000 fd60 	bl	404c5c <_vfiprintf_r>
  40419c:	b003      	add	sp, #12
  40419e:	f85d eb04 	ldr.w	lr, [sp], #4
  4041a2:	b004      	add	sp, #16
  4041a4:	4770      	bx	lr
  4041a6:	bf00      	nop
  4041a8:	20400014 	.word	0x20400014

004041ac <malloc>:
  4041ac:	4b02      	ldr	r3, [pc, #8]	; (4041b8 <malloc+0xc>)
  4041ae:	4601      	mov	r1, r0
  4041b0:	6818      	ldr	r0, [r3, #0]
  4041b2:	f000 b803 	b.w	4041bc <_malloc_r>
  4041b6:	bf00      	nop
  4041b8:	20400014 	.word	0x20400014

004041bc <_malloc_r>:
  4041bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4041c0:	f101 060b 	add.w	r6, r1, #11
  4041c4:	2e16      	cmp	r6, #22
  4041c6:	b083      	sub	sp, #12
  4041c8:	4605      	mov	r5, r0
  4041ca:	f240 809e 	bls.w	40430a <_malloc_r+0x14e>
  4041ce:	f036 0607 	bics.w	r6, r6, #7
  4041d2:	f100 80bd 	bmi.w	404350 <_malloc_r+0x194>
  4041d6:	42b1      	cmp	r1, r6
  4041d8:	f200 80ba 	bhi.w	404350 <_malloc_r+0x194>
  4041dc:	f000 fb86 	bl	4048ec <__malloc_lock>
  4041e0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4041e4:	f0c0 8293 	bcc.w	40470e <_malloc_r+0x552>
  4041e8:	0a73      	lsrs	r3, r6, #9
  4041ea:	f000 80b8 	beq.w	40435e <_malloc_r+0x1a2>
  4041ee:	2b04      	cmp	r3, #4
  4041f0:	f200 8179 	bhi.w	4044e6 <_malloc_r+0x32a>
  4041f4:	09b3      	lsrs	r3, r6, #6
  4041f6:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4041fa:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4041fe:	00c3      	lsls	r3, r0, #3
  404200:	4fbf      	ldr	r7, [pc, #764]	; (404500 <_malloc_r+0x344>)
  404202:	443b      	add	r3, r7
  404204:	f1a3 0108 	sub.w	r1, r3, #8
  404208:	685c      	ldr	r4, [r3, #4]
  40420a:	42a1      	cmp	r1, r4
  40420c:	d106      	bne.n	40421c <_malloc_r+0x60>
  40420e:	e00c      	b.n	40422a <_malloc_r+0x6e>
  404210:	2a00      	cmp	r2, #0
  404212:	f280 80aa 	bge.w	40436a <_malloc_r+0x1ae>
  404216:	68e4      	ldr	r4, [r4, #12]
  404218:	42a1      	cmp	r1, r4
  40421a:	d006      	beq.n	40422a <_malloc_r+0x6e>
  40421c:	6863      	ldr	r3, [r4, #4]
  40421e:	f023 0303 	bic.w	r3, r3, #3
  404222:	1b9a      	subs	r2, r3, r6
  404224:	2a0f      	cmp	r2, #15
  404226:	ddf3      	ble.n	404210 <_malloc_r+0x54>
  404228:	4670      	mov	r0, lr
  40422a:	693c      	ldr	r4, [r7, #16]
  40422c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404514 <_malloc_r+0x358>
  404230:	4574      	cmp	r4, lr
  404232:	f000 81ab 	beq.w	40458c <_malloc_r+0x3d0>
  404236:	6863      	ldr	r3, [r4, #4]
  404238:	f023 0303 	bic.w	r3, r3, #3
  40423c:	1b9a      	subs	r2, r3, r6
  40423e:	2a0f      	cmp	r2, #15
  404240:	f300 8190 	bgt.w	404564 <_malloc_r+0x3a8>
  404244:	2a00      	cmp	r2, #0
  404246:	f8c7 e014 	str.w	lr, [r7, #20]
  40424a:	f8c7 e010 	str.w	lr, [r7, #16]
  40424e:	f280 809d 	bge.w	40438c <_malloc_r+0x1d0>
  404252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404256:	f080 8161 	bcs.w	40451c <_malloc_r+0x360>
  40425a:	08db      	lsrs	r3, r3, #3
  40425c:	f103 0c01 	add.w	ip, r3, #1
  404260:	1099      	asrs	r1, r3, #2
  404262:	687a      	ldr	r2, [r7, #4]
  404264:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404268:	f8c4 8008 	str.w	r8, [r4, #8]
  40426c:	2301      	movs	r3, #1
  40426e:	408b      	lsls	r3, r1
  404270:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404274:	4313      	orrs	r3, r2
  404276:	3908      	subs	r1, #8
  404278:	60e1      	str	r1, [r4, #12]
  40427a:	607b      	str	r3, [r7, #4]
  40427c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404280:	f8c8 400c 	str.w	r4, [r8, #12]
  404284:	1082      	asrs	r2, r0, #2
  404286:	2401      	movs	r4, #1
  404288:	4094      	lsls	r4, r2
  40428a:	429c      	cmp	r4, r3
  40428c:	f200 808b 	bhi.w	4043a6 <_malloc_r+0x1ea>
  404290:	421c      	tst	r4, r3
  404292:	d106      	bne.n	4042a2 <_malloc_r+0xe6>
  404294:	f020 0003 	bic.w	r0, r0, #3
  404298:	0064      	lsls	r4, r4, #1
  40429a:	421c      	tst	r4, r3
  40429c:	f100 0004 	add.w	r0, r0, #4
  4042a0:	d0fa      	beq.n	404298 <_malloc_r+0xdc>
  4042a2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4042a6:	46cc      	mov	ip, r9
  4042a8:	4680      	mov	r8, r0
  4042aa:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4042ae:	459c      	cmp	ip, r3
  4042b0:	d107      	bne.n	4042c2 <_malloc_r+0x106>
  4042b2:	e16d      	b.n	404590 <_malloc_r+0x3d4>
  4042b4:	2a00      	cmp	r2, #0
  4042b6:	f280 817b 	bge.w	4045b0 <_malloc_r+0x3f4>
  4042ba:	68db      	ldr	r3, [r3, #12]
  4042bc:	459c      	cmp	ip, r3
  4042be:	f000 8167 	beq.w	404590 <_malloc_r+0x3d4>
  4042c2:	6859      	ldr	r1, [r3, #4]
  4042c4:	f021 0103 	bic.w	r1, r1, #3
  4042c8:	1b8a      	subs	r2, r1, r6
  4042ca:	2a0f      	cmp	r2, #15
  4042cc:	ddf2      	ble.n	4042b4 <_malloc_r+0xf8>
  4042ce:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4042d2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4042d6:	9300      	str	r3, [sp, #0]
  4042d8:	199c      	adds	r4, r3, r6
  4042da:	4628      	mov	r0, r5
  4042dc:	f046 0601 	orr.w	r6, r6, #1
  4042e0:	f042 0501 	orr.w	r5, r2, #1
  4042e4:	605e      	str	r6, [r3, #4]
  4042e6:	f8c8 c00c 	str.w	ip, [r8, #12]
  4042ea:	f8cc 8008 	str.w	r8, [ip, #8]
  4042ee:	617c      	str	r4, [r7, #20]
  4042f0:	613c      	str	r4, [r7, #16]
  4042f2:	f8c4 e00c 	str.w	lr, [r4, #12]
  4042f6:	f8c4 e008 	str.w	lr, [r4, #8]
  4042fa:	6065      	str	r5, [r4, #4]
  4042fc:	505a      	str	r2, [r3, r1]
  4042fe:	f000 fafb 	bl	4048f8 <__malloc_unlock>
  404302:	9b00      	ldr	r3, [sp, #0]
  404304:	f103 0408 	add.w	r4, r3, #8
  404308:	e01e      	b.n	404348 <_malloc_r+0x18c>
  40430a:	2910      	cmp	r1, #16
  40430c:	d820      	bhi.n	404350 <_malloc_r+0x194>
  40430e:	f000 faed 	bl	4048ec <__malloc_lock>
  404312:	2610      	movs	r6, #16
  404314:	2318      	movs	r3, #24
  404316:	2002      	movs	r0, #2
  404318:	4f79      	ldr	r7, [pc, #484]	; (404500 <_malloc_r+0x344>)
  40431a:	443b      	add	r3, r7
  40431c:	f1a3 0208 	sub.w	r2, r3, #8
  404320:	685c      	ldr	r4, [r3, #4]
  404322:	4294      	cmp	r4, r2
  404324:	f000 813d 	beq.w	4045a2 <_malloc_r+0x3e6>
  404328:	6863      	ldr	r3, [r4, #4]
  40432a:	68e1      	ldr	r1, [r4, #12]
  40432c:	68a6      	ldr	r6, [r4, #8]
  40432e:	f023 0303 	bic.w	r3, r3, #3
  404332:	4423      	add	r3, r4
  404334:	4628      	mov	r0, r5
  404336:	685a      	ldr	r2, [r3, #4]
  404338:	60f1      	str	r1, [r6, #12]
  40433a:	f042 0201 	orr.w	r2, r2, #1
  40433e:	608e      	str	r6, [r1, #8]
  404340:	605a      	str	r2, [r3, #4]
  404342:	f000 fad9 	bl	4048f8 <__malloc_unlock>
  404346:	3408      	adds	r4, #8
  404348:	4620      	mov	r0, r4
  40434a:	b003      	add	sp, #12
  40434c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404350:	2400      	movs	r4, #0
  404352:	230c      	movs	r3, #12
  404354:	4620      	mov	r0, r4
  404356:	602b      	str	r3, [r5, #0]
  404358:	b003      	add	sp, #12
  40435a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40435e:	2040      	movs	r0, #64	; 0x40
  404360:	f44f 7300 	mov.w	r3, #512	; 0x200
  404364:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404368:	e74a      	b.n	404200 <_malloc_r+0x44>
  40436a:	4423      	add	r3, r4
  40436c:	68e1      	ldr	r1, [r4, #12]
  40436e:	685a      	ldr	r2, [r3, #4]
  404370:	68a6      	ldr	r6, [r4, #8]
  404372:	f042 0201 	orr.w	r2, r2, #1
  404376:	60f1      	str	r1, [r6, #12]
  404378:	4628      	mov	r0, r5
  40437a:	608e      	str	r6, [r1, #8]
  40437c:	605a      	str	r2, [r3, #4]
  40437e:	f000 fabb 	bl	4048f8 <__malloc_unlock>
  404382:	3408      	adds	r4, #8
  404384:	4620      	mov	r0, r4
  404386:	b003      	add	sp, #12
  404388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40438c:	4423      	add	r3, r4
  40438e:	4628      	mov	r0, r5
  404390:	685a      	ldr	r2, [r3, #4]
  404392:	f042 0201 	orr.w	r2, r2, #1
  404396:	605a      	str	r2, [r3, #4]
  404398:	f000 faae 	bl	4048f8 <__malloc_unlock>
  40439c:	3408      	adds	r4, #8
  40439e:	4620      	mov	r0, r4
  4043a0:	b003      	add	sp, #12
  4043a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4043a6:	68bc      	ldr	r4, [r7, #8]
  4043a8:	6863      	ldr	r3, [r4, #4]
  4043aa:	f023 0803 	bic.w	r8, r3, #3
  4043ae:	45b0      	cmp	r8, r6
  4043b0:	d304      	bcc.n	4043bc <_malloc_r+0x200>
  4043b2:	eba8 0306 	sub.w	r3, r8, r6
  4043b6:	2b0f      	cmp	r3, #15
  4043b8:	f300 8085 	bgt.w	4044c6 <_malloc_r+0x30a>
  4043bc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404518 <_malloc_r+0x35c>
  4043c0:	4b50      	ldr	r3, [pc, #320]	; (404504 <_malloc_r+0x348>)
  4043c2:	f8d9 2000 	ldr.w	r2, [r9]
  4043c6:	681b      	ldr	r3, [r3, #0]
  4043c8:	3201      	adds	r2, #1
  4043ca:	4433      	add	r3, r6
  4043cc:	eb04 0a08 	add.w	sl, r4, r8
  4043d0:	f000 8155 	beq.w	40467e <_malloc_r+0x4c2>
  4043d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4043d8:	330f      	adds	r3, #15
  4043da:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4043de:	f02b 0b0f 	bic.w	fp, fp, #15
  4043e2:	4659      	mov	r1, fp
  4043e4:	4628      	mov	r0, r5
  4043e6:	f000 fa8d 	bl	404904 <_sbrk_r>
  4043ea:	1c41      	adds	r1, r0, #1
  4043ec:	4602      	mov	r2, r0
  4043ee:	f000 80fc 	beq.w	4045ea <_malloc_r+0x42e>
  4043f2:	4582      	cmp	sl, r0
  4043f4:	f200 80f7 	bhi.w	4045e6 <_malloc_r+0x42a>
  4043f8:	4b43      	ldr	r3, [pc, #268]	; (404508 <_malloc_r+0x34c>)
  4043fa:	6819      	ldr	r1, [r3, #0]
  4043fc:	4459      	add	r1, fp
  4043fe:	6019      	str	r1, [r3, #0]
  404400:	f000 814d 	beq.w	40469e <_malloc_r+0x4e2>
  404404:	f8d9 0000 	ldr.w	r0, [r9]
  404408:	3001      	adds	r0, #1
  40440a:	bf1b      	ittet	ne
  40440c:	eba2 0a0a 	subne.w	sl, r2, sl
  404410:	4451      	addne	r1, sl
  404412:	f8c9 2000 	streq.w	r2, [r9]
  404416:	6019      	strne	r1, [r3, #0]
  404418:	f012 0107 	ands.w	r1, r2, #7
  40441c:	f000 8115 	beq.w	40464a <_malloc_r+0x48e>
  404420:	f1c1 0008 	rsb	r0, r1, #8
  404424:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404428:	4402      	add	r2, r0
  40442a:	3108      	adds	r1, #8
  40442c:	eb02 090b 	add.w	r9, r2, fp
  404430:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404434:	eba1 0909 	sub.w	r9, r1, r9
  404438:	4649      	mov	r1, r9
  40443a:	4628      	mov	r0, r5
  40443c:	9301      	str	r3, [sp, #4]
  40443e:	9200      	str	r2, [sp, #0]
  404440:	f000 fa60 	bl	404904 <_sbrk_r>
  404444:	1c43      	adds	r3, r0, #1
  404446:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40444a:	f000 8143 	beq.w	4046d4 <_malloc_r+0x518>
  40444e:	1a80      	subs	r0, r0, r2
  404450:	4448      	add	r0, r9
  404452:	f040 0001 	orr.w	r0, r0, #1
  404456:	6819      	ldr	r1, [r3, #0]
  404458:	60ba      	str	r2, [r7, #8]
  40445a:	4449      	add	r1, r9
  40445c:	42bc      	cmp	r4, r7
  40445e:	6050      	str	r0, [r2, #4]
  404460:	6019      	str	r1, [r3, #0]
  404462:	d017      	beq.n	404494 <_malloc_r+0x2d8>
  404464:	f1b8 0f0f 	cmp.w	r8, #15
  404468:	f240 80fb 	bls.w	404662 <_malloc_r+0x4a6>
  40446c:	6860      	ldr	r0, [r4, #4]
  40446e:	f1a8 020c 	sub.w	r2, r8, #12
  404472:	f022 0207 	bic.w	r2, r2, #7
  404476:	eb04 0e02 	add.w	lr, r4, r2
  40447a:	f000 0001 	and.w	r0, r0, #1
  40447e:	f04f 0c05 	mov.w	ip, #5
  404482:	4310      	orrs	r0, r2
  404484:	2a0f      	cmp	r2, #15
  404486:	6060      	str	r0, [r4, #4]
  404488:	f8ce c004 	str.w	ip, [lr, #4]
  40448c:	f8ce c008 	str.w	ip, [lr, #8]
  404490:	f200 8117 	bhi.w	4046c2 <_malloc_r+0x506>
  404494:	4b1d      	ldr	r3, [pc, #116]	; (40450c <_malloc_r+0x350>)
  404496:	68bc      	ldr	r4, [r7, #8]
  404498:	681a      	ldr	r2, [r3, #0]
  40449a:	4291      	cmp	r1, r2
  40449c:	bf88      	it	hi
  40449e:	6019      	strhi	r1, [r3, #0]
  4044a0:	4b1b      	ldr	r3, [pc, #108]	; (404510 <_malloc_r+0x354>)
  4044a2:	681a      	ldr	r2, [r3, #0]
  4044a4:	4291      	cmp	r1, r2
  4044a6:	6862      	ldr	r2, [r4, #4]
  4044a8:	bf88      	it	hi
  4044aa:	6019      	strhi	r1, [r3, #0]
  4044ac:	f022 0203 	bic.w	r2, r2, #3
  4044b0:	4296      	cmp	r6, r2
  4044b2:	eba2 0306 	sub.w	r3, r2, r6
  4044b6:	d801      	bhi.n	4044bc <_malloc_r+0x300>
  4044b8:	2b0f      	cmp	r3, #15
  4044ba:	dc04      	bgt.n	4044c6 <_malloc_r+0x30a>
  4044bc:	4628      	mov	r0, r5
  4044be:	f000 fa1b 	bl	4048f8 <__malloc_unlock>
  4044c2:	2400      	movs	r4, #0
  4044c4:	e740      	b.n	404348 <_malloc_r+0x18c>
  4044c6:	19a2      	adds	r2, r4, r6
  4044c8:	f043 0301 	orr.w	r3, r3, #1
  4044cc:	f046 0601 	orr.w	r6, r6, #1
  4044d0:	6066      	str	r6, [r4, #4]
  4044d2:	4628      	mov	r0, r5
  4044d4:	60ba      	str	r2, [r7, #8]
  4044d6:	6053      	str	r3, [r2, #4]
  4044d8:	f000 fa0e 	bl	4048f8 <__malloc_unlock>
  4044dc:	3408      	adds	r4, #8
  4044de:	4620      	mov	r0, r4
  4044e0:	b003      	add	sp, #12
  4044e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044e6:	2b14      	cmp	r3, #20
  4044e8:	d971      	bls.n	4045ce <_malloc_r+0x412>
  4044ea:	2b54      	cmp	r3, #84	; 0x54
  4044ec:	f200 80a3 	bhi.w	404636 <_malloc_r+0x47a>
  4044f0:	0b33      	lsrs	r3, r6, #12
  4044f2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4044f6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4044fa:	00c3      	lsls	r3, r0, #3
  4044fc:	e680      	b.n	404200 <_malloc_r+0x44>
  4044fe:	bf00      	nop
  404500:	20400440 	.word	0x20400440
  404504:	2040c78c 	.word	0x2040c78c
  404508:	2040c75c 	.word	0x2040c75c
  40450c:	2040c784 	.word	0x2040c784
  404510:	2040c788 	.word	0x2040c788
  404514:	20400448 	.word	0x20400448
  404518:	20400848 	.word	0x20400848
  40451c:	0a5a      	lsrs	r2, r3, #9
  40451e:	2a04      	cmp	r2, #4
  404520:	d95b      	bls.n	4045da <_malloc_r+0x41e>
  404522:	2a14      	cmp	r2, #20
  404524:	f200 80ae 	bhi.w	404684 <_malloc_r+0x4c8>
  404528:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40452c:	00c9      	lsls	r1, r1, #3
  40452e:	325b      	adds	r2, #91	; 0x5b
  404530:	eb07 0c01 	add.w	ip, r7, r1
  404534:	5879      	ldr	r1, [r7, r1]
  404536:	f1ac 0c08 	sub.w	ip, ip, #8
  40453a:	458c      	cmp	ip, r1
  40453c:	f000 8088 	beq.w	404650 <_malloc_r+0x494>
  404540:	684a      	ldr	r2, [r1, #4]
  404542:	f022 0203 	bic.w	r2, r2, #3
  404546:	4293      	cmp	r3, r2
  404548:	d273      	bcs.n	404632 <_malloc_r+0x476>
  40454a:	6889      	ldr	r1, [r1, #8]
  40454c:	458c      	cmp	ip, r1
  40454e:	d1f7      	bne.n	404540 <_malloc_r+0x384>
  404550:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404554:	687b      	ldr	r3, [r7, #4]
  404556:	60e2      	str	r2, [r4, #12]
  404558:	f8c4 c008 	str.w	ip, [r4, #8]
  40455c:	6094      	str	r4, [r2, #8]
  40455e:	f8cc 400c 	str.w	r4, [ip, #12]
  404562:	e68f      	b.n	404284 <_malloc_r+0xc8>
  404564:	19a1      	adds	r1, r4, r6
  404566:	f046 0c01 	orr.w	ip, r6, #1
  40456a:	f042 0601 	orr.w	r6, r2, #1
  40456e:	f8c4 c004 	str.w	ip, [r4, #4]
  404572:	4628      	mov	r0, r5
  404574:	6179      	str	r1, [r7, #20]
  404576:	6139      	str	r1, [r7, #16]
  404578:	f8c1 e00c 	str.w	lr, [r1, #12]
  40457c:	f8c1 e008 	str.w	lr, [r1, #8]
  404580:	604e      	str	r6, [r1, #4]
  404582:	50e2      	str	r2, [r4, r3]
  404584:	f000 f9b8 	bl	4048f8 <__malloc_unlock>
  404588:	3408      	adds	r4, #8
  40458a:	e6dd      	b.n	404348 <_malloc_r+0x18c>
  40458c:	687b      	ldr	r3, [r7, #4]
  40458e:	e679      	b.n	404284 <_malloc_r+0xc8>
  404590:	f108 0801 	add.w	r8, r8, #1
  404594:	f018 0f03 	tst.w	r8, #3
  404598:	f10c 0c08 	add.w	ip, ip, #8
  40459c:	f47f ae85 	bne.w	4042aa <_malloc_r+0xee>
  4045a0:	e02d      	b.n	4045fe <_malloc_r+0x442>
  4045a2:	68dc      	ldr	r4, [r3, #12]
  4045a4:	42a3      	cmp	r3, r4
  4045a6:	bf08      	it	eq
  4045a8:	3002      	addeq	r0, #2
  4045aa:	f43f ae3e 	beq.w	40422a <_malloc_r+0x6e>
  4045ae:	e6bb      	b.n	404328 <_malloc_r+0x16c>
  4045b0:	4419      	add	r1, r3
  4045b2:	461c      	mov	r4, r3
  4045b4:	684a      	ldr	r2, [r1, #4]
  4045b6:	68db      	ldr	r3, [r3, #12]
  4045b8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4045bc:	f042 0201 	orr.w	r2, r2, #1
  4045c0:	604a      	str	r2, [r1, #4]
  4045c2:	4628      	mov	r0, r5
  4045c4:	60f3      	str	r3, [r6, #12]
  4045c6:	609e      	str	r6, [r3, #8]
  4045c8:	f000 f996 	bl	4048f8 <__malloc_unlock>
  4045cc:	e6bc      	b.n	404348 <_malloc_r+0x18c>
  4045ce:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4045d2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4045d6:	00c3      	lsls	r3, r0, #3
  4045d8:	e612      	b.n	404200 <_malloc_r+0x44>
  4045da:	099a      	lsrs	r2, r3, #6
  4045dc:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4045e0:	00c9      	lsls	r1, r1, #3
  4045e2:	3238      	adds	r2, #56	; 0x38
  4045e4:	e7a4      	b.n	404530 <_malloc_r+0x374>
  4045e6:	42bc      	cmp	r4, r7
  4045e8:	d054      	beq.n	404694 <_malloc_r+0x4d8>
  4045ea:	68bc      	ldr	r4, [r7, #8]
  4045ec:	6862      	ldr	r2, [r4, #4]
  4045ee:	f022 0203 	bic.w	r2, r2, #3
  4045f2:	e75d      	b.n	4044b0 <_malloc_r+0x2f4>
  4045f4:	f859 3908 	ldr.w	r3, [r9], #-8
  4045f8:	4599      	cmp	r9, r3
  4045fa:	f040 8086 	bne.w	40470a <_malloc_r+0x54e>
  4045fe:	f010 0f03 	tst.w	r0, #3
  404602:	f100 30ff 	add.w	r0, r0, #4294967295
  404606:	d1f5      	bne.n	4045f4 <_malloc_r+0x438>
  404608:	687b      	ldr	r3, [r7, #4]
  40460a:	ea23 0304 	bic.w	r3, r3, r4
  40460e:	607b      	str	r3, [r7, #4]
  404610:	0064      	lsls	r4, r4, #1
  404612:	429c      	cmp	r4, r3
  404614:	f63f aec7 	bhi.w	4043a6 <_malloc_r+0x1ea>
  404618:	2c00      	cmp	r4, #0
  40461a:	f43f aec4 	beq.w	4043a6 <_malloc_r+0x1ea>
  40461e:	421c      	tst	r4, r3
  404620:	4640      	mov	r0, r8
  404622:	f47f ae3e 	bne.w	4042a2 <_malloc_r+0xe6>
  404626:	0064      	lsls	r4, r4, #1
  404628:	421c      	tst	r4, r3
  40462a:	f100 0004 	add.w	r0, r0, #4
  40462e:	d0fa      	beq.n	404626 <_malloc_r+0x46a>
  404630:	e637      	b.n	4042a2 <_malloc_r+0xe6>
  404632:	468c      	mov	ip, r1
  404634:	e78c      	b.n	404550 <_malloc_r+0x394>
  404636:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40463a:	d815      	bhi.n	404668 <_malloc_r+0x4ac>
  40463c:	0bf3      	lsrs	r3, r6, #15
  40463e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404642:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404646:	00c3      	lsls	r3, r0, #3
  404648:	e5da      	b.n	404200 <_malloc_r+0x44>
  40464a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40464e:	e6ed      	b.n	40442c <_malloc_r+0x270>
  404650:	687b      	ldr	r3, [r7, #4]
  404652:	1092      	asrs	r2, r2, #2
  404654:	2101      	movs	r1, #1
  404656:	fa01 f202 	lsl.w	r2, r1, r2
  40465a:	4313      	orrs	r3, r2
  40465c:	607b      	str	r3, [r7, #4]
  40465e:	4662      	mov	r2, ip
  404660:	e779      	b.n	404556 <_malloc_r+0x39a>
  404662:	2301      	movs	r3, #1
  404664:	6053      	str	r3, [r2, #4]
  404666:	e729      	b.n	4044bc <_malloc_r+0x300>
  404668:	f240 5254 	movw	r2, #1364	; 0x554
  40466c:	4293      	cmp	r3, r2
  40466e:	d822      	bhi.n	4046b6 <_malloc_r+0x4fa>
  404670:	0cb3      	lsrs	r3, r6, #18
  404672:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404676:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40467a:	00c3      	lsls	r3, r0, #3
  40467c:	e5c0      	b.n	404200 <_malloc_r+0x44>
  40467e:	f103 0b10 	add.w	fp, r3, #16
  404682:	e6ae      	b.n	4043e2 <_malloc_r+0x226>
  404684:	2a54      	cmp	r2, #84	; 0x54
  404686:	d829      	bhi.n	4046dc <_malloc_r+0x520>
  404688:	0b1a      	lsrs	r2, r3, #12
  40468a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40468e:	00c9      	lsls	r1, r1, #3
  404690:	326e      	adds	r2, #110	; 0x6e
  404692:	e74d      	b.n	404530 <_malloc_r+0x374>
  404694:	4b20      	ldr	r3, [pc, #128]	; (404718 <_malloc_r+0x55c>)
  404696:	6819      	ldr	r1, [r3, #0]
  404698:	4459      	add	r1, fp
  40469a:	6019      	str	r1, [r3, #0]
  40469c:	e6b2      	b.n	404404 <_malloc_r+0x248>
  40469e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4046a2:	2800      	cmp	r0, #0
  4046a4:	f47f aeae 	bne.w	404404 <_malloc_r+0x248>
  4046a8:	eb08 030b 	add.w	r3, r8, fp
  4046ac:	68ba      	ldr	r2, [r7, #8]
  4046ae:	f043 0301 	orr.w	r3, r3, #1
  4046b2:	6053      	str	r3, [r2, #4]
  4046b4:	e6ee      	b.n	404494 <_malloc_r+0x2d8>
  4046b6:	207f      	movs	r0, #127	; 0x7f
  4046b8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4046bc:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4046c0:	e59e      	b.n	404200 <_malloc_r+0x44>
  4046c2:	f104 0108 	add.w	r1, r4, #8
  4046c6:	4628      	mov	r0, r5
  4046c8:	9300      	str	r3, [sp, #0]
  4046ca:	f001 fbe3 	bl	405e94 <_free_r>
  4046ce:	9b00      	ldr	r3, [sp, #0]
  4046d0:	6819      	ldr	r1, [r3, #0]
  4046d2:	e6df      	b.n	404494 <_malloc_r+0x2d8>
  4046d4:	2001      	movs	r0, #1
  4046d6:	f04f 0900 	mov.w	r9, #0
  4046da:	e6bc      	b.n	404456 <_malloc_r+0x29a>
  4046dc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4046e0:	d805      	bhi.n	4046ee <_malloc_r+0x532>
  4046e2:	0bda      	lsrs	r2, r3, #15
  4046e4:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4046e8:	00c9      	lsls	r1, r1, #3
  4046ea:	3277      	adds	r2, #119	; 0x77
  4046ec:	e720      	b.n	404530 <_malloc_r+0x374>
  4046ee:	f240 5154 	movw	r1, #1364	; 0x554
  4046f2:	428a      	cmp	r2, r1
  4046f4:	d805      	bhi.n	404702 <_malloc_r+0x546>
  4046f6:	0c9a      	lsrs	r2, r3, #18
  4046f8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4046fc:	00c9      	lsls	r1, r1, #3
  4046fe:	327c      	adds	r2, #124	; 0x7c
  404700:	e716      	b.n	404530 <_malloc_r+0x374>
  404702:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404706:	227e      	movs	r2, #126	; 0x7e
  404708:	e712      	b.n	404530 <_malloc_r+0x374>
  40470a:	687b      	ldr	r3, [r7, #4]
  40470c:	e780      	b.n	404610 <_malloc_r+0x454>
  40470e:	08f0      	lsrs	r0, r6, #3
  404710:	f106 0308 	add.w	r3, r6, #8
  404714:	e600      	b.n	404318 <_malloc_r+0x15c>
  404716:	bf00      	nop
  404718:	2040c75c 	.word	0x2040c75c

0040471c <memcpy>:
  40471c:	4684      	mov	ip, r0
  40471e:	ea41 0300 	orr.w	r3, r1, r0
  404722:	f013 0303 	ands.w	r3, r3, #3
  404726:	d16d      	bne.n	404804 <memcpy+0xe8>
  404728:	3a40      	subs	r2, #64	; 0x40
  40472a:	d341      	bcc.n	4047b0 <memcpy+0x94>
  40472c:	f851 3b04 	ldr.w	r3, [r1], #4
  404730:	f840 3b04 	str.w	r3, [r0], #4
  404734:	f851 3b04 	ldr.w	r3, [r1], #4
  404738:	f840 3b04 	str.w	r3, [r0], #4
  40473c:	f851 3b04 	ldr.w	r3, [r1], #4
  404740:	f840 3b04 	str.w	r3, [r0], #4
  404744:	f851 3b04 	ldr.w	r3, [r1], #4
  404748:	f840 3b04 	str.w	r3, [r0], #4
  40474c:	f851 3b04 	ldr.w	r3, [r1], #4
  404750:	f840 3b04 	str.w	r3, [r0], #4
  404754:	f851 3b04 	ldr.w	r3, [r1], #4
  404758:	f840 3b04 	str.w	r3, [r0], #4
  40475c:	f851 3b04 	ldr.w	r3, [r1], #4
  404760:	f840 3b04 	str.w	r3, [r0], #4
  404764:	f851 3b04 	ldr.w	r3, [r1], #4
  404768:	f840 3b04 	str.w	r3, [r0], #4
  40476c:	f851 3b04 	ldr.w	r3, [r1], #4
  404770:	f840 3b04 	str.w	r3, [r0], #4
  404774:	f851 3b04 	ldr.w	r3, [r1], #4
  404778:	f840 3b04 	str.w	r3, [r0], #4
  40477c:	f851 3b04 	ldr.w	r3, [r1], #4
  404780:	f840 3b04 	str.w	r3, [r0], #4
  404784:	f851 3b04 	ldr.w	r3, [r1], #4
  404788:	f840 3b04 	str.w	r3, [r0], #4
  40478c:	f851 3b04 	ldr.w	r3, [r1], #4
  404790:	f840 3b04 	str.w	r3, [r0], #4
  404794:	f851 3b04 	ldr.w	r3, [r1], #4
  404798:	f840 3b04 	str.w	r3, [r0], #4
  40479c:	f851 3b04 	ldr.w	r3, [r1], #4
  4047a0:	f840 3b04 	str.w	r3, [r0], #4
  4047a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4047a8:	f840 3b04 	str.w	r3, [r0], #4
  4047ac:	3a40      	subs	r2, #64	; 0x40
  4047ae:	d2bd      	bcs.n	40472c <memcpy+0x10>
  4047b0:	3230      	adds	r2, #48	; 0x30
  4047b2:	d311      	bcc.n	4047d8 <memcpy+0xbc>
  4047b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4047b8:	f840 3b04 	str.w	r3, [r0], #4
  4047bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4047c0:	f840 3b04 	str.w	r3, [r0], #4
  4047c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4047c8:	f840 3b04 	str.w	r3, [r0], #4
  4047cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4047d0:	f840 3b04 	str.w	r3, [r0], #4
  4047d4:	3a10      	subs	r2, #16
  4047d6:	d2ed      	bcs.n	4047b4 <memcpy+0x98>
  4047d8:	320c      	adds	r2, #12
  4047da:	d305      	bcc.n	4047e8 <memcpy+0xcc>
  4047dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4047e0:	f840 3b04 	str.w	r3, [r0], #4
  4047e4:	3a04      	subs	r2, #4
  4047e6:	d2f9      	bcs.n	4047dc <memcpy+0xc0>
  4047e8:	3204      	adds	r2, #4
  4047ea:	d008      	beq.n	4047fe <memcpy+0xe2>
  4047ec:	07d2      	lsls	r2, r2, #31
  4047ee:	bf1c      	itt	ne
  4047f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4047f4:	f800 3b01 	strbne.w	r3, [r0], #1
  4047f8:	d301      	bcc.n	4047fe <memcpy+0xe2>
  4047fa:	880b      	ldrh	r3, [r1, #0]
  4047fc:	8003      	strh	r3, [r0, #0]
  4047fe:	4660      	mov	r0, ip
  404800:	4770      	bx	lr
  404802:	bf00      	nop
  404804:	2a08      	cmp	r2, #8
  404806:	d313      	bcc.n	404830 <memcpy+0x114>
  404808:	078b      	lsls	r3, r1, #30
  40480a:	d08d      	beq.n	404728 <memcpy+0xc>
  40480c:	f010 0303 	ands.w	r3, r0, #3
  404810:	d08a      	beq.n	404728 <memcpy+0xc>
  404812:	f1c3 0304 	rsb	r3, r3, #4
  404816:	1ad2      	subs	r2, r2, r3
  404818:	07db      	lsls	r3, r3, #31
  40481a:	bf1c      	itt	ne
  40481c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404820:	f800 3b01 	strbne.w	r3, [r0], #1
  404824:	d380      	bcc.n	404728 <memcpy+0xc>
  404826:	f831 3b02 	ldrh.w	r3, [r1], #2
  40482a:	f820 3b02 	strh.w	r3, [r0], #2
  40482e:	e77b      	b.n	404728 <memcpy+0xc>
  404830:	3a04      	subs	r2, #4
  404832:	d3d9      	bcc.n	4047e8 <memcpy+0xcc>
  404834:	3a01      	subs	r2, #1
  404836:	f811 3b01 	ldrb.w	r3, [r1], #1
  40483a:	f800 3b01 	strb.w	r3, [r0], #1
  40483e:	d2f9      	bcs.n	404834 <memcpy+0x118>
  404840:	780b      	ldrb	r3, [r1, #0]
  404842:	7003      	strb	r3, [r0, #0]
  404844:	784b      	ldrb	r3, [r1, #1]
  404846:	7043      	strb	r3, [r0, #1]
  404848:	788b      	ldrb	r3, [r1, #2]
  40484a:	7083      	strb	r3, [r0, #2]
  40484c:	4660      	mov	r0, ip
  40484e:	4770      	bx	lr

00404850 <memset>:
  404850:	b470      	push	{r4, r5, r6}
  404852:	0786      	lsls	r6, r0, #30
  404854:	d046      	beq.n	4048e4 <memset+0x94>
  404856:	1e54      	subs	r4, r2, #1
  404858:	2a00      	cmp	r2, #0
  40485a:	d041      	beq.n	4048e0 <memset+0x90>
  40485c:	b2ca      	uxtb	r2, r1
  40485e:	4603      	mov	r3, r0
  404860:	e002      	b.n	404868 <memset+0x18>
  404862:	f114 34ff 	adds.w	r4, r4, #4294967295
  404866:	d33b      	bcc.n	4048e0 <memset+0x90>
  404868:	f803 2b01 	strb.w	r2, [r3], #1
  40486c:	079d      	lsls	r5, r3, #30
  40486e:	d1f8      	bne.n	404862 <memset+0x12>
  404870:	2c03      	cmp	r4, #3
  404872:	d92e      	bls.n	4048d2 <memset+0x82>
  404874:	b2cd      	uxtb	r5, r1
  404876:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40487a:	2c0f      	cmp	r4, #15
  40487c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404880:	d919      	bls.n	4048b6 <memset+0x66>
  404882:	f103 0210 	add.w	r2, r3, #16
  404886:	4626      	mov	r6, r4
  404888:	3e10      	subs	r6, #16
  40488a:	2e0f      	cmp	r6, #15
  40488c:	f842 5c10 	str.w	r5, [r2, #-16]
  404890:	f842 5c0c 	str.w	r5, [r2, #-12]
  404894:	f842 5c08 	str.w	r5, [r2, #-8]
  404898:	f842 5c04 	str.w	r5, [r2, #-4]
  40489c:	f102 0210 	add.w	r2, r2, #16
  4048a0:	d8f2      	bhi.n	404888 <memset+0x38>
  4048a2:	f1a4 0210 	sub.w	r2, r4, #16
  4048a6:	f022 020f 	bic.w	r2, r2, #15
  4048aa:	f004 040f 	and.w	r4, r4, #15
  4048ae:	3210      	adds	r2, #16
  4048b0:	2c03      	cmp	r4, #3
  4048b2:	4413      	add	r3, r2
  4048b4:	d90d      	bls.n	4048d2 <memset+0x82>
  4048b6:	461e      	mov	r6, r3
  4048b8:	4622      	mov	r2, r4
  4048ba:	3a04      	subs	r2, #4
  4048bc:	2a03      	cmp	r2, #3
  4048be:	f846 5b04 	str.w	r5, [r6], #4
  4048c2:	d8fa      	bhi.n	4048ba <memset+0x6a>
  4048c4:	1f22      	subs	r2, r4, #4
  4048c6:	f022 0203 	bic.w	r2, r2, #3
  4048ca:	3204      	adds	r2, #4
  4048cc:	4413      	add	r3, r2
  4048ce:	f004 0403 	and.w	r4, r4, #3
  4048d2:	b12c      	cbz	r4, 4048e0 <memset+0x90>
  4048d4:	b2c9      	uxtb	r1, r1
  4048d6:	441c      	add	r4, r3
  4048d8:	f803 1b01 	strb.w	r1, [r3], #1
  4048dc:	429c      	cmp	r4, r3
  4048de:	d1fb      	bne.n	4048d8 <memset+0x88>
  4048e0:	bc70      	pop	{r4, r5, r6}
  4048e2:	4770      	bx	lr
  4048e4:	4614      	mov	r4, r2
  4048e6:	4603      	mov	r3, r0
  4048e8:	e7c2      	b.n	404870 <memset+0x20>
  4048ea:	bf00      	nop

004048ec <__malloc_lock>:
  4048ec:	4801      	ldr	r0, [pc, #4]	; (4048f4 <__malloc_lock+0x8>)
  4048ee:	f001 bd6b 	b.w	4063c8 <__retarget_lock_acquire_recursive>
  4048f2:	bf00      	nop
  4048f4:	2040c830 	.word	0x2040c830

004048f8 <__malloc_unlock>:
  4048f8:	4801      	ldr	r0, [pc, #4]	; (404900 <__malloc_unlock+0x8>)
  4048fa:	f001 bd67 	b.w	4063cc <__retarget_lock_release_recursive>
  4048fe:	bf00      	nop
  404900:	2040c830 	.word	0x2040c830

00404904 <_sbrk_r>:
  404904:	b538      	push	{r3, r4, r5, lr}
  404906:	4c07      	ldr	r4, [pc, #28]	; (404924 <_sbrk_r+0x20>)
  404908:	2300      	movs	r3, #0
  40490a:	4605      	mov	r5, r0
  40490c:	4608      	mov	r0, r1
  40490e:	6023      	str	r3, [r4, #0]
  404910:	f7fd fab4 	bl	401e7c <_sbrk>
  404914:	1c43      	adds	r3, r0, #1
  404916:	d000      	beq.n	40491a <_sbrk_r+0x16>
  404918:	bd38      	pop	{r3, r4, r5, pc}
  40491a:	6823      	ldr	r3, [r4, #0]
  40491c:	2b00      	cmp	r3, #0
  40491e:	d0fb      	beq.n	404918 <_sbrk_r+0x14>
  404920:	602b      	str	r3, [r5, #0]
  404922:	bd38      	pop	{r3, r4, r5, pc}
  404924:	2040c844 	.word	0x2040c844

00404928 <setbuf>:
  404928:	2900      	cmp	r1, #0
  40492a:	bf0c      	ite	eq
  40492c:	2202      	moveq	r2, #2
  40492e:	2200      	movne	r2, #0
  404930:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404934:	f000 b800 	b.w	404938 <setvbuf>

00404938 <setvbuf>:
  404938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40493c:	4c61      	ldr	r4, [pc, #388]	; (404ac4 <setvbuf+0x18c>)
  40493e:	6825      	ldr	r5, [r4, #0]
  404940:	b083      	sub	sp, #12
  404942:	4604      	mov	r4, r0
  404944:	460f      	mov	r7, r1
  404946:	4690      	mov	r8, r2
  404948:	461e      	mov	r6, r3
  40494a:	b115      	cbz	r5, 404952 <setvbuf+0x1a>
  40494c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40494e:	2b00      	cmp	r3, #0
  404950:	d064      	beq.n	404a1c <setvbuf+0xe4>
  404952:	f1b8 0f02 	cmp.w	r8, #2
  404956:	d006      	beq.n	404966 <setvbuf+0x2e>
  404958:	f1b8 0f01 	cmp.w	r8, #1
  40495c:	f200 809f 	bhi.w	404a9e <setvbuf+0x166>
  404960:	2e00      	cmp	r6, #0
  404962:	f2c0 809c 	blt.w	404a9e <setvbuf+0x166>
  404966:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404968:	07d8      	lsls	r0, r3, #31
  40496a:	d534      	bpl.n	4049d6 <setvbuf+0x9e>
  40496c:	4621      	mov	r1, r4
  40496e:	4628      	mov	r0, r5
  404970:	f001 f912 	bl	405b98 <_fflush_r>
  404974:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404976:	b141      	cbz	r1, 40498a <setvbuf+0x52>
  404978:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40497c:	4299      	cmp	r1, r3
  40497e:	d002      	beq.n	404986 <setvbuf+0x4e>
  404980:	4628      	mov	r0, r5
  404982:	f001 fa87 	bl	405e94 <_free_r>
  404986:	2300      	movs	r3, #0
  404988:	6323      	str	r3, [r4, #48]	; 0x30
  40498a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40498e:	2200      	movs	r2, #0
  404990:	61a2      	str	r2, [r4, #24]
  404992:	6062      	str	r2, [r4, #4]
  404994:	061a      	lsls	r2, r3, #24
  404996:	d43a      	bmi.n	404a0e <setvbuf+0xd6>
  404998:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40499c:	f023 0303 	bic.w	r3, r3, #3
  4049a0:	f1b8 0f02 	cmp.w	r8, #2
  4049a4:	81a3      	strh	r3, [r4, #12]
  4049a6:	d01d      	beq.n	4049e4 <setvbuf+0xac>
  4049a8:	ab01      	add	r3, sp, #4
  4049aa:	466a      	mov	r2, sp
  4049ac:	4621      	mov	r1, r4
  4049ae:	4628      	mov	r0, r5
  4049b0:	f001 fd0e 	bl	4063d0 <__swhatbuf_r>
  4049b4:	89a3      	ldrh	r3, [r4, #12]
  4049b6:	4318      	orrs	r0, r3
  4049b8:	81a0      	strh	r0, [r4, #12]
  4049ba:	2e00      	cmp	r6, #0
  4049bc:	d132      	bne.n	404a24 <setvbuf+0xec>
  4049be:	9e00      	ldr	r6, [sp, #0]
  4049c0:	4630      	mov	r0, r6
  4049c2:	f7ff fbf3 	bl	4041ac <malloc>
  4049c6:	4607      	mov	r7, r0
  4049c8:	2800      	cmp	r0, #0
  4049ca:	d06b      	beq.n	404aa4 <setvbuf+0x16c>
  4049cc:	89a3      	ldrh	r3, [r4, #12]
  4049ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4049d2:	81a3      	strh	r3, [r4, #12]
  4049d4:	e028      	b.n	404a28 <setvbuf+0xf0>
  4049d6:	89a3      	ldrh	r3, [r4, #12]
  4049d8:	0599      	lsls	r1, r3, #22
  4049da:	d4c7      	bmi.n	40496c <setvbuf+0x34>
  4049dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4049de:	f001 fcf3 	bl	4063c8 <__retarget_lock_acquire_recursive>
  4049e2:	e7c3      	b.n	40496c <setvbuf+0x34>
  4049e4:	2500      	movs	r5, #0
  4049e6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4049e8:	2600      	movs	r6, #0
  4049ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4049ee:	f043 0302 	orr.w	r3, r3, #2
  4049f2:	2001      	movs	r0, #1
  4049f4:	60a6      	str	r6, [r4, #8]
  4049f6:	07ce      	lsls	r6, r1, #31
  4049f8:	81a3      	strh	r3, [r4, #12]
  4049fa:	6022      	str	r2, [r4, #0]
  4049fc:	6122      	str	r2, [r4, #16]
  4049fe:	6160      	str	r0, [r4, #20]
  404a00:	d401      	bmi.n	404a06 <setvbuf+0xce>
  404a02:	0598      	lsls	r0, r3, #22
  404a04:	d53e      	bpl.n	404a84 <setvbuf+0x14c>
  404a06:	4628      	mov	r0, r5
  404a08:	b003      	add	sp, #12
  404a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404a0e:	6921      	ldr	r1, [r4, #16]
  404a10:	4628      	mov	r0, r5
  404a12:	f001 fa3f 	bl	405e94 <_free_r>
  404a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a1a:	e7bd      	b.n	404998 <setvbuf+0x60>
  404a1c:	4628      	mov	r0, r5
  404a1e:	f001 f913 	bl	405c48 <__sinit>
  404a22:	e796      	b.n	404952 <setvbuf+0x1a>
  404a24:	2f00      	cmp	r7, #0
  404a26:	d0cb      	beq.n	4049c0 <setvbuf+0x88>
  404a28:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404a2a:	2b00      	cmp	r3, #0
  404a2c:	d033      	beq.n	404a96 <setvbuf+0x15e>
  404a2e:	9b00      	ldr	r3, [sp, #0]
  404a30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404a34:	6027      	str	r7, [r4, #0]
  404a36:	429e      	cmp	r6, r3
  404a38:	bf1c      	itt	ne
  404a3a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404a3e:	81a2      	strhne	r2, [r4, #12]
  404a40:	f1b8 0f01 	cmp.w	r8, #1
  404a44:	bf04      	itt	eq
  404a46:	f042 0201 	orreq.w	r2, r2, #1
  404a4a:	81a2      	strheq	r2, [r4, #12]
  404a4c:	b292      	uxth	r2, r2
  404a4e:	f012 0308 	ands.w	r3, r2, #8
  404a52:	6127      	str	r7, [r4, #16]
  404a54:	6166      	str	r6, [r4, #20]
  404a56:	d00e      	beq.n	404a76 <setvbuf+0x13e>
  404a58:	07d1      	lsls	r1, r2, #31
  404a5a:	d51a      	bpl.n	404a92 <setvbuf+0x15a>
  404a5c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404a5e:	4276      	negs	r6, r6
  404a60:	2300      	movs	r3, #0
  404a62:	f015 0501 	ands.w	r5, r5, #1
  404a66:	61a6      	str	r6, [r4, #24]
  404a68:	60a3      	str	r3, [r4, #8]
  404a6a:	d009      	beq.n	404a80 <setvbuf+0x148>
  404a6c:	2500      	movs	r5, #0
  404a6e:	4628      	mov	r0, r5
  404a70:	b003      	add	sp, #12
  404a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404a76:	60a3      	str	r3, [r4, #8]
  404a78:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404a7a:	f015 0501 	ands.w	r5, r5, #1
  404a7e:	d1f5      	bne.n	404a6c <setvbuf+0x134>
  404a80:	0593      	lsls	r3, r2, #22
  404a82:	d4c0      	bmi.n	404a06 <setvbuf+0xce>
  404a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404a86:	f001 fca1 	bl	4063cc <__retarget_lock_release_recursive>
  404a8a:	4628      	mov	r0, r5
  404a8c:	b003      	add	sp, #12
  404a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404a92:	60a6      	str	r6, [r4, #8]
  404a94:	e7f0      	b.n	404a78 <setvbuf+0x140>
  404a96:	4628      	mov	r0, r5
  404a98:	f001 f8d6 	bl	405c48 <__sinit>
  404a9c:	e7c7      	b.n	404a2e <setvbuf+0xf6>
  404a9e:	f04f 35ff 	mov.w	r5, #4294967295
  404aa2:	e7b0      	b.n	404a06 <setvbuf+0xce>
  404aa4:	f8dd 9000 	ldr.w	r9, [sp]
  404aa8:	45b1      	cmp	r9, r6
  404aaa:	d004      	beq.n	404ab6 <setvbuf+0x17e>
  404aac:	4648      	mov	r0, r9
  404aae:	f7ff fb7d 	bl	4041ac <malloc>
  404ab2:	4607      	mov	r7, r0
  404ab4:	b920      	cbnz	r0, 404ac0 <setvbuf+0x188>
  404ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404aba:	f04f 35ff 	mov.w	r5, #4294967295
  404abe:	e792      	b.n	4049e6 <setvbuf+0xae>
  404ac0:	464e      	mov	r6, r9
  404ac2:	e783      	b.n	4049cc <setvbuf+0x94>
  404ac4:	20400014 	.word	0x20400014
	...

00404b00 <strlen>:
  404b00:	f890 f000 	pld	[r0]
  404b04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404b08:	f020 0107 	bic.w	r1, r0, #7
  404b0c:	f06f 0c00 	mvn.w	ip, #0
  404b10:	f010 0407 	ands.w	r4, r0, #7
  404b14:	f891 f020 	pld	[r1, #32]
  404b18:	f040 8049 	bne.w	404bae <strlen+0xae>
  404b1c:	f04f 0400 	mov.w	r4, #0
  404b20:	f06f 0007 	mvn.w	r0, #7
  404b24:	e9d1 2300 	ldrd	r2, r3, [r1]
  404b28:	f891 f040 	pld	[r1, #64]	; 0x40
  404b2c:	f100 0008 	add.w	r0, r0, #8
  404b30:	fa82 f24c 	uadd8	r2, r2, ip
  404b34:	faa4 f28c 	sel	r2, r4, ip
  404b38:	fa83 f34c 	uadd8	r3, r3, ip
  404b3c:	faa2 f38c 	sel	r3, r2, ip
  404b40:	bb4b      	cbnz	r3, 404b96 <strlen+0x96>
  404b42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404b46:	fa82 f24c 	uadd8	r2, r2, ip
  404b4a:	f100 0008 	add.w	r0, r0, #8
  404b4e:	faa4 f28c 	sel	r2, r4, ip
  404b52:	fa83 f34c 	uadd8	r3, r3, ip
  404b56:	faa2 f38c 	sel	r3, r2, ip
  404b5a:	b9e3      	cbnz	r3, 404b96 <strlen+0x96>
  404b5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404b60:	fa82 f24c 	uadd8	r2, r2, ip
  404b64:	f100 0008 	add.w	r0, r0, #8
  404b68:	faa4 f28c 	sel	r2, r4, ip
  404b6c:	fa83 f34c 	uadd8	r3, r3, ip
  404b70:	faa2 f38c 	sel	r3, r2, ip
  404b74:	b97b      	cbnz	r3, 404b96 <strlen+0x96>
  404b76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  404b7a:	f101 0120 	add.w	r1, r1, #32
  404b7e:	fa82 f24c 	uadd8	r2, r2, ip
  404b82:	f100 0008 	add.w	r0, r0, #8
  404b86:	faa4 f28c 	sel	r2, r4, ip
  404b8a:	fa83 f34c 	uadd8	r3, r3, ip
  404b8e:	faa2 f38c 	sel	r3, r2, ip
  404b92:	2b00      	cmp	r3, #0
  404b94:	d0c6      	beq.n	404b24 <strlen+0x24>
  404b96:	2a00      	cmp	r2, #0
  404b98:	bf04      	itt	eq
  404b9a:	3004      	addeq	r0, #4
  404b9c:	461a      	moveq	r2, r3
  404b9e:	ba12      	rev	r2, r2
  404ba0:	fab2 f282 	clz	r2, r2
  404ba4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404ba8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  404bac:	4770      	bx	lr
  404bae:	e9d1 2300 	ldrd	r2, r3, [r1]
  404bb2:	f004 0503 	and.w	r5, r4, #3
  404bb6:	f1c4 0000 	rsb	r0, r4, #0
  404bba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  404bbe:	f014 0f04 	tst.w	r4, #4
  404bc2:	f891 f040 	pld	[r1, #64]	; 0x40
  404bc6:	fa0c f505 	lsl.w	r5, ip, r5
  404bca:	ea62 0205 	orn	r2, r2, r5
  404bce:	bf1c      	itt	ne
  404bd0:	ea63 0305 	ornne	r3, r3, r5
  404bd4:	4662      	movne	r2, ip
  404bd6:	f04f 0400 	mov.w	r4, #0
  404bda:	e7a9      	b.n	404b30 <strlen+0x30>

00404bdc <__sprint_r.part.0>:
  404bdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404be0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404be2:	049c      	lsls	r4, r3, #18
  404be4:	4693      	mov	fp, r2
  404be6:	d52f      	bpl.n	404c48 <__sprint_r.part.0+0x6c>
  404be8:	6893      	ldr	r3, [r2, #8]
  404bea:	6812      	ldr	r2, [r2, #0]
  404bec:	b353      	cbz	r3, 404c44 <__sprint_r.part.0+0x68>
  404bee:	460e      	mov	r6, r1
  404bf0:	4607      	mov	r7, r0
  404bf2:	f102 0908 	add.w	r9, r2, #8
  404bf6:	e919 0420 	ldmdb	r9, {r5, sl}
  404bfa:	ea5f 089a 	movs.w	r8, sl, lsr #2
  404bfe:	d017      	beq.n	404c30 <__sprint_r.part.0+0x54>
  404c00:	3d04      	subs	r5, #4
  404c02:	2400      	movs	r4, #0
  404c04:	e001      	b.n	404c0a <__sprint_r.part.0+0x2e>
  404c06:	45a0      	cmp	r8, r4
  404c08:	d010      	beq.n	404c2c <__sprint_r.part.0+0x50>
  404c0a:	4632      	mov	r2, r6
  404c0c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404c10:	4638      	mov	r0, r7
  404c12:	f001 f8bb 	bl	405d8c <_fputwc_r>
  404c16:	1c43      	adds	r3, r0, #1
  404c18:	f104 0401 	add.w	r4, r4, #1
  404c1c:	d1f3      	bne.n	404c06 <__sprint_r.part.0+0x2a>
  404c1e:	2300      	movs	r3, #0
  404c20:	f8cb 3008 	str.w	r3, [fp, #8]
  404c24:	f8cb 3004 	str.w	r3, [fp, #4]
  404c28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c2c:	f8db 3008 	ldr.w	r3, [fp, #8]
  404c30:	f02a 0a03 	bic.w	sl, sl, #3
  404c34:	eba3 030a 	sub.w	r3, r3, sl
  404c38:	f8cb 3008 	str.w	r3, [fp, #8]
  404c3c:	f109 0908 	add.w	r9, r9, #8
  404c40:	2b00      	cmp	r3, #0
  404c42:	d1d8      	bne.n	404bf6 <__sprint_r.part.0+0x1a>
  404c44:	2000      	movs	r0, #0
  404c46:	e7ea      	b.n	404c1e <__sprint_r.part.0+0x42>
  404c48:	f001 fa0a 	bl	406060 <__sfvwrite_r>
  404c4c:	2300      	movs	r3, #0
  404c4e:	f8cb 3008 	str.w	r3, [fp, #8]
  404c52:	f8cb 3004 	str.w	r3, [fp, #4]
  404c56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c5a:	bf00      	nop

00404c5c <_vfiprintf_r>:
  404c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c60:	b0ad      	sub	sp, #180	; 0xb4
  404c62:	461d      	mov	r5, r3
  404c64:	468b      	mov	fp, r1
  404c66:	4690      	mov	r8, r2
  404c68:	9307      	str	r3, [sp, #28]
  404c6a:	9006      	str	r0, [sp, #24]
  404c6c:	b118      	cbz	r0, 404c76 <_vfiprintf_r+0x1a>
  404c6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404c70:	2b00      	cmp	r3, #0
  404c72:	f000 80f3 	beq.w	404e5c <_vfiprintf_r+0x200>
  404c76:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404c7a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404c7e:	07df      	lsls	r7, r3, #31
  404c80:	b281      	uxth	r1, r0
  404c82:	d402      	bmi.n	404c8a <_vfiprintf_r+0x2e>
  404c84:	058e      	lsls	r6, r1, #22
  404c86:	f140 80fc 	bpl.w	404e82 <_vfiprintf_r+0x226>
  404c8a:	048c      	lsls	r4, r1, #18
  404c8c:	d40a      	bmi.n	404ca4 <_vfiprintf_r+0x48>
  404c8e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404c92:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  404c96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  404c9a:	f8ab 100c 	strh.w	r1, [fp, #12]
  404c9e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  404ca2:	b289      	uxth	r1, r1
  404ca4:	0708      	lsls	r0, r1, #28
  404ca6:	f140 80b3 	bpl.w	404e10 <_vfiprintf_r+0x1b4>
  404caa:	f8db 3010 	ldr.w	r3, [fp, #16]
  404cae:	2b00      	cmp	r3, #0
  404cb0:	f000 80ae 	beq.w	404e10 <_vfiprintf_r+0x1b4>
  404cb4:	f001 031a 	and.w	r3, r1, #26
  404cb8:	2b0a      	cmp	r3, #10
  404cba:	f000 80b5 	beq.w	404e28 <_vfiprintf_r+0x1cc>
  404cbe:	2300      	movs	r3, #0
  404cc0:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404cc4:	930b      	str	r3, [sp, #44]	; 0x2c
  404cc6:	9311      	str	r3, [sp, #68]	; 0x44
  404cc8:	9310      	str	r3, [sp, #64]	; 0x40
  404cca:	9303      	str	r3, [sp, #12]
  404ccc:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404cd0:	46ca      	mov	sl, r9
  404cd2:	f8cd b010 	str.w	fp, [sp, #16]
  404cd6:	f898 3000 	ldrb.w	r3, [r8]
  404cda:	4644      	mov	r4, r8
  404cdc:	b1fb      	cbz	r3, 404d1e <_vfiprintf_r+0xc2>
  404cde:	2b25      	cmp	r3, #37	; 0x25
  404ce0:	d102      	bne.n	404ce8 <_vfiprintf_r+0x8c>
  404ce2:	e01c      	b.n	404d1e <_vfiprintf_r+0xc2>
  404ce4:	2b25      	cmp	r3, #37	; 0x25
  404ce6:	d003      	beq.n	404cf0 <_vfiprintf_r+0x94>
  404ce8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404cec:	2b00      	cmp	r3, #0
  404cee:	d1f9      	bne.n	404ce4 <_vfiprintf_r+0x88>
  404cf0:	eba4 0508 	sub.w	r5, r4, r8
  404cf4:	b19d      	cbz	r5, 404d1e <_vfiprintf_r+0xc2>
  404cf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404cf8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404cfa:	f8ca 8000 	str.w	r8, [sl]
  404cfe:	3301      	adds	r3, #1
  404d00:	442a      	add	r2, r5
  404d02:	2b07      	cmp	r3, #7
  404d04:	f8ca 5004 	str.w	r5, [sl, #4]
  404d08:	9211      	str	r2, [sp, #68]	; 0x44
  404d0a:	9310      	str	r3, [sp, #64]	; 0x40
  404d0c:	dd7a      	ble.n	404e04 <_vfiprintf_r+0x1a8>
  404d0e:	2a00      	cmp	r2, #0
  404d10:	f040 84b0 	bne.w	405674 <_vfiprintf_r+0xa18>
  404d14:	9b03      	ldr	r3, [sp, #12]
  404d16:	9210      	str	r2, [sp, #64]	; 0x40
  404d18:	442b      	add	r3, r5
  404d1a:	46ca      	mov	sl, r9
  404d1c:	9303      	str	r3, [sp, #12]
  404d1e:	7823      	ldrb	r3, [r4, #0]
  404d20:	2b00      	cmp	r3, #0
  404d22:	f000 83e0 	beq.w	4054e6 <_vfiprintf_r+0x88a>
  404d26:	2000      	movs	r0, #0
  404d28:	f04f 0300 	mov.w	r3, #0
  404d2c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  404d30:	f104 0801 	add.w	r8, r4, #1
  404d34:	7862      	ldrb	r2, [r4, #1]
  404d36:	4605      	mov	r5, r0
  404d38:	4606      	mov	r6, r0
  404d3a:	4603      	mov	r3, r0
  404d3c:	f04f 34ff 	mov.w	r4, #4294967295
  404d40:	f108 0801 	add.w	r8, r8, #1
  404d44:	f1a2 0120 	sub.w	r1, r2, #32
  404d48:	2958      	cmp	r1, #88	; 0x58
  404d4a:	f200 82de 	bhi.w	40530a <_vfiprintf_r+0x6ae>
  404d4e:	e8df f011 	tbh	[pc, r1, lsl #1]
  404d52:	0221      	.short	0x0221
  404d54:	02dc02dc 	.word	0x02dc02dc
  404d58:	02dc0229 	.word	0x02dc0229
  404d5c:	02dc02dc 	.word	0x02dc02dc
  404d60:	02dc02dc 	.word	0x02dc02dc
  404d64:	028902dc 	.word	0x028902dc
  404d68:	02dc0295 	.word	0x02dc0295
  404d6c:	02bd00a2 	.word	0x02bd00a2
  404d70:	019f02dc 	.word	0x019f02dc
  404d74:	01a401a4 	.word	0x01a401a4
  404d78:	01a401a4 	.word	0x01a401a4
  404d7c:	01a401a4 	.word	0x01a401a4
  404d80:	01a401a4 	.word	0x01a401a4
  404d84:	02dc01a4 	.word	0x02dc01a4
  404d88:	02dc02dc 	.word	0x02dc02dc
  404d8c:	02dc02dc 	.word	0x02dc02dc
  404d90:	02dc02dc 	.word	0x02dc02dc
  404d94:	02dc02dc 	.word	0x02dc02dc
  404d98:	01b202dc 	.word	0x01b202dc
  404d9c:	02dc02dc 	.word	0x02dc02dc
  404da0:	02dc02dc 	.word	0x02dc02dc
  404da4:	02dc02dc 	.word	0x02dc02dc
  404da8:	02dc02dc 	.word	0x02dc02dc
  404dac:	02dc02dc 	.word	0x02dc02dc
  404db0:	02dc0197 	.word	0x02dc0197
  404db4:	02dc02dc 	.word	0x02dc02dc
  404db8:	02dc02dc 	.word	0x02dc02dc
  404dbc:	02dc019b 	.word	0x02dc019b
  404dc0:	025302dc 	.word	0x025302dc
  404dc4:	02dc02dc 	.word	0x02dc02dc
  404dc8:	02dc02dc 	.word	0x02dc02dc
  404dcc:	02dc02dc 	.word	0x02dc02dc
  404dd0:	02dc02dc 	.word	0x02dc02dc
  404dd4:	02dc02dc 	.word	0x02dc02dc
  404dd8:	021b025a 	.word	0x021b025a
  404ddc:	02dc02dc 	.word	0x02dc02dc
  404de0:	026e02dc 	.word	0x026e02dc
  404de4:	02dc021b 	.word	0x02dc021b
  404de8:	027302dc 	.word	0x027302dc
  404dec:	01f502dc 	.word	0x01f502dc
  404df0:	02090182 	.word	0x02090182
  404df4:	02dc02d7 	.word	0x02dc02d7
  404df8:	02dc029a 	.word	0x02dc029a
  404dfc:	02dc00a7 	.word	0x02dc00a7
  404e00:	022e02dc 	.word	0x022e02dc
  404e04:	f10a 0a08 	add.w	sl, sl, #8
  404e08:	9b03      	ldr	r3, [sp, #12]
  404e0a:	442b      	add	r3, r5
  404e0c:	9303      	str	r3, [sp, #12]
  404e0e:	e786      	b.n	404d1e <_vfiprintf_r+0xc2>
  404e10:	4659      	mov	r1, fp
  404e12:	9806      	ldr	r0, [sp, #24]
  404e14:	f000 fdac 	bl	405970 <__swsetup_r>
  404e18:	bb18      	cbnz	r0, 404e62 <_vfiprintf_r+0x206>
  404e1a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  404e1e:	f001 031a 	and.w	r3, r1, #26
  404e22:	2b0a      	cmp	r3, #10
  404e24:	f47f af4b 	bne.w	404cbe <_vfiprintf_r+0x62>
  404e28:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  404e2c:	2b00      	cmp	r3, #0
  404e2e:	f6ff af46 	blt.w	404cbe <_vfiprintf_r+0x62>
  404e32:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404e36:	07db      	lsls	r3, r3, #31
  404e38:	d405      	bmi.n	404e46 <_vfiprintf_r+0x1ea>
  404e3a:	058f      	lsls	r7, r1, #22
  404e3c:	d403      	bmi.n	404e46 <_vfiprintf_r+0x1ea>
  404e3e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404e42:	f001 fac3 	bl	4063cc <__retarget_lock_release_recursive>
  404e46:	462b      	mov	r3, r5
  404e48:	4642      	mov	r2, r8
  404e4a:	4659      	mov	r1, fp
  404e4c:	9806      	ldr	r0, [sp, #24]
  404e4e:	f000 fd4d 	bl	4058ec <__sbprintf>
  404e52:	9003      	str	r0, [sp, #12]
  404e54:	9803      	ldr	r0, [sp, #12]
  404e56:	b02d      	add	sp, #180	; 0xb4
  404e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e5c:	f000 fef4 	bl	405c48 <__sinit>
  404e60:	e709      	b.n	404c76 <_vfiprintf_r+0x1a>
  404e62:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404e66:	07d9      	lsls	r1, r3, #31
  404e68:	d404      	bmi.n	404e74 <_vfiprintf_r+0x218>
  404e6a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404e6e:	059a      	lsls	r2, r3, #22
  404e70:	f140 84aa 	bpl.w	4057c8 <_vfiprintf_r+0xb6c>
  404e74:	f04f 33ff 	mov.w	r3, #4294967295
  404e78:	9303      	str	r3, [sp, #12]
  404e7a:	9803      	ldr	r0, [sp, #12]
  404e7c:	b02d      	add	sp, #180	; 0xb4
  404e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e82:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404e86:	f001 fa9f 	bl	4063c8 <__retarget_lock_acquire_recursive>
  404e8a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404e8e:	b281      	uxth	r1, r0
  404e90:	e6fb      	b.n	404c8a <_vfiprintf_r+0x2e>
  404e92:	4276      	negs	r6, r6
  404e94:	9207      	str	r2, [sp, #28]
  404e96:	f043 0304 	orr.w	r3, r3, #4
  404e9a:	f898 2000 	ldrb.w	r2, [r8]
  404e9e:	e74f      	b.n	404d40 <_vfiprintf_r+0xe4>
  404ea0:	9608      	str	r6, [sp, #32]
  404ea2:	069e      	lsls	r6, r3, #26
  404ea4:	f100 8450 	bmi.w	405748 <_vfiprintf_r+0xaec>
  404ea8:	9907      	ldr	r1, [sp, #28]
  404eaa:	06dd      	lsls	r5, r3, #27
  404eac:	460a      	mov	r2, r1
  404eae:	f100 83ef 	bmi.w	405690 <_vfiprintf_r+0xa34>
  404eb2:	0658      	lsls	r0, r3, #25
  404eb4:	f140 83ec 	bpl.w	405690 <_vfiprintf_r+0xa34>
  404eb8:	880e      	ldrh	r6, [r1, #0]
  404eba:	3104      	adds	r1, #4
  404ebc:	2700      	movs	r7, #0
  404ebe:	2201      	movs	r2, #1
  404ec0:	9107      	str	r1, [sp, #28]
  404ec2:	f04f 0100 	mov.w	r1, #0
  404ec6:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  404eca:	2500      	movs	r5, #0
  404ecc:	1c61      	adds	r1, r4, #1
  404ece:	f000 8116 	beq.w	4050fe <_vfiprintf_r+0x4a2>
  404ed2:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404ed6:	9102      	str	r1, [sp, #8]
  404ed8:	ea56 0107 	orrs.w	r1, r6, r7
  404edc:	f040 8114 	bne.w	405108 <_vfiprintf_r+0x4ac>
  404ee0:	2c00      	cmp	r4, #0
  404ee2:	f040 835c 	bne.w	40559e <_vfiprintf_r+0x942>
  404ee6:	2a00      	cmp	r2, #0
  404ee8:	f040 83b7 	bne.w	40565a <_vfiprintf_r+0x9fe>
  404eec:	f013 0301 	ands.w	r3, r3, #1
  404ef0:	9305      	str	r3, [sp, #20]
  404ef2:	f000 8457 	beq.w	4057a4 <_vfiprintf_r+0xb48>
  404ef6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404efa:	2330      	movs	r3, #48	; 0x30
  404efc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404f00:	9b05      	ldr	r3, [sp, #20]
  404f02:	42a3      	cmp	r3, r4
  404f04:	bfb8      	it	lt
  404f06:	4623      	movlt	r3, r4
  404f08:	9301      	str	r3, [sp, #4]
  404f0a:	b10d      	cbz	r5, 404f10 <_vfiprintf_r+0x2b4>
  404f0c:	3301      	adds	r3, #1
  404f0e:	9301      	str	r3, [sp, #4]
  404f10:	9b02      	ldr	r3, [sp, #8]
  404f12:	f013 0302 	ands.w	r3, r3, #2
  404f16:	9309      	str	r3, [sp, #36]	; 0x24
  404f18:	d002      	beq.n	404f20 <_vfiprintf_r+0x2c4>
  404f1a:	9b01      	ldr	r3, [sp, #4]
  404f1c:	3302      	adds	r3, #2
  404f1e:	9301      	str	r3, [sp, #4]
  404f20:	9b02      	ldr	r3, [sp, #8]
  404f22:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404f26:	930a      	str	r3, [sp, #40]	; 0x28
  404f28:	f040 8217 	bne.w	40535a <_vfiprintf_r+0x6fe>
  404f2c:	9b08      	ldr	r3, [sp, #32]
  404f2e:	9a01      	ldr	r2, [sp, #4]
  404f30:	1a9d      	subs	r5, r3, r2
  404f32:	2d00      	cmp	r5, #0
  404f34:	f340 8211 	ble.w	40535a <_vfiprintf_r+0x6fe>
  404f38:	2d10      	cmp	r5, #16
  404f3a:	f340 8490 	ble.w	40585e <_vfiprintf_r+0xc02>
  404f3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404f40:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f42:	4ec4      	ldr	r6, [pc, #784]	; (405254 <_vfiprintf_r+0x5f8>)
  404f44:	46d6      	mov	lr, sl
  404f46:	2710      	movs	r7, #16
  404f48:	46a2      	mov	sl, r4
  404f4a:	4619      	mov	r1, r3
  404f4c:	9c06      	ldr	r4, [sp, #24]
  404f4e:	e007      	b.n	404f60 <_vfiprintf_r+0x304>
  404f50:	f101 0c02 	add.w	ip, r1, #2
  404f54:	f10e 0e08 	add.w	lr, lr, #8
  404f58:	4601      	mov	r1, r0
  404f5a:	3d10      	subs	r5, #16
  404f5c:	2d10      	cmp	r5, #16
  404f5e:	dd11      	ble.n	404f84 <_vfiprintf_r+0x328>
  404f60:	1c48      	adds	r0, r1, #1
  404f62:	3210      	adds	r2, #16
  404f64:	2807      	cmp	r0, #7
  404f66:	9211      	str	r2, [sp, #68]	; 0x44
  404f68:	e88e 00c0 	stmia.w	lr, {r6, r7}
  404f6c:	9010      	str	r0, [sp, #64]	; 0x40
  404f6e:	ddef      	ble.n	404f50 <_vfiprintf_r+0x2f4>
  404f70:	2a00      	cmp	r2, #0
  404f72:	f040 81e4 	bne.w	40533e <_vfiprintf_r+0x6e2>
  404f76:	3d10      	subs	r5, #16
  404f78:	2d10      	cmp	r5, #16
  404f7a:	4611      	mov	r1, r2
  404f7c:	f04f 0c01 	mov.w	ip, #1
  404f80:	46ce      	mov	lr, r9
  404f82:	dced      	bgt.n	404f60 <_vfiprintf_r+0x304>
  404f84:	4654      	mov	r4, sl
  404f86:	4661      	mov	r1, ip
  404f88:	46f2      	mov	sl, lr
  404f8a:	442a      	add	r2, r5
  404f8c:	2907      	cmp	r1, #7
  404f8e:	9211      	str	r2, [sp, #68]	; 0x44
  404f90:	f8ca 6000 	str.w	r6, [sl]
  404f94:	f8ca 5004 	str.w	r5, [sl, #4]
  404f98:	9110      	str	r1, [sp, #64]	; 0x40
  404f9a:	f300 82ec 	bgt.w	405576 <_vfiprintf_r+0x91a>
  404f9e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404fa2:	f10a 0a08 	add.w	sl, sl, #8
  404fa6:	1c48      	adds	r0, r1, #1
  404fa8:	2d00      	cmp	r5, #0
  404faa:	f040 81de 	bne.w	40536a <_vfiprintf_r+0x70e>
  404fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404fb0:	2b00      	cmp	r3, #0
  404fb2:	f000 81f8 	beq.w	4053a6 <_vfiprintf_r+0x74a>
  404fb6:	3202      	adds	r2, #2
  404fb8:	a90e      	add	r1, sp, #56	; 0x38
  404fba:	2302      	movs	r3, #2
  404fbc:	2807      	cmp	r0, #7
  404fbe:	9211      	str	r2, [sp, #68]	; 0x44
  404fc0:	9010      	str	r0, [sp, #64]	; 0x40
  404fc2:	e88a 000a 	stmia.w	sl, {r1, r3}
  404fc6:	f340 81ea 	ble.w	40539e <_vfiprintf_r+0x742>
  404fca:	2a00      	cmp	r2, #0
  404fcc:	f040 838c 	bne.w	4056e8 <_vfiprintf_r+0xa8c>
  404fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404fd2:	2b80      	cmp	r3, #128	; 0x80
  404fd4:	f04f 0001 	mov.w	r0, #1
  404fd8:	4611      	mov	r1, r2
  404fda:	46ca      	mov	sl, r9
  404fdc:	f040 81e7 	bne.w	4053ae <_vfiprintf_r+0x752>
  404fe0:	9b08      	ldr	r3, [sp, #32]
  404fe2:	9d01      	ldr	r5, [sp, #4]
  404fe4:	1b5e      	subs	r6, r3, r5
  404fe6:	2e00      	cmp	r6, #0
  404fe8:	f340 81e1 	ble.w	4053ae <_vfiprintf_r+0x752>
  404fec:	2e10      	cmp	r6, #16
  404fee:	4d9a      	ldr	r5, [pc, #616]	; (405258 <_vfiprintf_r+0x5fc>)
  404ff0:	f340 8450 	ble.w	405894 <_vfiprintf_r+0xc38>
  404ff4:	46d4      	mov	ip, sl
  404ff6:	2710      	movs	r7, #16
  404ff8:	46a2      	mov	sl, r4
  404ffa:	9c06      	ldr	r4, [sp, #24]
  404ffc:	e007      	b.n	40500e <_vfiprintf_r+0x3b2>
  404ffe:	f101 0e02 	add.w	lr, r1, #2
  405002:	f10c 0c08 	add.w	ip, ip, #8
  405006:	4601      	mov	r1, r0
  405008:	3e10      	subs	r6, #16
  40500a:	2e10      	cmp	r6, #16
  40500c:	dd11      	ble.n	405032 <_vfiprintf_r+0x3d6>
  40500e:	1c48      	adds	r0, r1, #1
  405010:	3210      	adds	r2, #16
  405012:	2807      	cmp	r0, #7
  405014:	9211      	str	r2, [sp, #68]	; 0x44
  405016:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40501a:	9010      	str	r0, [sp, #64]	; 0x40
  40501c:	ddef      	ble.n	404ffe <_vfiprintf_r+0x3a2>
  40501e:	2a00      	cmp	r2, #0
  405020:	f040 829d 	bne.w	40555e <_vfiprintf_r+0x902>
  405024:	3e10      	subs	r6, #16
  405026:	2e10      	cmp	r6, #16
  405028:	f04f 0e01 	mov.w	lr, #1
  40502c:	4611      	mov	r1, r2
  40502e:	46cc      	mov	ip, r9
  405030:	dced      	bgt.n	40500e <_vfiprintf_r+0x3b2>
  405032:	4654      	mov	r4, sl
  405034:	46e2      	mov	sl, ip
  405036:	4432      	add	r2, r6
  405038:	f1be 0f07 	cmp.w	lr, #7
  40503c:	9211      	str	r2, [sp, #68]	; 0x44
  40503e:	e88a 0060 	stmia.w	sl, {r5, r6}
  405042:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  405046:	f300 8369 	bgt.w	40571c <_vfiprintf_r+0xac0>
  40504a:	f10a 0a08 	add.w	sl, sl, #8
  40504e:	f10e 0001 	add.w	r0, lr, #1
  405052:	4671      	mov	r1, lr
  405054:	e1ab      	b.n	4053ae <_vfiprintf_r+0x752>
  405056:	9608      	str	r6, [sp, #32]
  405058:	f013 0220 	ands.w	r2, r3, #32
  40505c:	f040 838c 	bne.w	405778 <_vfiprintf_r+0xb1c>
  405060:	f013 0110 	ands.w	r1, r3, #16
  405064:	f040 831a 	bne.w	40569c <_vfiprintf_r+0xa40>
  405068:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40506c:	f000 8316 	beq.w	40569c <_vfiprintf_r+0xa40>
  405070:	9807      	ldr	r0, [sp, #28]
  405072:	460a      	mov	r2, r1
  405074:	4601      	mov	r1, r0
  405076:	3104      	adds	r1, #4
  405078:	8806      	ldrh	r6, [r0, #0]
  40507a:	9107      	str	r1, [sp, #28]
  40507c:	2700      	movs	r7, #0
  40507e:	e720      	b.n	404ec2 <_vfiprintf_r+0x266>
  405080:	9608      	str	r6, [sp, #32]
  405082:	f043 0310 	orr.w	r3, r3, #16
  405086:	e7e7      	b.n	405058 <_vfiprintf_r+0x3fc>
  405088:	9608      	str	r6, [sp, #32]
  40508a:	f043 0310 	orr.w	r3, r3, #16
  40508e:	e708      	b.n	404ea2 <_vfiprintf_r+0x246>
  405090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405094:	f898 2000 	ldrb.w	r2, [r8]
  405098:	e652      	b.n	404d40 <_vfiprintf_r+0xe4>
  40509a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40509e:	2600      	movs	r6, #0
  4050a0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4050a4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4050a8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4050ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4050b0:	2909      	cmp	r1, #9
  4050b2:	d9f5      	bls.n	4050a0 <_vfiprintf_r+0x444>
  4050b4:	e646      	b.n	404d44 <_vfiprintf_r+0xe8>
  4050b6:	9608      	str	r6, [sp, #32]
  4050b8:	2800      	cmp	r0, #0
  4050ba:	f040 8408 	bne.w	4058ce <_vfiprintf_r+0xc72>
  4050be:	f043 0310 	orr.w	r3, r3, #16
  4050c2:	069e      	lsls	r6, r3, #26
  4050c4:	f100 834c 	bmi.w	405760 <_vfiprintf_r+0xb04>
  4050c8:	06dd      	lsls	r5, r3, #27
  4050ca:	f100 82f3 	bmi.w	4056b4 <_vfiprintf_r+0xa58>
  4050ce:	0658      	lsls	r0, r3, #25
  4050d0:	f140 82f0 	bpl.w	4056b4 <_vfiprintf_r+0xa58>
  4050d4:	9d07      	ldr	r5, [sp, #28]
  4050d6:	f9b5 6000 	ldrsh.w	r6, [r5]
  4050da:	462a      	mov	r2, r5
  4050dc:	17f7      	asrs	r7, r6, #31
  4050de:	3204      	adds	r2, #4
  4050e0:	4630      	mov	r0, r6
  4050e2:	4639      	mov	r1, r7
  4050e4:	9207      	str	r2, [sp, #28]
  4050e6:	2800      	cmp	r0, #0
  4050e8:	f171 0200 	sbcs.w	r2, r1, #0
  4050ec:	f2c0 835d 	blt.w	4057aa <_vfiprintf_r+0xb4e>
  4050f0:	1c61      	adds	r1, r4, #1
  4050f2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4050f6:	f04f 0201 	mov.w	r2, #1
  4050fa:	f47f aeea 	bne.w	404ed2 <_vfiprintf_r+0x276>
  4050fe:	ea56 0107 	orrs.w	r1, r6, r7
  405102:	f000 824d 	beq.w	4055a0 <_vfiprintf_r+0x944>
  405106:	9302      	str	r3, [sp, #8]
  405108:	2a01      	cmp	r2, #1
  40510a:	f000 828c 	beq.w	405626 <_vfiprintf_r+0x9ca>
  40510e:	2a02      	cmp	r2, #2
  405110:	f040 825c 	bne.w	4055cc <_vfiprintf_r+0x970>
  405114:	980b      	ldr	r0, [sp, #44]	; 0x2c
  405116:	46cb      	mov	fp, r9
  405118:	0933      	lsrs	r3, r6, #4
  40511a:	f006 010f 	and.w	r1, r6, #15
  40511e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  405122:	093a      	lsrs	r2, r7, #4
  405124:	461e      	mov	r6, r3
  405126:	4617      	mov	r7, r2
  405128:	5c43      	ldrb	r3, [r0, r1]
  40512a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40512e:	ea56 0307 	orrs.w	r3, r6, r7
  405132:	d1f1      	bne.n	405118 <_vfiprintf_r+0x4bc>
  405134:	eba9 030b 	sub.w	r3, r9, fp
  405138:	9305      	str	r3, [sp, #20]
  40513a:	e6e1      	b.n	404f00 <_vfiprintf_r+0x2a4>
  40513c:	2800      	cmp	r0, #0
  40513e:	f040 83c0 	bne.w	4058c2 <_vfiprintf_r+0xc66>
  405142:	0699      	lsls	r1, r3, #26
  405144:	f100 8367 	bmi.w	405816 <_vfiprintf_r+0xbba>
  405148:	06da      	lsls	r2, r3, #27
  40514a:	f100 80f1 	bmi.w	405330 <_vfiprintf_r+0x6d4>
  40514e:	065b      	lsls	r3, r3, #25
  405150:	f140 80ee 	bpl.w	405330 <_vfiprintf_r+0x6d4>
  405154:	9a07      	ldr	r2, [sp, #28]
  405156:	6813      	ldr	r3, [r2, #0]
  405158:	3204      	adds	r2, #4
  40515a:	9207      	str	r2, [sp, #28]
  40515c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  405160:	801a      	strh	r2, [r3, #0]
  405162:	e5b8      	b.n	404cd6 <_vfiprintf_r+0x7a>
  405164:	9807      	ldr	r0, [sp, #28]
  405166:	4a3d      	ldr	r2, [pc, #244]	; (40525c <_vfiprintf_r+0x600>)
  405168:	9608      	str	r6, [sp, #32]
  40516a:	920b      	str	r2, [sp, #44]	; 0x2c
  40516c:	6806      	ldr	r6, [r0, #0]
  40516e:	2278      	movs	r2, #120	; 0x78
  405170:	2130      	movs	r1, #48	; 0x30
  405172:	3004      	adds	r0, #4
  405174:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405178:	f043 0302 	orr.w	r3, r3, #2
  40517c:	9007      	str	r0, [sp, #28]
  40517e:	2700      	movs	r7, #0
  405180:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405184:	2202      	movs	r2, #2
  405186:	e69c      	b.n	404ec2 <_vfiprintf_r+0x266>
  405188:	9608      	str	r6, [sp, #32]
  40518a:	2800      	cmp	r0, #0
  40518c:	d099      	beq.n	4050c2 <_vfiprintf_r+0x466>
  40518e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405192:	e796      	b.n	4050c2 <_vfiprintf_r+0x466>
  405194:	f898 2000 	ldrb.w	r2, [r8]
  405198:	2d00      	cmp	r5, #0
  40519a:	f47f add1 	bne.w	404d40 <_vfiprintf_r+0xe4>
  40519e:	2001      	movs	r0, #1
  4051a0:	2520      	movs	r5, #32
  4051a2:	e5cd      	b.n	404d40 <_vfiprintf_r+0xe4>
  4051a4:	f043 0301 	orr.w	r3, r3, #1
  4051a8:	f898 2000 	ldrb.w	r2, [r8]
  4051ac:	e5c8      	b.n	404d40 <_vfiprintf_r+0xe4>
  4051ae:	9608      	str	r6, [sp, #32]
  4051b0:	2800      	cmp	r0, #0
  4051b2:	f040 8393 	bne.w	4058dc <_vfiprintf_r+0xc80>
  4051b6:	4929      	ldr	r1, [pc, #164]	; (40525c <_vfiprintf_r+0x600>)
  4051b8:	910b      	str	r1, [sp, #44]	; 0x2c
  4051ba:	069f      	lsls	r7, r3, #26
  4051bc:	f100 82e8 	bmi.w	405790 <_vfiprintf_r+0xb34>
  4051c0:	9807      	ldr	r0, [sp, #28]
  4051c2:	06de      	lsls	r6, r3, #27
  4051c4:	4601      	mov	r1, r0
  4051c6:	f100 8270 	bmi.w	4056aa <_vfiprintf_r+0xa4e>
  4051ca:	065d      	lsls	r5, r3, #25
  4051cc:	f140 826d 	bpl.w	4056aa <_vfiprintf_r+0xa4e>
  4051d0:	3104      	adds	r1, #4
  4051d2:	8806      	ldrh	r6, [r0, #0]
  4051d4:	9107      	str	r1, [sp, #28]
  4051d6:	2700      	movs	r7, #0
  4051d8:	07d8      	lsls	r0, r3, #31
  4051da:	f140 8222 	bpl.w	405622 <_vfiprintf_r+0x9c6>
  4051de:	ea56 0107 	orrs.w	r1, r6, r7
  4051e2:	f000 821e 	beq.w	405622 <_vfiprintf_r+0x9c6>
  4051e6:	2130      	movs	r1, #48	; 0x30
  4051e8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4051ec:	f043 0302 	orr.w	r3, r3, #2
  4051f0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4051f4:	2202      	movs	r2, #2
  4051f6:	e664      	b.n	404ec2 <_vfiprintf_r+0x266>
  4051f8:	9608      	str	r6, [sp, #32]
  4051fa:	2800      	cmp	r0, #0
  4051fc:	f040 836b 	bne.w	4058d6 <_vfiprintf_r+0xc7a>
  405200:	4917      	ldr	r1, [pc, #92]	; (405260 <_vfiprintf_r+0x604>)
  405202:	910b      	str	r1, [sp, #44]	; 0x2c
  405204:	e7d9      	b.n	4051ba <_vfiprintf_r+0x55e>
  405206:	9907      	ldr	r1, [sp, #28]
  405208:	9608      	str	r6, [sp, #32]
  40520a:	680a      	ldr	r2, [r1, #0]
  40520c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  405210:	f04f 0000 	mov.w	r0, #0
  405214:	460a      	mov	r2, r1
  405216:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40521a:	3204      	adds	r2, #4
  40521c:	2001      	movs	r0, #1
  40521e:	9001      	str	r0, [sp, #4]
  405220:	9207      	str	r2, [sp, #28]
  405222:	9005      	str	r0, [sp, #20]
  405224:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  405228:	9302      	str	r3, [sp, #8]
  40522a:	2400      	movs	r4, #0
  40522c:	e670      	b.n	404f10 <_vfiprintf_r+0x2b4>
  40522e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405232:	f898 2000 	ldrb.w	r2, [r8]
  405236:	e583      	b.n	404d40 <_vfiprintf_r+0xe4>
  405238:	f898 2000 	ldrb.w	r2, [r8]
  40523c:	2a6c      	cmp	r2, #108	; 0x6c
  40523e:	bf03      	ittte	eq
  405240:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  405244:	f043 0320 	orreq.w	r3, r3, #32
  405248:	f108 0801 	addeq.w	r8, r8, #1
  40524c:	f043 0310 	orrne.w	r3, r3, #16
  405250:	e576      	b.n	404d40 <_vfiprintf_r+0xe4>
  405252:	bf00      	nop
  405254:	004123d0 	.word	0x004123d0
  405258:	004123e0 	.word	0x004123e0
  40525c:	004123b4 	.word	0x004123b4
  405260:	004123a0 	.word	0x004123a0
  405264:	9907      	ldr	r1, [sp, #28]
  405266:	680e      	ldr	r6, [r1, #0]
  405268:	460a      	mov	r2, r1
  40526a:	2e00      	cmp	r6, #0
  40526c:	f102 0204 	add.w	r2, r2, #4
  405270:	f6ff ae0f 	blt.w	404e92 <_vfiprintf_r+0x236>
  405274:	9207      	str	r2, [sp, #28]
  405276:	f898 2000 	ldrb.w	r2, [r8]
  40527a:	e561      	b.n	404d40 <_vfiprintf_r+0xe4>
  40527c:	f898 2000 	ldrb.w	r2, [r8]
  405280:	2001      	movs	r0, #1
  405282:	252b      	movs	r5, #43	; 0x2b
  405284:	e55c      	b.n	404d40 <_vfiprintf_r+0xe4>
  405286:	9907      	ldr	r1, [sp, #28]
  405288:	9608      	str	r6, [sp, #32]
  40528a:	f8d1 b000 	ldr.w	fp, [r1]
  40528e:	f04f 0200 	mov.w	r2, #0
  405292:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405296:	1d0e      	adds	r6, r1, #4
  405298:	f1bb 0f00 	cmp.w	fp, #0
  40529c:	f000 82e5 	beq.w	40586a <_vfiprintf_r+0xc0e>
  4052a0:	1c67      	adds	r7, r4, #1
  4052a2:	f000 82c4 	beq.w	40582e <_vfiprintf_r+0xbd2>
  4052a6:	4622      	mov	r2, r4
  4052a8:	2100      	movs	r1, #0
  4052aa:	4658      	mov	r0, fp
  4052ac:	9301      	str	r3, [sp, #4]
  4052ae:	f001 f91f 	bl	4064f0 <memchr>
  4052b2:	9b01      	ldr	r3, [sp, #4]
  4052b4:	2800      	cmp	r0, #0
  4052b6:	f000 82e5 	beq.w	405884 <_vfiprintf_r+0xc28>
  4052ba:	eba0 020b 	sub.w	r2, r0, fp
  4052be:	9205      	str	r2, [sp, #20]
  4052c0:	9607      	str	r6, [sp, #28]
  4052c2:	9302      	str	r3, [sp, #8]
  4052c4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4052c8:	2400      	movs	r4, #0
  4052ca:	e619      	b.n	404f00 <_vfiprintf_r+0x2a4>
  4052cc:	f898 2000 	ldrb.w	r2, [r8]
  4052d0:	2a2a      	cmp	r2, #42	; 0x2a
  4052d2:	f108 0701 	add.w	r7, r8, #1
  4052d6:	f000 82e9 	beq.w	4058ac <_vfiprintf_r+0xc50>
  4052da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4052de:	2909      	cmp	r1, #9
  4052e0:	46b8      	mov	r8, r7
  4052e2:	f04f 0400 	mov.w	r4, #0
  4052e6:	f63f ad2d 	bhi.w	404d44 <_vfiprintf_r+0xe8>
  4052ea:	f818 2b01 	ldrb.w	r2, [r8], #1
  4052ee:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4052f2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4052f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4052fa:	2909      	cmp	r1, #9
  4052fc:	d9f5      	bls.n	4052ea <_vfiprintf_r+0x68e>
  4052fe:	e521      	b.n	404d44 <_vfiprintf_r+0xe8>
  405300:	f043 0320 	orr.w	r3, r3, #32
  405304:	f898 2000 	ldrb.w	r2, [r8]
  405308:	e51a      	b.n	404d40 <_vfiprintf_r+0xe4>
  40530a:	9608      	str	r6, [sp, #32]
  40530c:	2800      	cmp	r0, #0
  40530e:	f040 82db 	bne.w	4058c8 <_vfiprintf_r+0xc6c>
  405312:	2a00      	cmp	r2, #0
  405314:	f000 80e7 	beq.w	4054e6 <_vfiprintf_r+0x88a>
  405318:	2101      	movs	r1, #1
  40531a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40531e:	f04f 0200 	mov.w	r2, #0
  405322:	9101      	str	r1, [sp, #4]
  405324:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405328:	9105      	str	r1, [sp, #20]
  40532a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40532e:	e77b      	b.n	405228 <_vfiprintf_r+0x5cc>
  405330:	9a07      	ldr	r2, [sp, #28]
  405332:	6813      	ldr	r3, [r2, #0]
  405334:	3204      	adds	r2, #4
  405336:	9207      	str	r2, [sp, #28]
  405338:	9a03      	ldr	r2, [sp, #12]
  40533a:	601a      	str	r2, [r3, #0]
  40533c:	e4cb      	b.n	404cd6 <_vfiprintf_r+0x7a>
  40533e:	aa0f      	add	r2, sp, #60	; 0x3c
  405340:	9904      	ldr	r1, [sp, #16]
  405342:	4620      	mov	r0, r4
  405344:	f7ff fc4a 	bl	404bdc <__sprint_r.part.0>
  405348:	2800      	cmp	r0, #0
  40534a:	f040 8139 	bne.w	4055c0 <_vfiprintf_r+0x964>
  40534e:	9910      	ldr	r1, [sp, #64]	; 0x40
  405350:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405352:	f101 0c01 	add.w	ip, r1, #1
  405356:	46ce      	mov	lr, r9
  405358:	e5ff      	b.n	404f5a <_vfiprintf_r+0x2fe>
  40535a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40535c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40535e:	1c48      	adds	r0, r1, #1
  405360:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405364:	2d00      	cmp	r5, #0
  405366:	f43f ae22 	beq.w	404fae <_vfiprintf_r+0x352>
  40536a:	3201      	adds	r2, #1
  40536c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  405370:	2101      	movs	r1, #1
  405372:	2807      	cmp	r0, #7
  405374:	9211      	str	r2, [sp, #68]	; 0x44
  405376:	9010      	str	r0, [sp, #64]	; 0x40
  405378:	f8ca 5000 	str.w	r5, [sl]
  40537c:	f8ca 1004 	str.w	r1, [sl, #4]
  405380:	f340 8108 	ble.w	405594 <_vfiprintf_r+0x938>
  405384:	2a00      	cmp	r2, #0
  405386:	f040 81bc 	bne.w	405702 <_vfiprintf_r+0xaa6>
  40538a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40538c:	2b00      	cmp	r3, #0
  40538e:	f43f ae1f 	beq.w	404fd0 <_vfiprintf_r+0x374>
  405392:	ab0e      	add	r3, sp, #56	; 0x38
  405394:	2202      	movs	r2, #2
  405396:	4608      	mov	r0, r1
  405398:	931c      	str	r3, [sp, #112]	; 0x70
  40539a:	921d      	str	r2, [sp, #116]	; 0x74
  40539c:	46ca      	mov	sl, r9
  40539e:	4601      	mov	r1, r0
  4053a0:	f10a 0a08 	add.w	sl, sl, #8
  4053a4:	3001      	adds	r0, #1
  4053a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4053a8:	2b80      	cmp	r3, #128	; 0x80
  4053aa:	f43f ae19 	beq.w	404fe0 <_vfiprintf_r+0x384>
  4053ae:	9b05      	ldr	r3, [sp, #20]
  4053b0:	1ae4      	subs	r4, r4, r3
  4053b2:	2c00      	cmp	r4, #0
  4053b4:	dd2e      	ble.n	405414 <_vfiprintf_r+0x7b8>
  4053b6:	2c10      	cmp	r4, #16
  4053b8:	4db3      	ldr	r5, [pc, #716]	; (405688 <_vfiprintf_r+0xa2c>)
  4053ba:	dd1e      	ble.n	4053fa <_vfiprintf_r+0x79e>
  4053bc:	46d6      	mov	lr, sl
  4053be:	2610      	movs	r6, #16
  4053c0:	9f06      	ldr	r7, [sp, #24]
  4053c2:	f8dd a010 	ldr.w	sl, [sp, #16]
  4053c6:	e006      	b.n	4053d6 <_vfiprintf_r+0x77a>
  4053c8:	1c88      	adds	r0, r1, #2
  4053ca:	f10e 0e08 	add.w	lr, lr, #8
  4053ce:	4619      	mov	r1, r3
  4053d0:	3c10      	subs	r4, #16
  4053d2:	2c10      	cmp	r4, #16
  4053d4:	dd10      	ble.n	4053f8 <_vfiprintf_r+0x79c>
  4053d6:	1c4b      	adds	r3, r1, #1
  4053d8:	3210      	adds	r2, #16
  4053da:	2b07      	cmp	r3, #7
  4053dc:	9211      	str	r2, [sp, #68]	; 0x44
  4053de:	e88e 0060 	stmia.w	lr, {r5, r6}
  4053e2:	9310      	str	r3, [sp, #64]	; 0x40
  4053e4:	ddf0      	ble.n	4053c8 <_vfiprintf_r+0x76c>
  4053e6:	2a00      	cmp	r2, #0
  4053e8:	d165      	bne.n	4054b6 <_vfiprintf_r+0x85a>
  4053ea:	3c10      	subs	r4, #16
  4053ec:	2c10      	cmp	r4, #16
  4053ee:	f04f 0001 	mov.w	r0, #1
  4053f2:	4611      	mov	r1, r2
  4053f4:	46ce      	mov	lr, r9
  4053f6:	dcee      	bgt.n	4053d6 <_vfiprintf_r+0x77a>
  4053f8:	46f2      	mov	sl, lr
  4053fa:	4422      	add	r2, r4
  4053fc:	2807      	cmp	r0, #7
  4053fe:	9211      	str	r2, [sp, #68]	; 0x44
  405400:	f8ca 5000 	str.w	r5, [sl]
  405404:	f8ca 4004 	str.w	r4, [sl, #4]
  405408:	9010      	str	r0, [sp, #64]	; 0x40
  40540a:	f300 8085 	bgt.w	405518 <_vfiprintf_r+0x8bc>
  40540e:	f10a 0a08 	add.w	sl, sl, #8
  405412:	3001      	adds	r0, #1
  405414:	9905      	ldr	r1, [sp, #20]
  405416:	f8ca b000 	str.w	fp, [sl]
  40541a:	440a      	add	r2, r1
  40541c:	2807      	cmp	r0, #7
  40541e:	9211      	str	r2, [sp, #68]	; 0x44
  405420:	f8ca 1004 	str.w	r1, [sl, #4]
  405424:	9010      	str	r0, [sp, #64]	; 0x40
  405426:	f340 8082 	ble.w	40552e <_vfiprintf_r+0x8d2>
  40542a:	2a00      	cmp	r2, #0
  40542c:	f040 8118 	bne.w	405660 <_vfiprintf_r+0xa04>
  405430:	9b02      	ldr	r3, [sp, #8]
  405432:	9210      	str	r2, [sp, #64]	; 0x40
  405434:	0758      	lsls	r0, r3, #29
  405436:	d535      	bpl.n	4054a4 <_vfiprintf_r+0x848>
  405438:	9b08      	ldr	r3, [sp, #32]
  40543a:	9901      	ldr	r1, [sp, #4]
  40543c:	1a5c      	subs	r4, r3, r1
  40543e:	2c00      	cmp	r4, #0
  405440:	f340 80e7 	ble.w	405612 <_vfiprintf_r+0x9b6>
  405444:	46ca      	mov	sl, r9
  405446:	2c10      	cmp	r4, #16
  405448:	f340 8218 	ble.w	40587c <_vfiprintf_r+0xc20>
  40544c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40544e:	4e8f      	ldr	r6, [pc, #572]	; (40568c <_vfiprintf_r+0xa30>)
  405450:	9f06      	ldr	r7, [sp, #24]
  405452:	f8dd b010 	ldr.w	fp, [sp, #16]
  405456:	2510      	movs	r5, #16
  405458:	e006      	b.n	405468 <_vfiprintf_r+0x80c>
  40545a:	1c88      	adds	r0, r1, #2
  40545c:	f10a 0a08 	add.w	sl, sl, #8
  405460:	4619      	mov	r1, r3
  405462:	3c10      	subs	r4, #16
  405464:	2c10      	cmp	r4, #16
  405466:	dd11      	ble.n	40548c <_vfiprintf_r+0x830>
  405468:	1c4b      	adds	r3, r1, #1
  40546a:	3210      	adds	r2, #16
  40546c:	2b07      	cmp	r3, #7
  40546e:	9211      	str	r2, [sp, #68]	; 0x44
  405470:	f8ca 6000 	str.w	r6, [sl]
  405474:	f8ca 5004 	str.w	r5, [sl, #4]
  405478:	9310      	str	r3, [sp, #64]	; 0x40
  40547a:	ddee      	ble.n	40545a <_vfiprintf_r+0x7fe>
  40547c:	bb42      	cbnz	r2, 4054d0 <_vfiprintf_r+0x874>
  40547e:	3c10      	subs	r4, #16
  405480:	2c10      	cmp	r4, #16
  405482:	f04f 0001 	mov.w	r0, #1
  405486:	4611      	mov	r1, r2
  405488:	46ca      	mov	sl, r9
  40548a:	dced      	bgt.n	405468 <_vfiprintf_r+0x80c>
  40548c:	4422      	add	r2, r4
  40548e:	2807      	cmp	r0, #7
  405490:	9211      	str	r2, [sp, #68]	; 0x44
  405492:	f8ca 6000 	str.w	r6, [sl]
  405496:	f8ca 4004 	str.w	r4, [sl, #4]
  40549a:	9010      	str	r0, [sp, #64]	; 0x40
  40549c:	dd51      	ble.n	405542 <_vfiprintf_r+0x8e6>
  40549e:	2a00      	cmp	r2, #0
  4054a0:	f040 819b 	bne.w	4057da <_vfiprintf_r+0xb7e>
  4054a4:	9b03      	ldr	r3, [sp, #12]
  4054a6:	9a08      	ldr	r2, [sp, #32]
  4054a8:	9901      	ldr	r1, [sp, #4]
  4054aa:	428a      	cmp	r2, r1
  4054ac:	bfac      	ite	ge
  4054ae:	189b      	addge	r3, r3, r2
  4054b0:	185b      	addlt	r3, r3, r1
  4054b2:	9303      	str	r3, [sp, #12]
  4054b4:	e04e      	b.n	405554 <_vfiprintf_r+0x8f8>
  4054b6:	aa0f      	add	r2, sp, #60	; 0x3c
  4054b8:	4651      	mov	r1, sl
  4054ba:	4638      	mov	r0, r7
  4054bc:	f7ff fb8e 	bl	404bdc <__sprint_r.part.0>
  4054c0:	2800      	cmp	r0, #0
  4054c2:	f040 813f 	bne.w	405744 <_vfiprintf_r+0xae8>
  4054c6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4054c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4054ca:	1c48      	adds	r0, r1, #1
  4054cc:	46ce      	mov	lr, r9
  4054ce:	e77f      	b.n	4053d0 <_vfiprintf_r+0x774>
  4054d0:	aa0f      	add	r2, sp, #60	; 0x3c
  4054d2:	4659      	mov	r1, fp
  4054d4:	4638      	mov	r0, r7
  4054d6:	f7ff fb81 	bl	404bdc <__sprint_r.part.0>
  4054da:	b960      	cbnz	r0, 4054f6 <_vfiprintf_r+0x89a>
  4054dc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4054de:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4054e0:	1c48      	adds	r0, r1, #1
  4054e2:	46ca      	mov	sl, r9
  4054e4:	e7bd      	b.n	405462 <_vfiprintf_r+0x806>
  4054e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4054e8:	f8dd b010 	ldr.w	fp, [sp, #16]
  4054ec:	2b00      	cmp	r3, #0
  4054ee:	f040 81d4 	bne.w	40589a <_vfiprintf_r+0xc3e>
  4054f2:	2300      	movs	r3, #0
  4054f4:	9310      	str	r3, [sp, #64]	; 0x40
  4054f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4054fa:	f013 0f01 	tst.w	r3, #1
  4054fe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405502:	d102      	bne.n	40550a <_vfiprintf_r+0x8ae>
  405504:	059a      	lsls	r2, r3, #22
  405506:	f140 80de 	bpl.w	4056c6 <_vfiprintf_r+0xa6a>
  40550a:	065b      	lsls	r3, r3, #25
  40550c:	f53f acb2 	bmi.w	404e74 <_vfiprintf_r+0x218>
  405510:	9803      	ldr	r0, [sp, #12]
  405512:	b02d      	add	sp, #180	; 0xb4
  405514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405518:	2a00      	cmp	r2, #0
  40551a:	f040 8106 	bne.w	40572a <_vfiprintf_r+0xace>
  40551e:	9a05      	ldr	r2, [sp, #20]
  405520:	921d      	str	r2, [sp, #116]	; 0x74
  405522:	2301      	movs	r3, #1
  405524:	9211      	str	r2, [sp, #68]	; 0x44
  405526:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40552a:	9310      	str	r3, [sp, #64]	; 0x40
  40552c:	46ca      	mov	sl, r9
  40552e:	f10a 0a08 	add.w	sl, sl, #8
  405532:	9b02      	ldr	r3, [sp, #8]
  405534:	0759      	lsls	r1, r3, #29
  405536:	d504      	bpl.n	405542 <_vfiprintf_r+0x8e6>
  405538:	9b08      	ldr	r3, [sp, #32]
  40553a:	9901      	ldr	r1, [sp, #4]
  40553c:	1a5c      	subs	r4, r3, r1
  40553e:	2c00      	cmp	r4, #0
  405540:	dc81      	bgt.n	405446 <_vfiprintf_r+0x7ea>
  405542:	9b03      	ldr	r3, [sp, #12]
  405544:	9908      	ldr	r1, [sp, #32]
  405546:	9801      	ldr	r0, [sp, #4]
  405548:	4281      	cmp	r1, r0
  40554a:	bfac      	ite	ge
  40554c:	185b      	addge	r3, r3, r1
  40554e:	181b      	addlt	r3, r3, r0
  405550:	9303      	str	r3, [sp, #12]
  405552:	bb72      	cbnz	r2, 4055b2 <_vfiprintf_r+0x956>
  405554:	2300      	movs	r3, #0
  405556:	9310      	str	r3, [sp, #64]	; 0x40
  405558:	46ca      	mov	sl, r9
  40555a:	f7ff bbbc 	b.w	404cd6 <_vfiprintf_r+0x7a>
  40555e:	aa0f      	add	r2, sp, #60	; 0x3c
  405560:	9904      	ldr	r1, [sp, #16]
  405562:	4620      	mov	r0, r4
  405564:	f7ff fb3a 	bl	404bdc <__sprint_r.part.0>
  405568:	bb50      	cbnz	r0, 4055c0 <_vfiprintf_r+0x964>
  40556a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40556c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40556e:	f101 0e01 	add.w	lr, r1, #1
  405572:	46cc      	mov	ip, r9
  405574:	e548      	b.n	405008 <_vfiprintf_r+0x3ac>
  405576:	2a00      	cmp	r2, #0
  405578:	f040 8140 	bne.w	4057fc <_vfiprintf_r+0xba0>
  40557c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  405580:	2900      	cmp	r1, #0
  405582:	f000 811b 	beq.w	4057bc <_vfiprintf_r+0xb60>
  405586:	2201      	movs	r2, #1
  405588:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40558c:	4610      	mov	r0, r2
  40558e:	921d      	str	r2, [sp, #116]	; 0x74
  405590:	911c      	str	r1, [sp, #112]	; 0x70
  405592:	46ca      	mov	sl, r9
  405594:	4601      	mov	r1, r0
  405596:	f10a 0a08 	add.w	sl, sl, #8
  40559a:	3001      	adds	r0, #1
  40559c:	e507      	b.n	404fae <_vfiprintf_r+0x352>
  40559e:	9b02      	ldr	r3, [sp, #8]
  4055a0:	2a01      	cmp	r2, #1
  4055a2:	f000 8098 	beq.w	4056d6 <_vfiprintf_r+0xa7a>
  4055a6:	2a02      	cmp	r2, #2
  4055a8:	d10d      	bne.n	4055c6 <_vfiprintf_r+0x96a>
  4055aa:	9302      	str	r3, [sp, #8]
  4055ac:	2600      	movs	r6, #0
  4055ae:	2700      	movs	r7, #0
  4055b0:	e5b0      	b.n	405114 <_vfiprintf_r+0x4b8>
  4055b2:	aa0f      	add	r2, sp, #60	; 0x3c
  4055b4:	9904      	ldr	r1, [sp, #16]
  4055b6:	9806      	ldr	r0, [sp, #24]
  4055b8:	f7ff fb10 	bl	404bdc <__sprint_r.part.0>
  4055bc:	2800      	cmp	r0, #0
  4055be:	d0c9      	beq.n	405554 <_vfiprintf_r+0x8f8>
  4055c0:	f8dd b010 	ldr.w	fp, [sp, #16]
  4055c4:	e797      	b.n	4054f6 <_vfiprintf_r+0x89a>
  4055c6:	9302      	str	r3, [sp, #8]
  4055c8:	2600      	movs	r6, #0
  4055ca:	2700      	movs	r7, #0
  4055cc:	4649      	mov	r1, r9
  4055ce:	e000      	b.n	4055d2 <_vfiprintf_r+0x976>
  4055d0:	4659      	mov	r1, fp
  4055d2:	08f2      	lsrs	r2, r6, #3
  4055d4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4055d8:	08f8      	lsrs	r0, r7, #3
  4055da:	f006 0307 	and.w	r3, r6, #7
  4055de:	4607      	mov	r7, r0
  4055e0:	4616      	mov	r6, r2
  4055e2:	3330      	adds	r3, #48	; 0x30
  4055e4:	ea56 0207 	orrs.w	r2, r6, r7
  4055e8:	f801 3c01 	strb.w	r3, [r1, #-1]
  4055ec:	f101 3bff 	add.w	fp, r1, #4294967295
  4055f0:	d1ee      	bne.n	4055d0 <_vfiprintf_r+0x974>
  4055f2:	9a02      	ldr	r2, [sp, #8]
  4055f4:	07d6      	lsls	r6, r2, #31
  4055f6:	f57f ad9d 	bpl.w	405134 <_vfiprintf_r+0x4d8>
  4055fa:	2b30      	cmp	r3, #48	; 0x30
  4055fc:	f43f ad9a 	beq.w	405134 <_vfiprintf_r+0x4d8>
  405600:	3902      	subs	r1, #2
  405602:	2330      	movs	r3, #48	; 0x30
  405604:	f80b 3c01 	strb.w	r3, [fp, #-1]
  405608:	eba9 0301 	sub.w	r3, r9, r1
  40560c:	9305      	str	r3, [sp, #20]
  40560e:	468b      	mov	fp, r1
  405610:	e476      	b.n	404f00 <_vfiprintf_r+0x2a4>
  405612:	9b03      	ldr	r3, [sp, #12]
  405614:	9a08      	ldr	r2, [sp, #32]
  405616:	428a      	cmp	r2, r1
  405618:	bfac      	ite	ge
  40561a:	189b      	addge	r3, r3, r2
  40561c:	185b      	addlt	r3, r3, r1
  40561e:	9303      	str	r3, [sp, #12]
  405620:	e798      	b.n	405554 <_vfiprintf_r+0x8f8>
  405622:	2202      	movs	r2, #2
  405624:	e44d      	b.n	404ec2 <_vfiprintf_r+0x266>
  405626:	2f00      	cmp	r7, #0
  405628:	bf08      	it	eq
  40562a:	2e0a      	cmpeq	r6, #10
  40562c:	d352      	bcc.n	4056d4 <_vfiprintf_r+0xa78>
  40562e:	46cb      	mov	fp, r9
  405630:	4630      	mov	r0, r6
  405632:	4639      	mov	r1, r7
  405634:	220a      	movs	r2, #10
  405636:	2300      	movs	r3, #0
  405638:	f001 fbc6 	bl	406dc8 <__aeabi_uldivmod>
  40563c:	3230      	adds	r2, #48	; 0x30
  40563e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  405642:	4630      	mov	r0, r6
  405644:	4639      	mov	r1, r7
  405646:	2300      	movs	r3, #0
  405648:	220a      	movs	r2, #10
  40564a:	f001 fbbd 	bl	406dc8 <__aeabi_uldivmod>
  40564e:	4606      	mov	r6, r0
  405650:	460f      	mov	r7, r1
  405652:	ea56 0307 	orrs.w	r3, r6, r7
  405656:	d1eb      	bne.n	405630 <_vfiprintf_r+0x9d4>
  405658:	e56c      	b.n	405134 <_vfiprintf_r+0x4d8>
  40565a:	9405      	str	r4, [sp, #20]
  40565c:	46cb      	mov	fp, r9
  40565e:	e44f      	b.n	404f00 <_vfiprintf_r+0x2a4>
  405660:	aa0f      	add	r2, sp, #60	; 0x3c
  405662:	9904      	ldr	r1, [sp, #16]
  405664:	9806      	ldr	r0, [sp, #24]
  405666:	f7ff fab9 	bl	404bdc <__sprint_r.part.0>
  40566a:	2800      	cmp	r0, #0
  40566c:	d1a8      	bne.n	4055c0 <_vfiprintf_r+0x964>
  40566e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405670:	46ca      	mov	sl, r9
  405672:	e75e      	b.n	405532 <_vfiprintf_r+0x8d6>
  405674:	aa0f      	add	r2, sp, #60	; 0x3c
  405676:	9904      	ldr	r1, [sp, #16]
  405678:	9806      	ldr	r0, [sp, #24]
  40567a:	f7ff faaf 	bl	404bdc <__sprint_r.part.0>
  40567e:	2800      	cmp	r0, #0
  405680:	d19e      	bne.n	4055c0 <_vfiprintf_r+0x964>
  405682:	46ca      	mov	sl, r9
  405684:	f7ff bbc0 	b.w	404e08 <_vfiprintf_r+0x1ac>
  405688:	004123e0 	.word	0x004123e0
  40568c:	004123d0 	.word	0x004123d0
  405690:	3104      	adds	r1, #4
  405692:	6816      	ldr	r6, [r2, #0]
  405694:	9107      	str	r1, [sp, #28]
  405696:	2201      	movs	r2, #1
  405698:	2700      	movs	r7, #0
  40569a:	e412      	b.n	404ec2 <_vfiprintf_r+0x266>
  40569c:	9807      	ldr	r0, [sp, #28]
  40569e:	4601      	mov	r1, r0
  4056a0:	3104      	adds	r1, #4
  4056a2:	6806      	ldr	r6, [r0, #0]
  4056a4:	9107      	str	r1, [sp, #28]
  4056a6:	2700      	movs	r7, #0
  4056a8:	e40b      	b.n	404ec2 <_vfiprintf_r+0x266>
  4056aa:	680e      	ldr	r6, [r1, #0]
  4056ac:	3104      	adds	r1, #4
  4056ae:	9107      	str	r1, [sp, #28]
  4056b0:	2700      	movs	r7, #0
  4056b2:	e591      	b.n	4051d8 <_vfiprintf_r+0x57c>
  4056b4:	9907      	ldr	r1, [sp, #28]
  4056b6:	680e      	ldr	r6, [r1, #0]
  4056b8:	460a      	mov	r2, r1
  4056ba:	17f7      	asrs	r7, r6, #31
  4056bc:	3204      	adds	r2, #4
  4056be:	9207      	str	r2, [sp, #28]
  4056c0:	4630      	mov	r0, r6
  4056c2:	4639      	mov	r1, r7
  4056c4:	e50f      	b.n	4050e6 <_vfiprintf_r+0x48a>
  4056c6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4056ca:	f000 fe7f 	bl	4063cc <__retarget_lock_release_recursive>
  4056ce:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4056d2:	e71a      	b.n	40550a <_vfiprintf_r+0x8ae>
  4056d4:	9b02      	ldr	r3, [sp, #8]
  4056d6:	9302      	str	r3, [sp, #8]
  4056d8:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4056dc:	3630      	adds	r6, #48	; 0x30
  4056de:	2301      	movs	r3, #1
  4056e0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4056e4:	9305      	str	r3, [sp, #20]
  4056e6:	e40b      	b.n	404f00 <_vfiprintf_r+0x2a4>
  4056e8:	aa0f      	add	r2, sp, #60	; 0x3c
  4056ea:	9904      	ldr	r1, [sp, #16]
  4056ec:	9806      	ldr	r0, [sp, #24]
  4056ee:	f7ff fa75 	bl	404bdc <__sprint_r.part.0>
  4056f2:	2800      	cmp	r0, #0
  4056f4:	f47f af64 	bne.w	4055c0 <_vfiprintf_r+0x964>
  4056f8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4056fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4056fc:	1c48      	adds	r0, r1, #1
  4056fe:	46ca      	mov	sl, r9
  405700:	e651      	b.n	4053a6 <_vfiprintf_r+0x74a>
  405702:	aa0f      	add	r2, sp, #60	; 0x3c
  405704:	9904      	ldr	r1, [sp, #16]
  405706:	9806      	ldr	r0, [sp, #24]
  405708:	f7ff fa68 	bl	404bdc <__sprint_r.part.0>
  40570c:	2800      	cmp	r0, #0
  40570e:	f47f af57 	bne.w	4055c0 <_vfiprintf_r+0x964>
  405712:	9910      	ldr	r1, [sp, #64]	; 0x40
  405714:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405716:	1c48      	adds	r0, r1, #1
  405718:	46ca      	mov	sl, r9
  40571a:	e448      	b.n	404fae <_vfiprintf_r+0x352>
  40571c:	2a00      	cmp	r2, #0
  40571e:	f040 8091 	bne.w	405844 <_vfiprintf_r+0xbe8>
  405722:	2001      	movs	r0, #1
  405724:	4611      	mov	r1, r2
  405726:	46ca      	mov	sl, r9
  405728:	e641      	b.n	4053ae <_vfiprintf_r+0x752>
  40572a:	aa0f      	add	r2, sp, #60	; 0x3c
  40572c:	9904      	ldr	r1, [sp, #16]
  40572e:	9806      	ldr	r0, [sp, #24]
  405730:	f7ff fa54 	bl	404bdc <__sprint_r.part.0>
  405734:	2800      	cmp	r0, #0
  405736:	f47f af43 	bne.w	4055c0 <_vfiprintf_r+0x964>
  40573a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40573c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40573e:	3001      	adds	r0, #1
  405740:	46ca      	mov	sl, r9
  405742:	e667      	b.n	405414 <_vfiprintf_r+0x7b8>
  405744:	46d3      	mov	fp, sl
  405746:	e6d6      	b.n	4054f6 <_vfiprintf_r+0x89a>
  405748:	9e07      	ldr	r6, [sp, #28]
  40574a:	3607      	adds	r6, #7
  40574c:	f026 0207 	bic.w	r2, r6, #7
  405750:	f102 0108 	add.w	r1, r2, #8
  405754:	e9d2 6700 	ldrd	r6, r7, [r2]
  405758:	9107      	str	r1, [sp, #28]
  40575a:	2201      	movs	r2, #1
  40575c:	f7ff bbb1 	b.w	404ec2 <_vfiprintf_r+0x266>
  405760:	9e07      	ldr	r6, [sp, #28]
  405762:	3607      	adds	r6, #7
  405764:	f026 0607 	bic.w	r6, r6, #7
  405768:	e9d6 0100 	ldrd	r0, r1, [r6]
  40576c:	f106 0208 	add.w	r2, r6, #8
  405770:	9207      	str	r2, [sp, #28]
  405772:	4606      	mov	r6, r0
  405774:	460f      	mov	r7, r1
  405776:	e4b6      	b.n	4050e6 <_vfiprintf_r+0x48a>
  405778:	9e07      	ldr	r6, [sp, #28]
  40577a:	3607      	adds	r6, #7
  40577c:	f026 0207 	bic.w	r2, r6, #7
  405780:	f102 0108 	add.w	r1, r2, #8
  405784:	e9d2 6700 	ldrd	r6, r7, [r2]
  405788:	9107      	str	r1, [sp, #28]
  40578a:	2200      	movs	r2, #0
  40578c:	f7ff bb99 	b.w	404ec2 <_vfiprintf_r+0x266>
  405790:	9e07      	ldr	r6, [sp, #28]
  405792:	3607      	adds	r6, #7
  405794:	f026 0107 	bic.w	r1, r6, #7
  405798:	f101 0008 	add.w	r0, r1, #8
  40579c:	9007      	str	r0, [sp, #28]
  40579e:	e9d1 6700 	ldrd	r6, r7, [r1]
  4057a2:	e519      	b.n	4051d8 <_vfiprintf_r+0x57c>
  4057a4:	46cb      	mov	fp, r9
  4057a6:	f7ff bbab 	b.w	404f00 <_vfiprintf_r+0x2a4>
  4057aa:	252d      	movs	r5, #45	; 0x2d
  4057ac:	4276      	negs	r6, r6
  4057ae:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4057b2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4057b6:	2201      	movs	r2, #1
  4057b8:	f7ff bb88 	b.w	404ecc <_vfiprintf_r+0x270>
  4057bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4057be:	b9b3      	cbnz	r3, 4057ee <_vfiprintf_r+0xb92>
  4057c0:	4611      	mov	r1, r2
  4057c2:	2001      	movs	r0, #1
  4057c4:	46ca      	mov	sl, r9
  4057c6:	e5f2      	b.n	4053ae <_vfiprintf_r+0x752>
  4057c8:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4057cc:	f000 fdfe 	bl	4063cc <__retarget_lock_release_recursive>
  4057d0:	f04f 33ff 	mov.w	r3, #4294967295
  4057d4:	9303      	str	r3, [sp, #12]
  4057d6:	f7ff bb50 	b.w	404e7a <_vfiprintf_r+0x21e>
  4057da:	aa0f      	add	r2, sp, #60	; 0x3c
  4057dc:	9904      	ldr	r1, [sp, #16]
  4057de:	9806      	ldr	r0, [sp, #24]
  4057e0:	f7ff f9fc 	bl	404bdc <__sprint_r.part.0>
  4057e4:	2800      	cmp	r0, #0
  4057e6:	f47f aeeb 	bne.w	4055c0 <_vfiprintf_r+0x964>
  4057ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4057ec:	e6a9      	b.n	405542 <_vfiprintf_r+0x8e6>
  4057ee:	ab0e      	add	r3, sp, #56	; 0x38
  4057f0:	2202      	movs	r2, #2
  4057f2:	931c      	str	r3, [sp, #112]	; 0x70
  4057f4:	921d      	str	r2, [sp, #116]	; 0x74
  4057f6:	2001      	movs	r0, #1
  4057f8:	46ca      	mov	sl, r9
  4057fa:	e5d0      	b.n	40539e <_vfiprintf_r+0x742>
  4057fc:	aa0f      	add	r2, sp, #60	; 0x3c
  4057fe:	9904      	ldr	r1, [sp, #16]
  405800:	9806      	ldr	r0, [sp, #24]
  405802:	f7ff f9eb 	bl	404bdc <__sprint_r.part.0>
  405806:	2800      	cmp	r0, #0
  405808:	f47f aeda 	bne.w	4055c0 <_vfiprintf_r+0x964>
  40580c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40580e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405810:	1c48      	adds	r0, r1, #1
  405812:	46ca      	mov	sl, r9
  405814:	e5a4      	b.n	405360 <_vfiprintf_r+0x704>
  405816:	9a07      	ldr	r2, [sp, #28]
  405818:	9903      	ldr	r1, [sp, #12]
  40581a:	6813      	ldr	r3, [r2, #0]
  40581c:	17cd      	asrs	r5, r1, #31
  40581e:	4608      	mov	r0, r1
  405820:	3204      	adds	r2, #4
  405822:	4629      	mov	r1, r5
  405824:	9207      	str	r2, [sp, #28]
  405826:	e9c3 0100 	strd	r0, r1, [r3]
  40582a:	f7ff ba54 	b.w	404cd6 <_vfiprintf_r+0x7a>
  40582e:	4658      	mov	r0, fp
  405830:	9607      	str	r6, [sp, #28]
  405832:	9302      	str	r3, [sp, #8]
  405834:	f7ff f964 	bl	404b00 <strlen>
  405838:	2400      	movs	r4, #0
  40583a:	9005      	str	r0, [sp, #20]
  40583c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405840:	f7ff bb5e 	b.w	404f00 <_vfiprintf_r+0x2a4>
  405844:	aa0f      	add	r2, sp, #60	; 0x3c
  405846:	9904      	ldr	r1, [sp, #16]
  405848:	9806      	ldr	r0, [sp, #24]
  40584a:	f7ff f9c7 	bl	404bdc <__sprint_r.part.0>
  40584e:	2800      	cmp	r0, #0
  405850:	f47f aeb6 	bne.w	4055c0 <_vfiprintf_r+0x964>
  405854:	9910      	ldr	r1, [sp, #64]	; 0x40
  405856:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405858:	1c48      	adds	r0, r1, #1
  40585a:	46ca      	mov	sl, r9
  40585c:	e5a7      	b.n	4053ae <_vfiprintf_r+0x752>
  40585e:	9910      	ldr	r1, [sp, #64]	; 0x40
  405860:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405862:	4e20      	ldr	r6, [pc, #128]	; (4058e4 <_vfiprintf_r+0xc88>)
  405864:	3101      	adds	r1, #1
  405866:	f7ff bb90 	b.w	404f8a <_vfiprintf_r+0x32e>
  40586a:	2c06      	cmp	r4, #6
  40586c:	bf28      	it	cs
  40586e:	2406      	movcs	r4, #6
  405870:	9405      	str	r4, [sp, #20]
  405872:	9607      	str	r6, [sp, #28]
  405874:	9401      	str	r4, [sp, #4]
  405876:	f8df b070 	ldr.w	fp, [pc, #112]	; 4058e8 <_vfiprintf_r+0xc8c>
  40587a:	e4d5      	b.n	405228 <_vfiprintf_r+0x5cc>
  40587c:	9810      	ldr	r0, [sp, #64]	; 0x40
  40587e:	4e19      	ldr	r6, [pc, #100]	; (4058e4 <_vfiprintf_r+0xc88>)
  405880:	3001      	adds	r0, #1
  405882:	e603      	b.n	40548c <_vfiprintf_r+0x830>
  405884:	9405      	str	r4, [sp, #20]
  405886:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40588a:	9607      	str	r6, [sp, #28]
  40588c:	9302      	str	r3, [sp, #8]
  40588e:	4604      	mov	r4, r0
  405890:	f7ff bb36 	b.w	404f00 <_vfiprintf_r+0x2a4>
  405894:	4686      	mov	lr, r0
  405896:	f7ff bbce 	b.w	405036 <_vfiprintf_r+0x3da>
  40589a:	9806      	ldr	r0, [sp, #24]
  40589c:	aa0f      	add	r2, sp, #60	; 0x3c
  40589e:	4659      	mov	r1, fp
  4058a0:	f7ff f99c 	bl	404bdc <__sprint_r.part.0>
  4058a4:	2800      	cmp	r0, #0
  4058a6:	f43f ae24 	beq.w	4054f2 <_vfiprintf_r+0x896>
  4058aa:	e624      	b.n	4054f6 <_vfiprintf_r+0x89a>
  4058ac:	9907      	ldr	r1, [sp, #28]
  4058ae:	f898 2001 	ldrb.w	r2, [r8, #1]
  4058b2:	680c      	ldr	r4, [r1, #0]
  4058b4:	3104      	adds	r1, #4
  4058b6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4058ba:	46b8      	mov	r8, r7
  4058bc:	9107      	str	r1, [sp, #28]
  4058be:	f7ff ba3f 	b.w	404d40 <_vfiprintf_r+0xe4>
  4058c2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4058c6:	e43c      	b.n	405142 <_vfiprintf_r+0x4e6>
  4058c8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4058cc:	e521      	b.n	405312 <_vfiprintf_r+0x6b6>
  4058ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4058d2:	f7ff bbf4 	b.w	4050be <_vfiprintf_r+0x462>
  4058d6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4058da:	e491      	b.n	405200 <_vfiprintf_r+0x5a4>
  4058dc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4058e0:	e469      	b.n	4051b6 <_vfiprintf_r+0x55a>
  4058e2:	bf00      	nop
  4058e4:	004123d0 	.word	0x004123d0
  4058e8:	004123c8 	.word	0x004123c8

004058ec <__sbprintf>:
  4058ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4058f0:	460c      	mov	r4, r1
  4058f2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4058f6:	8989      	ldrh	r1, [r1, #12]
  4058f8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4058fa:	89e5      	ldrh	r5, [r4, #14]
  4058fc:	9619      	str	r6, [sp, #100]	; 0x64
  4058fe:	f021 0102 	bic.w	r1, r1, #2
  405902:	4606      	mov	r6, r0
  405904:	69e0      	ldr	r0, [r4, #28]
  405906:	f8ad 100c 	strh.w	r1, [sp, #12]
  40590a:	4617      	mov	r7, r2
  40590c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405910:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405912:	f8ad 500e 	strh.w	r5, [sp, #14]
  405916:	4698      	mov	r8, r3
  405918:	ad1a      	add	r5, sp, #104	; 0x68
  40591a:	2300      	movs	r3, #0
  40591c:	9007      	str	r0, [sp, #28]
  40591e:	a816      	add	r0, sp, #88	; 0x58
  405920:	9209      	str	r2, [sp, #36]	; 0x24
  405922:	9306      	str	r3, [sp, #24]
  405924:	9500      	str	r5, [sp, #0]
  405926:	9504      	str	r5, [sp, #16]
  405928:	9102      	str	r1, [sp, #8]
  40592a:	9105      	str	r1, [sp, #20]
  40592c:	f000 fd48 	bl	4063c0 <__retarget_lock_init_recursive>
  405930:	4643      	mov	r3, r8
  405932:	463a      	mov	r2, r7
  405934:	4669      	mov	r1, sp
  405936:	4630      	mov	r0, r6
  405938:	f7ff f990 	bl	404c5c <_vfiprintf_r>
  40593c:	1e05      	subs	r5, r0, #0
  40593e:	db07      	blt.n	405950 <__sbprintf+0x64>
  405940:	4630      	mov	r0, r6
  405942:	4669      	mov	r1, sp
  405944:	f000 f928 	bl	405b98 <_fflush_r>
  405948:	2800      	cmp	r0, #0
  40594a:	bf18      	it	ne
  40594c:	f04f 35ff 	movne.w	r5, #4294967295
  405950:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405954:	065b      	lsls	r3, r3, #25
  405956:	d503      	bpl.n	405960 <__sbprintf+0x74>
  405958:	89a3      	ldrh	r3, [r4, #12]
  40595a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40595e:	81a3      	strh	r3, [r4, #12]
  405960:	9816      	ldr	r0, [sp, #88]	; 0x58
  405962:	f000 fd2f 	bl	4063c4 <__retarget_lock_close_recursive>
  405966:	4628      	mov	r0, r5
  405968:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40596c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405970 <__swsetup_r>:
  405970:	b538      	push	{r3, r4, r5, lr}
  405972:	4b30      	ldr	r3, [pc, #192]	; (405a34 <__swsetup_r+0xc4>)
  405974:	681b      	ldr	r3, [r3, #0]
  405976:	4605      	mov	r5, r0
  405978:	460c      	mov	r4, r1
  40597a:	b113      	cbz	r3, 405982 <__swsetup_r+0x12>
  40597c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40597e:	2a00      	cmp	r2, #0
  405980:	d038      	beq.n	4059f4 <__swsetup_r+0x84>
  405982:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405986:	b293      	uxth	r3, r2
  405988:	0718      	lsls	r0, r3, #28
  40598a:	d50c      	bpl.n	4059a6 <__swsetup_r+0x36>
  40598c:	6920      	ldr	r0, [r4, #16]
  40598e:	b1a8      	cbz	r0, 4059bc <__swsetup_r+0x4c>
  405990:	f013 0201 	ands.w	r2, r3, #1
  405994:	d01e      	beq.n	4059d4 <__swsetup_r+0x64>
  405996:	6963      	ldr	r3, [r4, #20]
  405998:	2200      	movs	r2, #0
  40599a:	425b      	negs	r3, r3
  40599c:	61a3      	str	r3, [r4, #24]
  40599e:	60a2      	str	r2, [r4, #8]
  4059a0:	b1f0      	cbz	r0, 4059e0 <__swsetup_r+0x70>
  4059a2:	2000      	movs	r0, #0
  4059a4:	bd38      	pop	{r3, r4, r5, pc}
  4059a6:	06d9      	lsls	r1, r3, #27
  4059a8:	d53c      	bpl.n	405a24 <__swsetup_r+0xb4>
  4059aa:	0758      	lsls	r0, r3, #29
  4059ac:	d426      	bmi.n	4059fc <__swsetup_r+0x8c>
  4059ae:	6920      	ldr	r0, [r4, #16]
  4059b0:	f042 0308 	orr.w	r3, r2, #8
  4059b4:	81a3      	strh	r3, [r4, #12]
  4059b6:	b29b      	uxth	r3, r3
  4059b8:	2800      	cmp	r0, #0
  4059ba:	d1e9      	bne.n	405990 <__swsetup_r+0x20>
  4059bc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4059c0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4059c4:	d0e4      	beq.n	405990 <__swsetup_r+0x20>
  4059c6:	4628      	mov	r0, r5
  4059c8:	4621      	mov	r1, r4
  4059ca:	f000 fd2f 	bl	40642c <__smakebuf_r>
  4059ce:	89a3      	ldrh	r3, [r4, #12]
  4059d0:	6920      	ldr	r0, [r4, #16]
  4059d2:	e7dd      	b.n	405990 <__swsetup_r+0x20>
  4059d4:	0799      	lsls	r1, r3, #30
  4059d6:	bf58      	it	pl
  4059d8:	6962      	ldrpl	r2, [r4, #20]
  4059da:	60a2      	str	r2, [r4, #8]
  4059dc:	2800      	cmp	r0, #0
  4059de:	d1e0      	bne.n	4059a2 <__swsetup_r+0x32>
  4059e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4059e4:	061a      	lsls	r2, r3, #24
  4059e6:	d5dd      	bpl.n	4059a4 <__swsetup_r+0x34>
  4059e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4059ec:	81a3      	strh	r3, [r4, #12]
  4059ee:	f04f 30ff 	mov.w	r0, #4294967295
  4059f2:	bd38      	pop	{r3, r4, r5, pc}
  4059f4:	4618      	mov	r0, r3
  4059f6:	f000 f927 	bl	405c48 <__sinit>
  4059fa:	e7c2      	b.n	405982 <__swsetup_r+0x12>
  4059fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4059fe:	b151      	cbz	r1, 405a16 <__swsetup_r+0xa6>
  405a00:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405a04:	4299      	cmp	r1, r3
  405a06:	d004      	beq.n	405a12 <__swsetup_r+0xa2>
  405a08:	4628      	mov	r0, r5
  405a0a:	f000 fa43 	bl	405e94 <_free_r>
  405a0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405a12:	2300      	movs	r3, #0
  405a14:	6323      	str	r3, [r4, #48]	; 0x30
  405a16:	2300      	movs	r3, #0
  405a18:	6920      	ldr	r0, [r4, #16]
  405a1a:	6063      	str	r3, [r4, #4]
  405a1c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405a20:	6020      	str	r0, [r4, #0]
  405a22:	e7c5      	b.n	4059b0 <__swsetup_r+0x40>
  405a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405a28:	2309      	movs	r3, #9
  405a2a:	602b      	str	r3, [r5, #0]
  405a2c:	f04f 30ff 	mov.w	r0, #4294967295
  405a30:	81a2      	strh	r2, [r4, #12]
  405a32:	bd38      	pop	{r3, r4, r5, pc}
  405a34:	20400014 	.word	0x20400014

00405a38 <register_fini>:
  405a38:	4b02      	ldr	r3, [pc, #8]	; (405a44 <register_fini+0xc>)
  405a3a:	b113      	cbz	r3, 405a42 <register_fini+0xa>
  405a3c:	4802      	ldr	r0, [pc, #8]	; (405a48 <register_fini+0x10>)
  405a3e:	f000 b805 	b.w	405a4c <atexit>
  405a42:	4770      	bx	lr
  405a44:	00000000 	.word	0x00000000
  405a48:	00405cb9 	.word	0x00405cb9

00405a4c <atexit>:
  405a4c:	2300      	movs	r3, #0
  405a4e:	4601      	mov	r1, r0
  405a50:	461a      	mov	r2, r3
  405a52:	4618      	mov	r0, r3
  405a54:	f001 b890 	b.w	406b78 <__register_exitproc>

00405a58 <__sflush_r>:
  405a58:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  405a5c:	b29a      	uxth	r2, r3
  405a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405a62:	460d      	mov	r5, r1
  405a64:	0711      	lsls	r1, r2, #28
  405a66:	4680      	mov	r8, r0
  405a68:	d43a      	bmi.n	405ae0 <__sflush_r+0x88>
  405a6a:	686a      	ldr	r2, [r5, #4]
  405a6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  405a70:	2a00      	cmp	r2, #0
  405a72:	81ab      	strh	r3, [r5, #12]
  405a74:	dd6f      	ble.n	405b56 <__sflush_r+0xfe>
  405a76:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405a78:	2c00      	cmp	r4, #0
  405a7a:	d049      	beq.n	405b10 <__sflush_r+0xb8>
  405a7c:	2200      	movs	r2, #0
  405a7e:	b29b      	uxth	r3, r3
  405a80:	f8d8 6000 	ldr.w	r6, [r8]
  405a84:	f8c8 2000 	str.w	r2, [r8]
  405a88:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  405a8c:	d067      	beq.n	405b5e <__sflush_r+0x106>
  405a8e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405a90:	075f      	lsls	r7, r3, #29
  405a92:	d505      	bpl.n	405aa0 <__sflush_r+0x48>
  405a94:	6869      	ldr	r1, [r5, #4]
  405a96:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  405a98:	1a52      	subs	r2, r2, r1
  405a9a:	b10b      	cbz	r3, 405aa0 <__sflush_r+0x48>
  405a9c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  405a9e:	1ad2      	subs	r2, r2, r3
  405aa0:	2300      	movs	r3, #0
  405aa2:	69e9      	ldr	r1, [r5, #28]
  405aa4:	4640      	mov	r0, r8
  405aa6:	47a0      	blx	r4
  405aa8:	1c44      	adds	r4, r0, #1
  405aaa:	d03c      	beq.n	405b26 <__sflush_r+0xce>
  405aac:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  405ab0:	692a      	ldr	r2, [r5, #16]
  405ab2:	602a      	str	r2, [r5, #0]
  405ab4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405ab8:	2200      	movs	r2, #0
  405aba:	81ab      	strh	r3, [r5, #12]
  405abc:	04db      	lsls	r3, r3, #19
  405abe:	606a      	str	r2, [r5, #4]
  405ac0:	d447      	bmi.n	405b52 <__sflush_r+0xfa>
  405ac2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405ac4:	f8c8 6000 	str.w	r6, [r8]
  405ac8:	b311      	cbz	r1, 405b10 <__sflush_r+0xb8>
  405aca:	f105 0340 	add.w	r3, r5, #64	; 0x40
  405ace:	4299      	cmp	r1, r3
  405ad0:	d002      	beq.n	405ad8 <__sflush_r+0x80>
  405ad2:	4640      	mov	r0, r8
  405ad4:	f000 f9de 	bl	405e94 <_free_r>
  405ad8:	2000      	movs	r0, #0
  405ada:	6328      	str	r0, [r5, #48]	; 0x30
  405adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405ae0:	692e      	ldr	r6, [r5, #16]
  405ae2:	b1ae      	cbz	r6, 405b10 <__sflush_r+0xb8>
  405ae4:	682c      	ldr	r4, [r5, #0]
  405ae6:	602e      	str	r6, [r5, #0]
  405ae8:	0791      	lsls	r1, r2, #30
  405aea:	bf0c      	ite	eq
  405aec:	696b      	ldreq	r3, [r5, #20]
  405aee:	2300      	movne	r3, #0
  405af0:	1ba4      	subs	r4, r4, r6
  405af2:	60ab      	str	r3, [r5, #8]
  405af4:	e00a      	b.n	405b0c <__sflush_r+0xb4>
  405af6:	4623      	mov	r3, r4
  405af8:	4632      	mov	r2, r6
  405afa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  405afc:	69e9      	ldr	r1, [r5, #28]
  405afe:	4640      	mov	r0, r8
  405b00:	47b8      	blx	r7
  405b02:	2800      	cmp	r0, #0
  405b04:	eba4 0400 	sub.w	r4, r4, r0
  405b08:	4406      	add	r6, r0
  405b0a:	dd04      	ble.n	405b16 <__sflush_r+0xbe>
  405b0c:	2c00      	cmp	r4, #0
  405b0e:	dcf2      	bgt.n	405af6 <__sflush_r+0x9e>
  405b10:	2000      	movs	r0, #0
  405b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b16:	89ab      	ldrh	r3, [r5, #12]
  405b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405b1c:	81ab      	strh	r3, [r5, #12]
  405b1e:	f04f 30ff 	mov.w	r0, #4294967295
  405b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b26:	f8d8 4000 	ldr.w	r4, [r8]
  405b2a:	2c1d      	cmp	r4, #29
  405b2c:	d8f3      	bhi.n	405b16 <__sflush_r+0xbe>
  405b2e:	4b19      	ldr	r3, [pc, #100]	; (405b94 <__sflush_r+0x13c>)
  405b30:	40e3      	lsrs	r3, r4
  405b32:	43db      	mvns	r3, r3
  405b34:	f013 0301 	ands.w	r3, r3, #1
  405b38:	d1ed      	bne.n	405b16 <__sflush_r+0xbe>
  405b3a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  405b3e:	606b      	str	r3, [r5, #4]
  405b40:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  405b44:	6929      	ldr	r1, [r5, #16]
  405b46:	81ab      	strh	r3, [r5, #12]
  405b48:	04da      	lsls	r2, r3, #19
  405b4a:	6029      	str	r1, [r5, #0]
  405b4c:	d5b9      	bpl.n	405ac2 <__sflush_r+0x6a>
  405b4e:	2c00      	cmp	r4, #0
  405b50:	d1b7      	bne.n	405ac2 <__sflush_r+0x6a>
  405b52:	6528      	str	r0, [r5, #80]	; 0x50
  405b54:	e7b5      	b.n	405ac2 <__sflush_r+0x6a>
  405b56:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  405b58:	2a00      	cmp	r2, #0
  405b5a:	dc8c      	bgt.n	405a76 <__sflush_r+0x1e>
  405b5c:	e7d8      	b.n	405b10 <__sflush_r+0xb8>
  405b5e:	2301      	movs	r3, #1
  405b60:	69e9      	ldr	r1, [r5, #28]
  405b62:	4640      	mov	r0, r8
  405b64:	47a0      	blx	r4
  405b66:	1c43      	adds	r3, r0, #1
  405b68:	4602      	mov	r2, r0
  405b6a:	d002      	beq.n	405b72 <__sflush_r+0x11a>
  405b6c:	89ab      	ldrh	r3, [r5, #12]
  405b6e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405b70:	e78e      	b.n	405a90 <__sflush_r+0x38>
  405b72:	f8d8 3000 	ldr.w	r3, [r8]
  405b76:	2b00      	cmp	r3, #0
  405b78:	d0f8      	beq.n	405b6c <__sflush_r+0x114>
  405b7a:	2b1d      	cmp	r3, #29
  405b7c:	d001      	beq.n	405b82 <__sflush_r+0x12a>
  405b7e:	2b16      	cmp	r3, #22
  405b80:	d102      	bne.n	405b88 <__sflush_r+0x130>
  405b82:	f8c8 6000 	str.w	r6, [r8]
  405b86:	e7c3      	b.n	405b10 <__sflush_r+0xb8>
  405b88:	89ab      	ldrh	r3, [r5, #12]
  405b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405b8e:	81ab      	strh	r3, [r5, #12]
  405b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b94:	20400001 	.word	0x20400001

00405b98 <_fflush_r>:
  405b98:	b538      	push	{r3, r4, r5, lr}
  405b9a:	460d      	mov	r5, r1
  405b9c:	4604      	mov	r4, r0
  405b9e:	b108      	cbz	r0, 405ba4 <_fflush_r+0xc>
  405ba0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405ba2:	b1bb      	cbz	r3, 405bd4 <_fflush_r+0x3c>
  405ba4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  405ba8:	b188      	cbz	r0, 405bce <_fflush_r+0x36>
  405baa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  405bac:	07db      	lsls	r3, r3, #31
  405bae:	d401      	bmi.n	405bb4 <_fflush_r+0x1c>
  405bb0:	0581      	lsls	r1, r0, #22
  405bb2:	d517      	bpl.n	405be4 <_fflush_r+0x4c>
  405bb4:	4620      	mov	r0, r4
  405bb6:	4629      	mov	r1, r5
  405bb8:	f7ff ff4e 	bl	405a58 <__sflush_r>
  405bbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  405bbe:	07da      	lsls	r2, r3, #31
  405bc0:	4604      	mov	r4, r0
  405bc2:	d402      	bmi.n	405bca <_fflush_r+0x32>
  405bc4:	89ab      	ldrh	r3, [r5, #12]
  405bc6:	059b      	lsls	r3, r3, #22
  405bc8:	d507      	bpl.n	405bda <_fflush_r+0x42>
  405bca:	4620      	mov	r0, r4
  405bcc:	bd38      	pop	{r3, r4, r5, pc}
  405bce:	4604      	mov	r4, r0
  405bd0:	4620      	mov	r0, r4
  405bd2:	bd38      	pop	{r3, r4, r5, pc}
  405bd4:	f000 f838 	bl	405c48 <__sinit>
  405bd8:	e7e4      	b.n	405ba4 <_fflush_r+0xc>
  405bda:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405bdc:	f000 fbf6 	bl	4063cc <__retarget_lock_release_recursive>
  405be0:	4620      	mov	r0, r4
  405be2:	bd38      	pop	{r3, r4, r5, pc}
  405be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405be6:	f000 fbef 	bl	4063c8 <__retarget_lock_acquire_recursive>
  405bea:	e7e3      	b.n	405bb4 <_fflush_r+0x1c>

00405bec <_cleanup_r>:
  405bec:	4901      	ldr	r1, [pc, #4]	; (405bf4 <_cleanup_r+0x8>)
  405bee:	f000 bbaf 	b.w	406350 <_fwalk_reent>
  405bf2:	bf00      	nop
  405bf4:	00406c61 	.word	0x00406c61

00405bf8 <std.isra.0>:
  405bf8:	b510      	push	{r4, lr}
  405bfa:	2300      	movs	r3, #0
  405bfc:	4604      	mov	r4, r0
  405bfe:	8181      	strh	r1, [r0, #12]
  405c00:	81c2      	strh	r2, [r0, #14]
  405c02:	6003      	str	r3, [r0, #0]
  405c04:	6043      	str	r3, [r0, #4]
  405c06:	6083      	str	r3, [r0, #8]
  405c08:	6643      	str	r3, [r0, #100]	; 0x64
  405c0a:	6103      	str	r3, [r0, #16]
  405c0c:	6143      	str	r3, [r0, #20]
  405c0e:	6183      	str	r3, [r0, #24]
  405c10:	4619      	mov	r1, r3
  405c12:	2208      	movs	r2, #8
  405c14:	305c      	adds	r0, #92	; 0x5c
  405c16:	f7fe fe1b 	bl	404850 <memset>
  405c1a:	4807      	ldr	r0, [pc, #28]	; (405c38 <std.isra.0+0x40>)
  405c1c:	4907      	ldr	r1, [pc, #28]	; (405c3c <std.isra.0+0x44>)
  405c1e:	4a08      	ldr	r2, [pc, #32]	; (405c40 <std.isra.0+0x48>)
  405c20:	4b08      	ldr	r3, [pc, #32]	; (405c44 <std.isra.0+0x4c>)
  405c22:	6220      	str	r0, [r4, #32]
  405c24:	61e4      	str	r4, [r4, #28]
  405c26:	6261      	str	r1, [r4, #36]	; 0x24
  405c28:	62a2      	str	r2, [r4, #40]	; 0x28
  405c2a:	62e3      	str	r3, [r4, #44]	; 0x2c
  405c2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  405c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405c34:	f000 bbc4 	b.w	4063c0 <__retarget_lock_init_recursive>
  405c38:	004069a5 	.word	0x004069a5
  405c3c:	004069c9 	.word	0x004069c9
  405c40:	00406a05 	.word	0x00406a05
  405c44:	00406a25 	.word	0x00406a25

00405c48 <__sinit>:
  405c48:	b510      	push	{r4, lr}
  405c4a:	4604      	mov	r4, r0
  405c4c:	4812      	ldr	r0, [pc, #72]	; (405c98 <__sinit+0x50>)
  405c4e:	f000 fbbb 	bl	4063c8 <__retarget_lock_acquire_recursive>
  405c52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  405c54:	b9d2      	cbnz	r2, 405c8c <__sinit+0x44>
  405c56:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  405c5a:	4810      	ldr	r0, [pc, #64]	; (405c9c <__sinit+0x54>)
  405c5c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  405c60:	2103      	movs	r1, #3
  405c62:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  405c66:	63e0      	str	r0, [r4, #60]	; 0x3c
  405c68:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  405c6c:	6860      	ldr	r0, [r4, #4]
  405c6e:	2104      	movs	r1, #4
  405c70:	f7ff ffc2 	bl	405bf8 <std.isra.0>
  405c74:	2201      	movs	r2, #1
  405c76:	2109      	movs	r1, #9
  405c78:	68a0      	ldr	r0, [r4, #8]
  405c7a:	f7ff ffbd 	bl	405bf8 <std.isra.0>
  405c7e:	2202      	movs	r2, #2
  405c80:	2112      	movs	r1, #18
  405c82:	68e0      	ldr	r0, [r4, #12]
  405c84:	f7ff ffb8 	bl	405bf8 <std.isra.0>
  405c88:	2301      	movs	r3, #1
  405c8a:	63a3      	str	r3, [r4, #56]	; 0x38
  405c8c:	4802      	ldr	r0, [pc, #8]	; (405c98 <__sinit+0x50>)
  405c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405c92:	f000 bb9b 	b.w	4063cc <__retarget_lock_release_recursive>
  405c96:	bf00      	nop
  405c98:	2040c82c 	.word	0x2040c82c
  405c9c:	00405bed 	.word	0x00405bed

00405ca0 <__sfp_lock_acquire>:
  405ca0:	4801      	ldr	r0, [pc, #4]	; (405ca8 <__sfp_lock_acquire+0x8>)
  405ca2:	f000 bb91 	b.w	4063c8 <__retarget_lock_acquire_recursive>
  405ca6:	bf00      	nop
  405ca8:	2040c840 	.word	0x2040c840

00405cac <__sfp_lock_release>:
  405cac:	4801      	ldr	r0, [pc, #4]	; (405cb4 <__sfp_lock_release+0x8>)
  405cae:	f000 bb8d 	b.w	4063cc <__retarget_lock_release_recursive>
  405cb2:	bf00      	nop
  405cb4:	2040c840 	.word	0x2040c840

00405cb8 <__libc_fini_array>:
  405cb8:	b538      	push	{r3, r4, r5, lr}
  405cba:	4c0a      	ldr	r4, [pc, #40]	; (405ce4 <__libc_fini_array+0x2c>)
  405cbc:	4d0a      	ldr	r5, [pc, #40]	; (405ce8 <__libc_fini_array+0x30>)
  405cbe:	1b64      	subs	r4, r4, r5
  405cc0:	10a4      	asrs	r4, r4, #2
  405cc2:	d00a      	beq.n	405cda <__libc_fini_array+0x22>
  405cc4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405cc8:	3b01      	subs	r3, #1
  405cca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  405cce:	3c01      	subs	r4, #1
  405cd0:	f855 3904 	ldr.w	r3, [r5], #-4
  405cd4:	4798      	blx	r3
  405cd6:	2c00      	cmp	r4, #0
  405cd8:	d1f9      	bne.n	405cce <__libc_fini_array+0x16>
  405cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405cde:	f00c bc1b 	b.w	412518 <_fini>
  405ce2:	bf00      	nop
  405ce4:	00412528 	.word	0x00412528
  405ce8:	00412524 	.word	0x00412524

00405cec <__fputwc>:
  405cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405cf0:	b082      	sub	sp, #8
  405cf2:	4680      	mov	r8, r0
  405cf4:	4689      	mov	r9, r1
  405cf6:	4614      	mov	r4, r2
  405cf8:	f000 fb54 	bl	4063a4 <__locale_mb_cur_max>
  405cfc:	2801      	cmp	r0, #1
  405cfe:	d036      	beq.n	405d6e <__fputwc+0x82>
  405d00:	464a      	mov	r2, r9
  405d02:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405d06:	a901      	add	r1, sp, #4
  405d08:	4640      	mov	r0, r8
  405d0a:	f000 fee7 	bl	406adc <_wcrtomb_r>
  405d0e:	1c42      	adds	r2, r0, #1
  405d10:	4606      	mov	r6, r0
  405d12:	d025      	beq.n	405d60 <__fputwc+0x74>
  405d14:	b3a8      	cbz	r0, 405d82 <__fputwc+0x96>
  405d16:	f89d e004 	ldrb.w	lr, [sp, #4]
  405d1a:	2500      	movs	r5, #0
  405d1c:	f10d 0a04 	add.w	sl, sp, #4
  405d20:	e009      	b.n	405d36 <__fputwc+0x4a>
  405d22:	6823      	ldr	r3, [r4, #0]
  405d24:	1c5a      	adds	r2, r3, #1
  405d26:	6022      	str	r2, [r4, #0]
  405d28:	f883 e000 	strb.w	lr, [r3]
  405d2c:	3501      	adds	r5, #1
  405d2e:	42b5      	cmp	r5, r6
  405d30:	d227      	bcs.n	405d82 <__fputwc+0x96>
  405d32:	f815 e00a 	ldrb.w	lr, [r5, sl]
  405d36:	68a3      	ldr	r3, [r4, #8]
  405d38:	3b01      	subs	r3, #1
  405d3a:	2b00      	cmp	r3, #0
  405d3c:	60a3      	str	r3, [r4, #8]
  405d3e:	daf0      	bge.n	405d22 <__fputwc+0x36>
  405d40:	69a7      	ldr	r7, [r4, #24]
  405d42:	42bb      	cmp	r3, r7
  405d44:	4671      	mov	r1, lr
  405d46:	4622      	mov	r2, r4
  405d48:	4640      	mov	r0, r8
  405d4a:	db02      	blt.n	405d52 <__fputwc+0x66>
  405d4c:	f1be 0f0a 	cmp.w	lr, #10
  405d50:	d1e7      	bne.n	405d22 <__fputwc+0x36>
  405d52:	f000 fe6b 	bl	406a2c <__swbuf_r>
  405d56:	1c43      	adds	r3, r0, #1
  405d58:	d1e8      	bne.n	405d2c <__fputwc+0x40>
  405d5a:	b002      	add	sp, #8
  405d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405d60:	89a3      	ldrh	r3, [r4, #12]
  405d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405d66:	81a3      	strh	r3, [r4, #12]
  405d68:	b002      	add	sp, #8
  405d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405d6e:	f109 33ff 	add.w	r3, r9, #4294967295
  405d72:	2bfe      	cmp	r3, #254	; 0xfe
  405d74:	d8c4      	bhi.n	405d00 <__fputwc+0x14>
  405d76:	fa5f fe89 	uxtb.w	lr, r9
  405d7a:	4606      	mov	r6, r0
  405d7c:	f88d e004 	strb.w	lr, [sp, #4]
  405d80:	e7cb      	b.n	405d1a <__fputwc+0x2e>
  405d82:	4648      	mov	r0, r9
  405d84:	b002      	add	sp, #8
  405d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405d8a:	bf00      	nop

00405d8c <_fputwc_r>:
  405d8c:	b530      	push	{r4, r5, lr}
  405d8e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  405d90:	f013 0f01 	tst.w	r3, #1
  405d94:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  405d98:	4614      	mov	r4, r2
  405d9a:	b083      	sub	sp, #12
  405d9c:	4605      	mov	r5, r0
  405d9e:	b29a      	uxth	r2, r3
  405da0:	d101      	bne.n	405da6 <_fputwc_r+0x1a>
  405da2:	0590      	lsls	r0, r2, #22
  405da4:	d51c      	bpl.n	405de0 <_fputwc_r+0x54>
  405da6:	0490      	lsls	r0, r2, #18
  405da8:	d406      	bmi.n	405db8 <_fputwc_r+0x2c>
  405daa:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405dac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405db0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405db4:	81a3      	strh	r3, [r4, #12]
  405db6:	6662      	str	r2, [r4, #100]	; 0x64
  405db8:	4628      	mov	r0, r5
  405dba:	4622      	mov	r2, r4
  405dbc:	f7ff ff96 	bl	405cec <__fputwc>
  405dc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405dc2:	07da      	lsls	r2, r3, #31
  405dc4:	4605      	mov	r5, r0
  405dc6:	d402      	bmi.n	405dce <_fputwc_r+0x42>
  405dc8:	89a3      	ldrh	r3, [r4, #12]
  405dca:	059b      	lsls	r3, r3, #22
  405dcc:	d502      	bpl.n	405dd4 <_fputwc_r+0x48>
  405dce:	4628      	mov	r0, r5
  405dd0:	b003      	add	sp, #12
  405dd2:	bd30      	pop	{r4, r5, pc}
  405dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405dd6:	f000 faf9 	bl	4063cc <__retarget_lock_release_recursive>
  405dda:	4628      	mov	r0, r5
  405ddc:	b003      	add	sp, #12
  405dde:	bd30      	pop	{r4, r5, pc}
  405de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405de2:	9101      	str	r1, [sp, #4]
  405de4:	f000 faf0 	bl	4063c8 <__retarget_lock_acquire_recursive>
  405de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405dec:	9901      	ldr	r1, [sp, #4]
  405dee:	b29a      	uxth	r2, r3
  405df0:	e7d9      	b.n	405da6 <_fputwc_r+0x1a>
  405df2:	bf00      	nop

00405df4 <_malloc_trim_r>:
  405df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405df6:	4f24      	ldr	r7, [pc, #144]	; (405e88 <_malloc_trim_r+0x94>)
  405df8:	460c      	mov	r4, r1
  405dfa:	4606      	mov	r6, r0
  405dfc:	f7fe fd76 	bl	4048ec <__malloc_lock>
  405e00:	68bb      	ldr	r3, [r7, #8]
  405e02:	685d      	ldr	r5, [r3, #4]
  405e04:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405e08:	310f      	adds	r1, #15
  405e0a:	f025 0503 	bic.w	r5, r5, #3
  405e0e:	4429      	add	r1, r5
  405e10:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405e14:	f021 010f 	bic.w	r1, r1, #15
  405e18:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405e1c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405e20:	db07      	blt.n	405e32 <_malloc_trim_r+0x3e>
  405e22:	2100      	movs	r1, #0
  405e24:	4630      	mov	r0, r6
  405e26:	f7fe fd6d 	bl	404904 <_sbrk_r>
  405e2a:	68bb      	ldr	r3, [r7, #8]
  405e2c:	442b      	add	r3, r5
  405e2e:	4298      	cmp	r0, r3
  405e30:	d004      	beq.n	405e3c <_malloc_trim_r+0x48>
  405e32:	4630      	mov	r0, r6
  405e34:	f7fe fd60 	bl	4048f8 <__malloc_unlock>
  405e38:	2000      	movs	r0, #0
  405e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405e3c:	4261      	negs	r1, r4
  405e3e:	4630      	mov	r0, r6
  405e40:	f7fe fd60 	bl	404904 <_sbrk_r>
  405e44:	3001      	adds	r0, #1
  405e46:	d00d      	beq.n	405e64 <_malloc_trim_r+0x70>
  405e48:	4b10      	ldr	r3, [pc, #64]	; (405e8c <_malloc_trim_r+0x98>)
  405e4a:	68ba      	ldr	r2, [r7, #8]
  405e4c:	6819      	ldr	r1, [r3, #0]
  405e4e:	1b2d      	subs	r5, r5, r4
  405e50:	f045 0501 	orr.w	r5, r5, #1
  405e54:	4630      	mov	r0, r6
  405e56:	1b09      	subs	r1, r1, r4
  405e58:	6055      	str	r5, [r2, #4]
  405e5a:	6019      	str	r1, [r3, #0]
  405e5c:	f7fe fd4c 	bl	4048f8 <__malloc_unlock>
  405e60:	2001      	movs	r0, #1
  405e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405e64:	2100      	movs	r1, #0
  405e66:	4630      	mov	r0, r6
  405e68:	f7fe fd4c 	bl	404904 <_sbrk_r>
  405e6c:	68ba      	ldr	r2, [r7, #8]
  405e6e:	1a83      	subs	r3, r0, r2
  405e70:	2b0f      	cmp	r3, #15
  405e72:	ddde      	ble.n	405e32 <_malloc_trim_r+0x3e>
  405e74:	4c06      	ldr	r4, [pc, #24]	; (405e90 <_malloc_trim_r+0x9c>)
  405e76:	4905      	ldr	r1, [pc, #20]	; (405e8c <_malloc_trim_r+0x98>)
  405e78:	6824      	ldr	r4, [r4, #0]
  405e7a:	f043 0301 	orr.w	r3, r3, #1
  405e7e:	1b00      	subs	r0, r0, r4
  405e80:	6053      	str	r3, [r2, #4]
  405e82:	6008      	str	r0, [r1, #0]
  405e84:	e7d5      	b.n	405e32 <_malloc_trim_r+0x3e>
  405e86:	bf00      	nop
  405e88:	20400440 	.word	0x20400440
  405e8c:	2040c75c 	.word	0x2040c75c
  405e90:	20400848 	.word	0x20400848

00405e94 <_free_r>:
  405e94:	2900      	cmp	r1, #0
  405e96:	d044      	beq.n	405f22 <_free_r+0x8e>
  405e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405e9c:	460d      	mov	r5, r1
  405e9e:	4680      	mov	r8, r0
  405ea0:	f7fe fd24 	bl	4048ec <__malloc_lock>
  405ea4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405ea8:	4969      	ldr	r1, [pc, #420]	; (406050 <_free_r+0x1bc>)
  405eaa:	f027 0301 	bic.w	r3, r7, #1
  405eae:	f1a5 0408 	sub.w	r4, r5, #8
  405eb2:	18e2      	adds	r2, r4, r3
  405eb4:	688e      	ldr	r6, [r1, #8]
  405eb6:	6850      	ldr	r0, [r2, #4]
  405eb8:	42b2      	cmp	r2, r6
  405eba:	f020 0003 	bic.w	r0, r0, #3
  405ebe:	d05e      	beq.n	405f7e <_free_r+0xea>
  405ec0:	07fe      	lsls	r6, r7, #31
  405ec2:	6050      	str	r0, [r2, #4]
  405ec4:	d40b      	bmi.n	405ede <_free_r+0x4a>
  405ec6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405eca:	1be4      	subs	r4, r4, r7
  405ecc:	f101 0e08 	add.w	lr, r1, #8
  405ed0:	68a5      	ldr	r5, [r4, #8]
  405ed2:	4575      	cmp	r5, lr
  405ed4:	443b      	add	r3, r7
  405ed6:	d06d      	beq.n	405fb4 <_free_r+0x120>
  405ed8:	68e7      	ldr	r7, [r4, #12]
  405eda:	60ef      	str	r7, [r5, #12]
  405edc:	60bd      	str	r5, [r7, #8]
  405ede:	1815      	adds	r5, r2, r0
  405ee0:	686d      	ldr	r5, [r5, #4]
  405ee2:	07ed      	lsls	r5, r5, #31
  405ee4:	d53e      	bpl.n	405f64 <_free_r+0xd0>
  405ee6:	f043 0201 	orr.w	r2, r3, #1
  405eea:	6062      	str	r2, [r4, #4]
  405eec:	50e3      	str	r3, [r4, r3]
  405eee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405ef2:	d217      	bcs.n	405f24 <_free_r+0x90>
  405ef4:	08db      	lsrs	r3, r3, #3
  405ef6:	1c58      	adds	r0, r3, #1
  405ef8:	109a      	asrs	r2, r3, #2
  405efa:	684d      	ldr	r5, [r1, #4]
  405efc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405f00:	60a7      	str	r7, [r4, #8]
  405f02:	2301      	movs	r3, #1
  405f04:	4093      	lsls	r3, r2
  405f06:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  405f0a:	432b      	orrs	r3, r5
  405f0c:	3a08      	subs	r2, #8
  405f0e:	60e2      	str	r2, [r4, #12]
  405f10:	604b      	str	r3, [r1, #4]
  405f12:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405f16:	60fc      	str	r4, [r7, #12]
  405f18:	4640      	mov	r0, r8
  405f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405f1e:	f7fe bceb 	b.w	4048f8 <__malloc_unlock>
  405f22:	4770      	bx	lr
  405f24:	0a5a      	lsrs	r2, r3, #9
  405f26:	2a04      	cmp	r2, #4
  405f28:	d852      	bhi.n	405fd0 <_free_r+0x13c>
  405f2a:	099a      	lsrs	r2, r3, #6
  405f2c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405f30:	00ff      	lsls	r7, r7, #3
  405f32:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405f36:	19c8      	adds	r0, r1, r7
  405f38:	59ca      	ldr	r2, [r1, r7]
  405f3a:	3808      	subs	r0, #8
  405f3c:	4290      	cmp	r0, r2
  405f3e:	d04f      	beq.n	405fe0 <_free_r+0x14c>
  405f40:	6851      	ldr	r1, [r2, #4]
  405f42:	f021 0103 	bic.w	r1, r1, #3
  405f46:	428b      	cmp	r3, r1
  405f48:	d232      	bcs.n	405fb0 <_free_r+0x11c>
  405f4a:	6892      	ldr	r2, [r2, #8]
  405f4c:	4290      	cmp	r0, r2
  405f4e:	d1f7      	bne.n	405f40 <_free_r+0xac>
  405f50:	68c3      	ldr	r3, [r0, #12]
  405f52:	60a0      	str	r0, [r4, #8]
  405f54:	60e3      	str	r3, [r4, #12]
  405f56:	609c      	str	r4, [r3, #8]
  405f58:	60c4      	str	r4, [r0, #12]
  405f5a:	4640      	mov	r0, r8
  405f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405f60:	f7fe bcca 	b.w	4048f8 <__malloc_unlock>
  405f64:	6895      	ldr	r5, [r2, #8]
  405f66:	4f3b      	ldr	r7, [pc, #236]	; (406054 <_free_r+0x1c0>)
  405f68:	42bd      	cmp	r5, r7
  405f6a:	4403      	add	r3, r0
  405f6c:	d040      	beq.n	405ff0 <_free_r+0x15c>
  405f6e:	68d0      	ldr	r0, [r2, #12]
  405f70:	60e8      	str	r0, [r5, #12]
  405f72:	f043 0201 	orr.w	r2, r3, #1
  405f76:	6085      	str	r5, [r0, #8]
  405f78:	6062      	str	r2, [r4, #4]
  405f7a:	50e3      	str	r3, [r4, r3]
  405f7c:	e7b7      	b.n	405eee <_free_r+0x5a>
  405f7e:	07ff      	lsls	r7, r7, #31
  405f80:	4403      	add	r3, r0
  405f82:	d407      	bmi.n	405f94 <_free_r+0x100>
  405f84:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405f88:	1aa4      	subs	r4, r4, r2
  405f8a:	4413      	add	r3, r2
  405f8c:	68a0      	ldr	r0, [r4, #8]
  405f8e:	68e2      	ldr	r2, [r4, #12]
  405f90:	60c2      	str	r2, [r0, #12]
  405f92:	6090      	str	r0, [r2, #8]
  405f94:	4a30      	ldr	r2, [pc, #192]	; (406058 <_free_r+0x1c4>)
  405f96:	6812      	ldr	r2, [r2, #0]
  405f98:	f043 0001 	orr.w	r0, r3, #1
  405f9c:	4293      	cmp	r3, r2
  405f9e:	6060      	str	r0, [r4, #4]
  405fa0:	608c      	str	r4, [r1, #8]
  405fa2:	d3b9      	bcc.n	405f18 <_free_r+0x84>
  405fa4:	4b2d      	ldr	r3, [pc, #180]	; (40605c <_free_r+0x1c8>)
  405fa6:	4640      	mov	r0, r8
  405fa8:	6819      	ldr	r1, [r3, #0]
  405faa:	f7ff ff23 	bl	405df4 <_malloc_trim_r>
  405fae:	e7b3      	b.n	405f18 <_free_r+0x84>
  405fb0:	4610      	mov	r0, r2
  405fb2:	e7cd      	b.n	405f50 <_free_r+0xbc>
  405fb4:	1811      	adds	r1, r2, r0
  405fb6:	6849      	ldr	r1, [r1, #4]
  405fb8:	07c9      	lsls	r1, r1, #31
  405fba:	d444      	bmi.n	406046 <_free_r+0x1b2>
  405fbc:	6891      	ldr	r1, [r2, #8]
  405fbe:	68d2      	ldr	r2, [r2, #12]
  405fc0:	60ca      	str	r2, [r1, #12]
  405fc2:	4403      	add	r3, r0
  405fc4:	f043 0001 	orr.w	r0, r3, #1
  405fc8:	6091      	str	r1, [r2, #8]
  405fca:	6060      	str	r0, [r4, #4]
  405fcc:	50e3      	str	r3, [r4, r3]
  405fce:	e7a3      	b.n	405f18 <_free_r+0x84>
  405fd0:	2a14      	cmp	r2, #20
  405fd2:	d816      	bhi.n	406002 <_free_r+0x16e>
  405fd4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405fd8:	00ff      	lsls	r7, r7, #3
  405fda:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405fde:	e7aa      	b.n	405f36 <_free_r+0xa2>
  405fe0:	10aa      	asrs	r2, r5, #2
  405fe2:	2301      	movs	r3, #1
  405fe4:	684d      	ldr	r5, [r1, #4]
  405fe6:	4093      	lsls	r3, r2
  405fe8:	432b      	orrs	r3, r5
  405fea:	604b      	str	r3, [r1, #4]
  405fec:	4603      	mov	r3, r0
  405fee:	e7b0      	b.n	405f52 <_free_r+0xbe>
  405ff0:	f043 0201 	orr.w	r2, r3, #1
  405ff4:	614c      	str	r4, [r1, #20]
  405ff6:	610c      	str	r4, [r1, #16]
  405ff8:	60e5      	str	r5, [r4, #12]
  405ffa:	60a5      	str	r5, [r4, #8]
  405ffc:	6062      	str	r2, [r4, #4]
  405ffe:	50e3      	str	r3, [r4, r3]
  406000:	e78a      	b.n	405f18 <_free_r+0x84>
  406002:	2a54      	cmp	r2, #84	; 0x54
  406004:	d806      	bhi.n	406014 <_free_r+0x180>
  406006:	0b1a      	lsrs	r2, r3, #12
  406008:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40600c:	00ff      	lsls	r7, r7, #3
  40600e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406012:	e790      	b.n	405f36 <_free_r+0xa2>
  406014:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406018:	d806      	bhi.n	406028 <_free_r+0x194>
  40601a:	0bda      	lsrs	r2, r3, #15
  40601c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406020:	00ff      	lsls	r7, r7, #3
  406022:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406026:	e786      	b.n	405f36 <_free_r+0xa2>
  406028:	f240 5054 	movw	r0, #1364	; 0x554
  40602c:	4282      	cmp	r2, r0
  40602e:	d806      	bhi.n	40603e <_free_r+0x1aa>
  406030:	0c9a      	lsrs	r2, r3, #18
  406032:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406036:	00ff      	lsls	r7, r7, #3
  406038:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40603c:	e77b      	b.n	405f36 <_free_r+0xa2>
  40603e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406042:	257e      	movs	r5, #126	; 0x7e
  406044:	e777      	b.n	405f36 <_free_r+0xa2>
  406046:	f043 0101 	orr.w	r1, r3, #1
  40604a:	6061      	str	r1, [r4, #4]
  40604c:	6013      	str	r3, [r2, #0]
  40604e:	e763      	b.n	405f18 <_free_r+0x84>
  406050:	20400440 	.word	0x20400440
  406054:	20400448 	.word	0x20400448
  406058:	2040084c 	.word	0x2040084c
  40605c:	2040c78c 	.word	0x2040c78c

00406060 <__sfvwrite_r>:
  406060:	6893      	ldr	r3, [r2, #8]
  406062:	2b00      	cmp	r3, #0
  406064:	d073      	beq.n	40614e <__sfvwrite_r+0xee>
  406066:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40606a:	898b      	ldrh	r3, [r1, #12]
  40606c:	b083      	sub	sp, #12
  40606e:	460c      	mov	r4, r1
  406070:	0719      	lsls	r1, r3, #28
  406072:	9000      	str	r0, [sp, #0]
  406074:	4616      	mov	r6, r2
  406076:	d526      	bpl.n	4060c6 <__sfvwrite_r+0x66>
  406078:	6922      	ldr	r2, [r4, #16]
  40607a:	b322      	cbz	r2, 4060c6 <__sfvwrite_r+0x66>
  40607c:	f013 0002 	ands.w	r0, r3, #2
  406080:	6835      	ldr	r5, [r6, #0]
  406082:	d02c      	beq.n	4060de <__sfvwrite_r+0x7e>
  406084:	f04f 0900 	mov.w	r9, #0
  406088:	4fb0      	ldr	r7, [pc, #704]	; (40634c <__sfvwrite_r+0x2ec>)
  40608a:	46c8      	mov	r8, r9
  40608c:	46b2      	mov	sl, r6
  40608e:	45b8      	cmp	r8, r7
  406090:	4643      	mov	r3, r8
  406092:	464a      	mov	r2, r9
  406094:	bf28      	it	cs
  406096:	463b      	movcs	r3, r7
  406098:	9800      	ldr	r0, [sp, #0]
  40609a:	f1b8 0f00 	cmp.w	r8, #0
  40609e:	d050      	beq.n	406142 <__sfvwrite_r+0xe2>
  4060a0:	69e1      	ldr	r1, [r4, #28]
  4060a2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4060a4:	47b0      	blx	r6
  4060a6:	2800      	cmp	r0, #0
  4060a8:	dd58      	ble.n	40615c <__sfvwrite_r+0xfc>
  4060aa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4060ae:	1a1b      	subs	r3, r3, r0
  4060b0:	4481      	add	r9, r0
  4060b2:	eba8 0800 	sub.w	r8, r8, r0
  4060b6:	f8ca 3008 	str.w	r3, [sl, #8]
  4060ba:	2b00      	cmp	r3, #0
  4060bc:	d1e7      	bne.n	40608e <__sfvwrite_r+0x2e>
  4060be:	2000      	movs	r0, #0
  4060c0:	b003      	add	sp, #12
  4060c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4060c6:	4621      	mov	r1, r4
  4060c8:	9800      	ldr	r0, [sp, #0]
  4060ca:	f7ff fc51 	bl	405970 <__swsetup_r>
  4060ce:	2800      	cmp	r0, #0
  4060d0:	f040 8133 	bne.w	40633a <__sfvwrite_r+0x2da>
  4060d4:	89a3      	ldrh	r3, [r4, #12]
  4060d6:	6835      	ldr	r5, [r6, #0]
  4060d8:	f013 0002 	ands.w	r0, r3, #2
  4060dc:	d1d2      	bne.n	406084 <__sfvwrite_r+0x24>
  4060de:	f013 0901 	ands.w	r9, r3, #1
  4060e2:	d145      	bne.n	406170 <__sfvwrite_r+0x110>
  4060e4:	464f      	mov	r7, r9
  4060e6:	9601      	str	r6, [sp, #4]
  4060e8:	b337      	cbz	r7, 406138 <__sfvwrite_r+0xd8>
  4060ea:	059a      	lsls	r2, r3, #22
  4060ec:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4060f0:	f140 8083 	bpl.w	4061fa <__sfvwrite_r+0x19a>
  4060f4:	4547      	cmp	r7, r8
  4060f6:	46c3      	mov	fp, r8
  4060f8:	f0c0 80ab 	bcc.w	406252 <__sfvwrite_r+0x1f2>
  4060fc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406100:	f040 80ac 	bne.w	40625c <__sfvwrite_r+0x1fc>
  406104:	6820      	ldr	r0, [r4, #0]
  406106:	46ba      	mov	sl, r7
  406108:	465a      	mov	r2, fp
  40610a:	4649      	mov	r1, r9
  40610c:	f000 fa40 	bl	406590 <memmove>
  406110:	68a2      	ldr	r2, [r4, #8]
  406112:	6823      	ldr	r3, [r4, #0]
  406114:	eba2 0208 	sub.w	r2, r2, r8
  406118:	445b      	add	r3, fp
  40611a:	60a2      	str	r2, [r4, #8]
  40611c:	6023      	str	r3, [r4, #0]
  40611e:	9a01      	ldr	r2, [sp, #4]
  406120:	6893      	ldr	r3, [r2, #8]
  406122:	eba3 030a 	sub.w	r3, r3, sl
  406126:	44d1      	add	r9, sl
  406128:	eba7 070a 	sub.w	r7, r7, sl
  40612c:	6093      	str	r3, [r2, #8]
  40612e:	2b00      	cmp	r3, #0
  406130:	d0c5      	beq.n	4060be <__sfvwrite_r+0x5e>
  406132:	89a3      	ldrh	r3, [r4, #12]
  406134:	2f00      	cmp	r7, #0
  406136:	d1d8      	bne.n	4060ea <__sfvwrite_r+0x8a>
  406138:	f8d5 9000 	ldr.w	r9, [r5]
  40613c:	686f      	ldr	r7, [r5, #4]
  40613e:	3508      	adds	r5, #8
  406140:	e7d2      	b.n	4060e8 <__sfvwrite_r+0x88>
  406142:	f8d5 9000 	ldr.w	r9, [r5]
  406146:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40614a:	3508      	adds	r5, #8
  40614c:	e79f      	b.n	40608e <__sfvwrite_r+0x2e>
  40614e:	2000      	movs	r0, #0
  406150:	4770      	bx	lr
  406152:	4621      	mov	r1, r4
  406154:	9800      	ldr	r0, [sp, #0]
  406156:	f7ff fd1f 	bl	405b98 <_fflush_r>
  40615a:	b370      	cbz	r0, 4061ba <__sfvwrite_r+0x15a>
  40615c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406164:	f04f 30ff 	mov.w	r0, #4294967295
  406168:	81a3      	strh	r3, [r4, #12]
  40616a:	b003      	add	sp, #12
  40616c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406170:	4681      	mov	r9, r0
  406172:	4633      	mov	r3, r6
  406174:	464e      	mov	r6, r9
  406176:	46a8      	mov	r8, r5
  406178:	469a      	mov	sl, r3
  40617a:	464d      	mov	r5, r9
  40617c:	b34e      	cbz	r6, 4061d2 <__sfvwrite_r+0x172>
  40617e:	b380      	cbz	r0, 4061e2 <__sfvwrite_r+0x182>
  406180:	6820      	ldr	r0, [r4, #0]
  406182:	6923      	ldr	r3, [r4, #16]
  406184:	6962      	ldr	r2, [r4, #20]
  406186:	45b1      	cmp	r9, r6
  406188:	46cb      	mov	fp, r9
  40618a:	bf28      	it	cs
  40618c:	46b3      	movcs	fp, r6
  40618e:	4298      	cmp	r0, r3
  406190:	465f      	mov	r7, fp
  406192:	d904      	bls.n	40619e <__sfvwrite_r+0x13e>
  406194:	68a3      	ldr	r3, [r4, #8]
  406196:	4413      	add	r3, r2
  406198:	459b      	cmp	fp, r3
  40619a:	f300 80a6 	bgt.w	4062ea <__sfvwrite_r+0x28a>
  40619e:	4593      	cmp	fp, r2
  4061a0:	db4b      	blt.n	40623a <__sfvwrite_r+0x1da>
  4061a2:	4613      	mov	r3, r2
  4061a4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4061a6:	69e1      	ldr	r1, [r4, #28]
  4061a8:	9800      	ldr	r0, [sp, #0]
  4061aa:	462a      	mov	r2, r5
  4061ac:	47b8      	blx	r7
  4061ae:	1e07      	subs	r7, r0, #0
  4061b0:	ddd4      	ble.n	40615c <__sfvwrite_r+0xfc>
  4061b2:	ebb9 0907 	subs.w	r9, r9, r7
  4061b6:	d0cc      	beq.n	406152 <__sfvwrite_r+0xf2>
  4061b8:	2001      	movs	r0, #1
  4061ba:	f8da 3008 	ldr.w	r3, [sl, #8]
  4061be:	1bdb      	subs	r3, r3, r7
  4061c0:	443d      	add	r5, r7
  4061c2:	1bf6      	subs	r6, r6, r7
  4061c4:	f8ca 3008 	str.w	r3, [sl, #8]
  4061c8:	2b00      	cmp	r3, #0
  4061ca:	f43f af78 	beq.w	4060be <__sfvwrite_r+0x5e>
  4061ce:	2e00      	cmp	r6, #0
  4061d0:	d1d5      	bne.n	40617e <__sfvwrite_r+0x11e>
  4061d2:	f108 0308 	add.w	r3, r8, #8
  4061d6:	e913 0060 	ldmdb	r3, {r5, r6}
  4061da:	4698      	mov	r8, r3
  4061dc:	3308      	adds	r3, #8
  4061de:	2e00      	cmp	r6, #0
  4061e0:	d0f9      	beq.n	4061d6 <__sfvwrite_r+0x176>
  4061e2:	4632      	mov	r2, r6
  4061e4:	210a      	movs	r1, #10
  4061e6:	4628      	mov	r0, r5
  4061e8:	f000 f982 	bl	4064f0 <memchr>
  4061ec:	2800      	cmp	r0, #0
  4061ee:	f000 80a1 	beq.w	406334 <__sfvwrite_r+0x2d4>
  4061f2:	3001      	adds	r0, #1
  4061f4:	eba0 0905 	sub.w	r9, r0, r5
  4061f8:	e7c2      	b.n	406180 <__sfvwrite_r+0x120>
  4061fa:	6820      	ldr	r0, [r4, #0]
  4061fc:	6923      	ldr	r3, [r4, #16]
  4061fe:	4298      	cmp	r0, r3
  406200:	d802      	bhi.n	406208 <__sfvwrite_r+0x1a8>
  406202:	6963      	ldr	r3, [r4, #20]
  406204:	429f      	cmp	r7, r3
  406206:	d25d      	bcs.n	4062c4 <__sfvwrite_r+0x264>
  406208:	45b8      	cmp	r8, r7
  40620a:	bf28      	it	cs
  40620c:	46b8      	movcs	r8, r7
  40620e:	4642      	mov	r2, r8
  406210:	4649      	mov	r1, r9
  406212:	f000 f9bd 	bl	406590 <memmove>
  406216:	68a3      	ldr	r3, [r4, #8]
  406218:	6822      	ldr	r2, [r4, #0]
  40621a:	eba3 0308 	sub.w	r3, r3, r8
  40621e:	4442      	add	r2, r8
  406220:	60a3      	str	r3, [r4, #8]
  406222:	6022      	str	r2, [r4, #0]
  406224:	b10b      	cbz	r3, 40622a <__sfvwrite_r+0x1ca>
  406226:	46c2      	mov	sl, r8
  406228:	e779      	b.n	40611e <__sfvwrite_r+0xbe>
  40622a:	4621      	mov	r1, r4
  40622c:	9800      	ldr	r0, [sp, #0]
  40622e:	f7ff fcb3 	bl	405b98 <_fflush_r>
  406232:	2800      	cmp	r0, #0
  406234:	d192      	bne.n	40615c <__sfvwrite_r+0xfc>
  406236:	46c2      	mov	sl, r8
  406238:	e771      	b.n	40611e <__sfvwrite_r+0xbe>
  40623a:	465a      	mov	r2, fp
  40623c:	4629      	mov	r1, r5
  40623e:	f000 f9a7 	bl	406590 <memmove>
  406242:	68a2      	ldr	r2, [r4, #8]
  406244:	6823      	ldr	r3, [r4, #0]
  406246:	eba2 020b 	sub.w	r2, r2, fp
  40624a:	445b      	add	r3, fp
  40624c:	60a2      	str	r2, [r4, #8]
  40624e:	6023      	str	r3, [r4, #0]
  406250:	e7af      	b.n	4061b2 <__sfvwrite_r+0x152>
  406252:	6820      	ldr	r0, [r4, #0]
  406254:	46b8      	mov	r8, r7
  406256:	46ba      	mov	sl, r7
  406258:	46bb      	mov	fp, r7
  40625a:	e755      	b.n	406108 <__sfvwrite_r+0xa8>
  40625c:	6962      	ldr	r2, [r4, #20]
  40625e:	6820      	ldr	r0, [r4, #0]
  406260:	6921      	ldr	r1, [r4, #16]
  406262:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  406266:	eba0 0a01 	sub.w	sl, r0, r1
  40626a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40626e:	f10a 0001 	add.w	r0, sl, #1
  406272:	ea4f 0868 	mov.w	r8, r8, asr #1
  406276:	4438      	add	r0, r7
  406278:	4540      	cmp	r0, r8
  40627a:	4642      	mov	r2, r8
  40627c:	bf84      	itt	hi
  40627e:	4680      	movhi	r8, r0
  406280:	4642      	movhi	r2, r8
  406282:	055b      	lsls	r3, r3, #21
  406284:	d544      	bpl.n	406310 <__sfvwrite_r+0x2b0>
  406286:	4611      	mov	r1, r2
  406288:	9800      	ldr	r0, [sp, #0]
  40628a:	f7fd ff97 	bl	4041bc <_malloc_r>
  40628e:	4683      	mov	fp, r0
  406290:	2800      	cmp	r0, #0
  406292:	d055      	beq.n	406340 <__sfvwrite_r+0x2e0>
  406294:	4652      	mov	r2, sl
  406296:	6921      	ldr	r1, [r4, #16]
  406298:	f7fe fa40 	bl	40471c <memcpy>
  40629c:	89a3      	ldrh	r3, [r4, #12]
  40629e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4062a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4062a6:	81a3      	strh	r3, [r4, #12]
  4062a8:	eb0b 000a 	add.w	r0, fp, sl
  4062ac:	eba8 030a 	sub.w	r3, r8, sl
  4062b0:	f8c4 b010 	str.w	fp, [r4, #16]
  4062b4:	f8c4 8014 	str.w	r8, [r4, #20]
  4062b8:	6020      	str	r0, [r4, #0]
  4062ba:	60a3      	str	r3, [r4, #8]
  4062bc:	46b8      	mov	r8, r7
  4062be:	46ba      	mov	sl, r7
  4062c0:	46bb      	mov	fp, r7
  4062c2:	e721      	b.n	406108 <__sfvwrite_r+0xa8>
  4062c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4062c8:	42b9      	cmp	r1, r7
  4062ca:	bf28      	it	cs
  4062cc:	4639      	movcs	r1, r7
  4062ce:	464a      	mov	r2, r9
  4062d0:	fb91 f1f3 	sdiv	r1, r1, r3
  4062d4:	9800      	ldr	r0, [sp, #0]
  4062d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4062d8:	fb03 f301 	mul.w	r3, r3, r1
  4062dc:	69e1      	ldr	r1, [r4, #28]
  4062de:	47b0      	blx	r6
  4062e0:	f1b0 0a00 	subs.w	sl, r0, #0
  4062e4:	f73f af1b 	bgt.w	40611e <__sfvwrite_r+0xbe>
  4062e8:	e738      	b.n	40615c <__sfvwrite_r+0xfc>
  4062ea:	461a      	mov	r2, r3
  4062ec:	4629      	mov	r1, r5
  4062ee:	9301      	str	r3, [sp, #4]
  4062f0:	f000 f94e 	bl	406590 <memmove>
  4062f4:	6822      	ldr	r2, [r4, #0]
  4062f6:	9b01      	ldr	r3, [sp, #4]
  4062f8:	9800      	ldr	r0, [sp, #0]
  4062fa:	441a      	add	r2, r3
  4062fc:	6022      	str	r2, [r4, #0]
  4062fe:	4621      	mov	r1, r4
  406300:	f7ff fc4a 	bl	405b98 <_fflush_r>
  406304:	9b01      	ldr	r3, [sp, #4]
  406306:	2800      	cmp	r0, #0
  406308:	f47f af28 	bne.w	40615c <__sfvwrite_r+0xfc>
  40630c:	461f      	mov	r7, r3
  40630e:	e750      	b.n	4061b2 <__sfvwrite_r+0x152>
  406310:	9800      	ldr	r0, [sp, #0]
  406312:	f000 f9a1 	bl	406658 <_realloc_r>
  406316:	4683      	mov	fp, r0
  406318:	2800      	cmp	r0, #0
  40631a:	d1c5      	bne.n	4062a8 <__sfvwrite_r+0x248>
  40631c:	9d00      	ldr	r5, [sp, #0]
  40631e:	6921      	ldr	r1, [r4, #16]
  406320:	4628      	mov	r0, r5
  406322:	f7ff fdb7 	bl	405e94 <_free_r>
  406326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40632a:	220c      	movs	r2, #12
  40632c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  406330:	602a      	str	r2, [r5, #0]
  406332:	e715      	b.n	406160 <__sfvwrite_r+0x100>
  406334:	f106 0901 	add.w	r9, r6, #1
  406338:	e722      	b.n	406180 <__sfvwrite_r+0x120>
  40633a:	f04f 30ff 	mov.w	r0, #4294967295
  40633e:	e6bf      	b.n	4060c0 <__sfvwrite_r+0x60>
  406340:	9a00      	ldr	r2, [sp, #0]
  406342:	230c      	movs	r3, #12
  406344:	6013      	str	r3, [r2, #0]
  406346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40634a:	e709      	b.n	406160 <__sfvwrite_r+0x100>
  40634c:	7ffffc00 	.word	0x7ffffc00

00406350 <_fwalk_reent>:
  406350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406354:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406358:	d01f      	beq.n	40639a <_fwalk_reent+0x4a>
  40635a:	4688      	mov	r8, r1
  40635c:	4606      	mov	r6, r0
  40635e:	f04f 0900 	mov.w	r9, #0
  406362:	687d      	ldr	r5, [r7, #4]
  406364:	68bc      	ldr	r4, [r7, #8]
  406366:	3d01      	subs	r5, #1
  406368:	d411      	bmi.n	40638e <_fwalk_reent+0x3e>
  40636a:	89a3      	ldrh	r3, [r4, #12]
  40636c:	2b01      	cmp	r3, #1
  40636e:	f105 35ff 	add.w	r5, r5, #4294967295
  406372:	d908      	bls.n	406386 <_fwalk_reent+0x36>
  406374:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406378:	3301      	adds	r3, #1
  40637a:	4621      	mov	r1, r4
  40637c:	4630      	mov	r0, r6
  40637e:	d002      	beq.n	406386 <_fwalk_reent+0x36>
  406380:	47c0      	blx	r8
  406382:	ea49 0900 	orr.w	r9, r9, r0
  406386:	1c6b      	adds	r3, r5, #1
  406388:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40638c:	d1ed      	bne.n	40636a <_fwalk_reent+0x1a>
  40638e:	683f      	ldr	r7, [r7, #0]
  406390:	2f00      	cmp	r7, #0
  406392:	d1e6      	bne.n	406362 <_fwalk_reent+0x12>
  406394:	4648      	mov	r0, r9
  406396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40639a:	46b9      	mov	r9, r7
  40639c:	4648      	mov	r0, r9
  40639e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4063a2:	bf00      	nop

004063a4 <__locale_mb_cur_max>:
  4063a4:	4b04      	ldr	r3, [pc, #16]	; (4063b8 <__locale_mb_cur_max+0x14>)
  4063a6:	4a05      	ldr	r2, [pc, #20]	; (4063bc <__locale_mb_cur_max+0x18>)
  4063a8:	681b      	ldr	r3, [r3, #0]
  4063aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4063ac:	2b00      	cmp	r3, #0
  4063ae:	bf08      	it	eq
  4063b0:	4613      	moveq	r3, r2
  4063b2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4063b6:	4770      	bx	lr
  4063b8:	20400014 	.word	0x20400014
  4063bc:	20400854 	.word	0x20400854

004063c0 <__retarget_lock_init_recursive>:
  4063c0:	4770      	bx	lr
  4063c2:	bf00      	nop

004063c4 <__retarget_lock_close_recursive>:
  4063c4:	4770      	bx	lr
  4063c6:	bf00      	nop

004063c8 <__retarget_lock_acquire_recursive>:
  4063c8:	4770      	bx	lr
  4063ca:	bf00      	nop

004063cc <__retarget_lock_release_recursive>:
  4063cc:	4770      	bx	lr
  4063ce:	bf00      	nop

004063d0 <__swhatbuf_r>:
  4063d0:	b570      	push	{r4, r5, r6, lr}
  4063d2:	460c      	mov	r4, r1
  4063d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4063d8:	2900      	cmp	r1, #0
  4063da:	b090      	sub	sp, #64	; 0x40
  4063dc:	4615      	mov	r5, r2
  4063de:	461e      	mov	r6, r3
  4063e0:	db14      	blt.n	40640c <__swhatbuf_r+0x3c>
  4063e2:	aa01      	add	r2, sp, #4
  4063e4:	f000 fc9e 	bl	406d24 <_fstat_r>
  4063e8:	2800      	cmp	r0, #0
  4063ea:	db0f      	blt.n	40640c <__swhatbuf_r+0x3c>
  4063ec:	9a02      	ldr	r2, [sp, #8]
  4063ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4063f2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4063f6:	fab2 f282 	clz	r2, r2
  4063fa:	0952      	lsrs	r2, r2, #5
  4063fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406400:	f44f 6000 	mov.w	r0, #2048	; 0x800
  406404:	6032      	str	r2, [r6, #0]
  406406:	602b      	str	r3, [r5, #0]
  406408:	b010      	add	sp, #64	; 0x40
  40640a:	bd70      	pop	{r4, r5, r6, pc}
  40640c:	89a2      	ldrh	r2, [r4, #12]
  40640e:	2300      	movs	r3, #0
  406410:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  406414:	6033      	str	r3, [r6, #0]
  406416:	d004      	beq.n	406422 <__swhatbuf_r+0x52>
  406418:	2240      	movs	r2, #64	; 0x40
  40641a:	4618      	mov	r0, r3
  40641c:	602a      	str	r2, [r5, #0]
  40641e:	b010      	add	sp, #64	; 0x40
  406420:	bd70      	pop	{r4, r5, r6, pc}
  406422:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406426:	602b      	str	r3, [r5, #0]
  406428:	b010      	add	sp, #64	; 0x40
  40642a:	bd70      	pop	{r4, r5, r6, pc}

0040642c <__smakebuf_r>:
  40642c:	898a      	ldrh	r2, [r1, #12]
  40642e:	0792      	lsls	r2, r2, #30
  406430:	460b      	mov	r3, r1
  406432:	d506      	bpl.n	406442 <__smakebuf_r+0x16>
  406434:	f101 0243 	add.w	r2, r1, #67	; 0x43
  406438:	2101      	movs	r1, #1
  40643a:	601a      	str	r2, [r3, #0]
  40643c:	611a      	str	r2, [r3, #16]
  40643e:	6159      	str	r1, [r3, #20]
  406440:	4770      	bx	lr
  406442:	b5f0      	push	{r4, r5, r6, r7, lr}
  406444:	b083      	sub	sp, #12
  406446:	ab01      	add	r3, sp, #4
  406448:	466a      	mov	r2, sp
  40644a:	460c      	mov	r4, r1
  40644c:	4606      	mov	r6, r0
  40644e:	f7ff ffbf 	bl	4063d0 <__swhatbuf_r>
  406452:	9900      	ldr	r1, [sp, #0]
  406454:	4605      	mov	r5, r0
  406456:	4630      	mov	r0, r6
  406458:	f7fd feb0 	bl	4041bc <_malloc_r>
  40645c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406460:	b1d8      	cbz	r0, 40649a <__smakebuf_r+0x6e>
  406462:	9a01      	ldr	r2, [sp, #4]
  406464:	4f15      	ldr	r7, [pc, #84]	; (4064bc <__smakebuf_r+0x90>)
  406466:	9900      	ldr	r1, [sp, #0]
  406468:	63f7      	str	r7, [r6, #60]	; 0x3c
  40646a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40646e:	81a3      	strh	r3, [r4, #12]
  406470:	6020      	str	r0, [r4, #0]
  406472:	6120      	str	r0, [r4, #16]
  406474:	6161      	str	r1, [r4, #20]
  406476:	b91a      	cbnz	r2, 406480 <__smakebuf_r+0x54>
  406478:	432b      	orrs	r3, r5
  40647a:	81a3      	strh	r3, [r4, #12]
  40647c:	b003      	add	sp, #12
  40647e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406480:	4630      	mov	r0, r6
  406482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406486:	f000 fc61 	bl	406d4c <_isatty_r>
  40648a:	b1a0      	cbz	r0, 4064b6 <__smakebuf_r+0x8a>
  40648c:	89a3      	ldrh	r3, [r4, #12]
  40648e:	f023 0303 	bic.w	r3, r3, #3
  406492:	f043 0301 	orr.w	r3, r3, #1
  406496:	b21b      	sxth	r3, r3
  406498:	e7ee      	b.n	406478 <__smakebuf_r+0x4c>
  40649a:	059a      	lsls	r2, r3, #22
  40649c:	d4ee      	bmi.n	40647c <__smakebuf_r+0x50>
  40649e:	f023 0303 	bic.w	r3, r3, #3
  4064a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4064a6:	f043 0302 	orr.w	r3, r3, #2
  4064aa:	2101      	movs	r1, #1
  4064ac:	81a3      	strh	r3, [r4, #12]
  4064ae:	6022      	str	r2, [r4, #0]
  4064b0:	6122      	str	r2, [r4, #16]
  4064b2:	6161      	str	r1, [r4, #20]
  4064b4:	e7e2      	b.n	40647c <__smakebuf_r+0x50>
  4064b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4064ba:	e7dd      	b.n	406478 <__smakebuf_r+0x4c>
  4064bc:	00405bed 	.word	0x00405bed

004064c0 <__ascii_mbtowc>:
  4064c0:	b082      	sub	sp, #8
  4064c2:	b149      	cbz	r1, 4064d8 <__ascii_mbtowc+0x18>
  4064c4:	b15a      	cbz	r2, 4064de <__ascii_mbtowc+0x1e>
  4064c6:	b16b      	cbz	r3, 4064e4 <__ascii_mbtowc+0x24>
  4064c8:	7813      	ldrb	r3, [r2, #0]
  4064ca:	600b      	str	r3, [r1, #0]
  4064cc:	7812      	ldrb	r2, [r2, #0]
  4064ce:	1c10      	adds	r0, r2, #0
  4064d0:	bf18      	it	ne
  4064d2:	2001      	movne	r0, #1
  4064d4:	b002      	add	sp, #8
  4064d6:	4770      	bx	lr
  4064d8:	a901      	add	r1, sp, #4
  4064da:	2a00      	cmp	r2, #0
  4064dc:	d1f3      	bne.n	4064c6 <__ascii_mbtowc+0x6>
  4064de:	4610      	mov	r0, r2
  4064e0:	b002      	add	sp, #8
  4064e2:	4770      	bx	lr
  4064e4:	f06f 0001 	mvn.w	r0, #1
  4064e8:	e7f4      	b.n	4064d4 <__ascii_mbtowc+0x14>
  4064ea:	bf00      	nop
  4064ec:	0000      	movs	r0, r0
	...

004064f0 <memchr>:
  4064f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4064f4:	2a10      	cmp	r2, #16
  4064f6:	db2b      	blt.n	406550 <memchr+0x60>
  4064f8:	f010 0f07 	tst.w	r0, #7
  4064fc:	d008      	beq.n	406510 <memchr+0x20>
  4064fe:	f810 3b01 	ldrb.w	r3, [r0], #1
  406502:	3a01      	subs	r2, #1
  406504:	428b      	cmp	r3, r1
  406506:	d02d      	beq.n	406564 <memchr+0x74>
  406508:	f010 0f07 	tst.w	r0, #7
  40650c:	b342      	cbz	r2, 406560 <memchr+0x70>
  40650e:	d1f6      	bne.n	4064fe <memchr+0xe>
  406510:	b4f0      	push	{r4, r5, r6, r7}
  406512:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406516:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40651a:	f022 0407 	bic.w	r4, r2, #7
  40651e:	f07f 0700 	mvns.w	r7, #0
  406522:	2300      	movs	r3, #0
  406524:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406528:	3c08      	subs	r4, #8
  40652a:	ea85 0501 	eor.w	r5, r5, r1
  40652e:	ea86 0601 	eor.w	r6, r6, r1
  406532:	fa85 f547 	uadd8	r5, r5, r7
  406536:	faa3 f587 	sel	r5, r3, r7
  40653a:	fa86 f647 	uadd8	r6, r6, r7
  40653e:	faa5 f687 	sel	r6, r5, r7
  406542:	b98e      	cbnz	r6, 406568 <memchr+0x78>
  406544:	d1ee      	bne.n	406524 <memchr+0x34>
  406546:	bcf0      	pop	{r4, r5, r6, r7}
  406548:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40654c:	f002 0207 	and.w	r2, r2, #7
  406550:	b132      	cbz	r2, 406560 <memchr+0x70>
  406552:	f810 3b01 	ldrb.w	r3, [r0], #1
  406556:	3a01      	subs	r2, #1
  406558:	ea83 0301 	eor.w	r3, r3, r1
  40655c:	b113      	cbz	r3, 406564 <memchr+0x74>
  40655e:	d1f8      	bne.n	406552 <memchr+0x62>
  406560:	2000      	movs	r0, #0
  406562:	4770      	bx	lr
  406564:	3801      	subs	r0, #1
  406566:	4770      	bx	lr
  406568:	2d00      	cmp	r5, #0
  40656a:	bf06      	itte	eq
  40656c:	4635      	moveq	r5, r6
  40656e:	3803      	subeq	r0, #3
  406570:	3807      	subne	r0, #7
  406572:	f015 0f01 	tst.w	r5, #1
  406576:	d107      	bne.n	406588 <memchr+0x98>
  406578:	3001      	adds	r0, #1
  40657a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40657e:	bf02      	ittt	eq
  406580:	3001      	addeq	r0, #1
  406582:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406586:	3001      	addeq	r0, #1
  406588:	bcf0      	pop	{r4, r5, r6, r7}
  40658a:	3801      	subs	r0, #1
  40658c:	4770      	bx	lr
  40658e:	bf00      	nop

00406590 <memmove>:
  406590:	4288      	cmp	r0, r1
  406592:	b5f0      	push	{r4, r5, r6, r7, lr}
  406594:	d90d      	bls.n	4065b2 <memmove+0x22>
  406596:	188b      	adds	r3, r1, r2
  406598:	4298      	cmp	r0, r3
  40659a:	d20a      	bcs.n	4065b2 <memmove+0x22>
  40659c:	1884      	adds	r4, r0, r2
  40659e:	2a00      	cmp	r2, #0
  4065a0:	d051      	beq.n	406646 <memmove+0xb6>
  4065a2:	4622      	mov	r2, r4
  4065a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4065a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4065ac:	4299      	cmp	r1, r3
  4065ae:	d1f9      	bne.n	4065a4 <memmove+0x14>
  4065b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4065b2:	2a0f      	cmp	r2, #15
  4065b4:	d948      	bls.n	406648 <memmove+0xb8>
  4065b6:	ea41 0300 	orr.w	r3, r1, r0
  4065ba:	079b      	lsls	r3, r3, #30
  4065bc:	d146      	bne.n	40664c <memmove+0xbc>
  4065be:	f100 0410 	add.w	r4, r0, #16
  4065c2:	f101 0310 	add.w	r3, r1, #16
  4065c6:	4615      	mov	r5, r2
  4065c8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4065cc:	f844 6c10 	str.w	r6, [r4, #-16]
  4065d0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4065d4:	f844 6c0c 	str.w	r6, [r4, #-12]
  4065d8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4065dc:	f844 6c08 	str.w	r6, [r4, #-8]
  4065e0:	3d10      	subs	r5, #16
  4065e2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4065e6:	f844 6c04 	str.w	r6, [r4, #-4]
  4065ea:	2d0f      	cmp	r5, #15
  4065ec:	f103 0310 	add.w	r3, r3, #16
  4065f0:	f104 0410 	add.w	r4, r4, #16
  4065f4:	d8e8      	bhi.n	4065c8 <memmove+0x38>
  4065f6:	f1a2 0310 	sub.w	r3, r2, #16
  4065fa:	f023 030f 	bic.w	r3, r3, #15
  4065fe:	f002 0e0f 	and.w	lr, r2, #15
  406602:	3310      	adds	r3, #16
  406604:	f1be 0f03 	cmp.w	lr, #3
  406608:	4419      	add	r1, r3
  40660a:	4403      	add	r3, r0
  40660c:	d921      	bls.n	406652 <memmove+0xc2>
  40660e:	1f1e      	subs	r6, r3, #4
  406610:	460d      	mov	r5, r1
  406612:	4674      	mov	r4, lr
  406614:	3c04      	subs	r4, #4
  406616:	f855 7b04 	ldr.w	r7, [r5], #4
  40661a:	f846 7f04 	str.w	r7, [r6, #4]!
  40661e:	2c03      	cmp	r4, #3
  406620:	d8f8      	bhi.n	406614 <memmove+0x84>
  406622:	f1ae 0404 	sub.w	r4, lr, #4
  406626:	f024 0403 	bic.w	r4, r4, #3
  40662a:	3404      	adds	r4, #4
  40662c:	4421      	add	r1, r4
  40662e:	4423      	add	r3, r4
  406630:	f002 0203 	and.w	r2, r2, #3
  406634:	b162      	cbz	r2, 406650 <memmove+0xc0>
  406636:	3b01      	subs	r3, #1
  406638:	440a      	add	r2, r1
  40663a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40663e:	f803 4f01 	strb.w	r4, [r3, #1]!
  406642:	428a      	cmp	r2, r1
  406644:	d1f9      	bne.n	40663a <memmove+0xaa>
  406646:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406648:	4603      	mov	r3, r0
  40664a:	e7f3      	b.n	406634 <memmove+0xa4>
  40664c:	4603      	mov	r3, r0
  40664e:	e7f2      	b.n	406636 <memmove+0xa6>
  406650:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406652:	4672      	mov	r2, lr
  406654:	e7ee      	b.n	406634 <memmove+0xa4>
  406656:	bf00      	nop

00406658 <_realloc_r>:
  406658:	2900      	cmp	r1, #0
  40665a:	f000 8095 	beq.w	406788 <_realloc_r+0x130>
  40665e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406662:	460d      	mov	r5, r1
  406664:	4616      	mov	r6, r2
  406666:	b083      	sub	sp, #12
  406668:	4680      	mov	r8, r0
  40666a:	f106 070b 	add.w	r7, r6, #11
  40666e:	f7fe f93d 	bl	4048ec <__malloc_lock>
  406672:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406676:	2f16      	cmp	r7, #22
  406678:	f02e 0403 	bic.w	r4, lr, #3
  40667c:	f1a5 0908 	sub.w	r9, r5, #8
  406680:	d83c      	bhi.n	4066fc <_realloc_r+0xa4>
  406682:	2210      	movs	r2, #16
  406684:	4617      	mov	r7, r2
  406686:	42be      	cmp	r6, r7
  406688:	d83d      	bhi.n	406706 <_realloc_r+0xae>
  40668a:	4294      	cmp	r4, r2
  40668c:	da43      	bge.n	406716 <_realloc_r+0xbe>
  40668e:	4bc4      	ldr	r3, [pc, #784]	; (4069a0 <_realloc_r+0x348>)
  406690:	6899      	ldr	r1, [r3, #8]
  406692:	eb09 0004 	add.w	r0, r9, r4
  406696:	4288      	cmp	r0, r1
  406698:	f000 80b4 	beq.w	406804 <_realloc_r+0x1ac>
  40669c:	6843      	ldr	r3, [r0, #4]
  40669e:	f023 0101 	bic.w	r1, r3, #1
  4066a2:	4401      	add	r1, r0
  4066a4:	6849      	ldr	r1, [r1, #4]
  4066a6:	07c9      	lsls	r1, r1, #31
  4066a8:	d54c      	bpl.n	406744 <_realloc_r+0xec>
  4066aa:	f01e 0f01 	tst.w	lr, #1
  4066ae:	f000 809b 	beq.w	4067e8 <_realloc_r+0x190>
  4066b2:	4631      	mov	r1, r6
  4066b4:	4640      	mov	r0, r8
  4066b6:	f7fd fd81 	bl	4041bc <_malloc_r>
  4066ba:	4606      	mov	r6, r0
  4066bc:	2800      	cmp	r0, #0
  4066be:	d03a      	beq.n	406736 <_realloc_r+0xde>
  4066c0:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4066c4:	f023 0301 	bic.w	r3, r3, #1
  4066c8:	444b      	add	r3, r9
  4066ca:	f1a0 0208 	sub.w	r2, r0, #8
  4066ce:	429a      	cmp	r2, r3
  4066d0:	f000 8121 	beq.w	406916 <_realloc_r+0x2be>
  4066d4:	1f22      	subs	r2, r4, #4
  4066d6:	2a24      	cmp	r2, #36	; 0x24
  4066d8:	f200 8107 	bhi.w	4068ea <_realloc_r+0x292>
  4066dc:	2a13      	cmp	r2, #19
  4066de:	f200 80db 	bhi.w	406898 <_realloc_r+0x240>
  4066e2:	4603      	mov	r3, r0
  4066e4:	462a      	mov	r2, r5
  4066e6:	6811      	ldr	r1, [r2, #0]
  4066e8:	6019      	str	r1, [r3, #0]
  4066ea:	6851      	ldr	r1, [r2, #4]
  4066ec:	6059      	str	r1, [r3, #4]
  4066ee:	6892      	ldr	r2, [r2, #8]
  4066f0:	609a      	str	r2, [r3, #8]
  4066f2:	4629      	mov	r1, r5
  4066f4:	4640      	mov	r0, r8
  4066f6:	f7ff fbcd 	bl	405e94 <_free_r>
  4066fa:	e01c      	b.n	406736 <_realloc_r+0xde>
  4066fc:	f027 0707 	bic.w	r7, r7, #7
  406700:	2f00      	cmp	r7, #0
  406702:	463a      	mov	r2, r7
  406704:	dabf      	bge.n	406686 <_realloc_r+0x2e>
  406706:	2600      	movs	r6, #0
  406708:	230c      	movs	r3, #12
  40670a:	4630      	mov	r0, r6
  40670c:	f8c8 3000 	str.w	r3, [r8]
  406710:	b003      	add	sp, #12
  406712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406716:	462e      	mov	r6, r5
  406718:	1be3      	subs	r3, r4, r7
  40671a:	2b0f      	cmp	r3, #15
  40671c:	d81e      	bhi.n	40675c <_realloc_r+0x104>
  40671e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  406722:	f003 0301 	and.w	r3, r3, #1
  406726:	4323      	orrs	r3, r4
  406728:	444c      	add	r4, r9
  40672a:	f8c9 3004 	str.w	r3, [r9, #4]
  40672e:	6863      	ldr	r3, [r4, #4]
  406730:	f043 0301 	orr.w	r3, r3, #1
  406734:	6063      	str	r3, [r4, #4]
  406736:	4640      	mov	r0, r8
  406738:	f7fe f8de 	bl	4048f8 <__malloc_unlock>
  40673c:	4630      	mov	r0, r6
  40673e:	b003      	add	sp, #12
  406740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406744:	f023 0303 	bic.w	r3, r3, #3
  406748:	18e1      	adds	r1, r4, r3
  40674a:	4291      	cmp	r1, r2
  40674c:	db1f      	blt.n	40678e <_realloc_r+0x136>
  40674e:	68c3      	ldr	r3, [r0, #12]
  406750:	6882      	ldr	r2, [r0, #8]
  406752:	462e      	mov	r6, r5
  406754:	60d3      	str	r3, [r2, #12]
  406756:	460c      	mov	r4, r1
  406758:	609a      	str	r2, [r3, #8]
  40675a:	e7dd      	b.n	406718 <_realloc_r+0xc0>
  40675c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  406760:	eb09 0107 	add.w	r1, r9, r7
  406764:	f002 0201 	and.w	r2, r2, #1
  406768:	444c      	add	r4, r9
  40676a:	f043 0301 	orr.w	r3, r3, #1
  40676e:	4317      	orrs	r7, r2
  406770:	f8c9 7004 	str.w	r7, [r9, #4]
  406774:	604b      	str	r3, [r1, #4]
  406776:	6863      	ldr	r3, [r4, #4]
  406778:	f043 0301 	orr.w	r3, r3, #1
  40677c:	3108      	adds	r1, #8
  40677e:	6063      	str	r3, [r4, #4]
  406780:	4640      	mov	r0, r8
  406782:	f7ff fb87 	bl	405e94 <_free_r>
  406786:	e7d6      	b.n	406736 <_realloc_r+0xde>
  406788:	4611      	mov	r1, r2
  40678a:	f7fd bd17 	b.w	4041bc <_malloc_r>
  40678e:	f01e 0f01 	tst.w	lr, #1
  406792:	d18e      	bne.n	4066b2 <_realloc_r+0x5a>
  406794:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406798:	eba9 0a01 	sub.w	sl, r9, r1
  40679c:	f8da 1004 	ldr.w	r1, [sl, #4]
  4067a0:	f021 0103 	bic.w	r1, r1, #3
  4067a4:	440b      	add	r3, r1
  4067a6:	4423      	add	r3, r4
  4067a8:	4293      	cmp	r3, r2
  4067aa:	db25      	blt.n	4067f8 <_realloc_r+0x1a0>
  4067ac:	68c2      	ldr	r2, [r0, #12]
  4067ae:	6881      	ldr	r1, [r0, #8]
  4067b0:	4656      	mov	r6, sl
  4067b2:	60ca      	str	r2, [r1, #12]
  4067b4:	6091      	str	r1, [r2, #8]
  4067b6:	f8da 100c 	ldr.w	r1, [sl, #12]
  4067ba:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4067be:	1f22      	subs	r2, r4, #4
  4067c0:	2a24      	cmp	r2, #36	; 0x24
  4067c2:	60c1      	str	r1, [r0, #12]
  4067c4:	6088      	str	r0, [r1, #8]
  4067c6:	f200 8094 	bhi.w	4068f2 <_realloc_r+0x29a>
  4067ca:	2a13      	cmp	r2, #19
  4067cc:	d96f      	bls.n	4068ae <_realloc_r+0x256>
  4067ce:	6829      	ldr	r1, [r5, #0]
  4067d0:	f8ca 1008 	str.w	r1, [sl, #8]
  4067d4:	6869      	ldr	r1, [r5, #4]
  4067d6:	f8ca 100c 	str.w	r1, [sl, #12]
  4067da:	2a1b      	cmp	r2, #27
  4067dc:	f200 80a2 	bhi.w	406924 <_realloc_r+0x2cc>
  4067e0:	3508      	adds	r5, #8
  4067e2:	f10a 0210 	add.w	r2, sl, #16
  4067e6:	e063      	b.n	4068b0 <_realloc_r+0x258>
  4067e8:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4067ec:	eba9 0a03 	sub.w	sl, r9, r3
  4067f0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4067f4:	f021 0103 	bic.w	r1, r1, #3
  4067f8:	1863      	adds	r3, r4, r1
  4067fa:	4293      	cmp	r3, r2
  4067fc:	f6ff af59 	blt.w	4066b2 <_realloc_r+0x5a>
  406800:	4656      	mov	r6, sl
  406802:	e7d8      	b.n	4067b6 <_realloc_r+0x15e>
  406804:	6841      	ldr	r1, [r0, #4]
  406806:	f021 0b03 	bic.w	fp, r1, #3
  40680a:	44a3      	add	fp, r4
  40680c:	f107 0010 	add.w	r0, r7, #16
  406810:	4583      	cmp	fp, r0
  406812:	da56      	bge.n	4068c2 <_realloc_r+0x26a>
  406814:	f01e 0f01 	tst.w	lr, #1
  406818:	f47f af4b 	bne.w	4066b2 <_realloc_r+0x5a>
  40681c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406820:	eba9 0a01 	sub.w	sl, r9, r1
  406824:	f8da 1004 	ldr.w	r1, [sl, #4]
  406828:	f021 0103 	bic.w	r1, r1, #3
  40682c:	448b      	add	fp, r1
  40682e:	4558      	cmp	r0, fp
  406830:	dce2      	bgt.n	4067f8 <_realloc_r+0x1a0>
  406832:	4656      	mov	r6, sl
  406834:	f8da 100c 	ldr.w	r1, [sl, #12]
  406838:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40683c:	1f22      	subs	r2, r4, #4
  40683e:	2a24      	cmp	r2, #36	; 0x24
  406840:	60c1      	str	r1, [r0, #12]
  406842:	6088      	str	r0, [r1, #8]
  406844:	f200 808f 	bhi.w	406966 <_realloc_r+0x30e>
  406848:	2a13      	cmp	r2, #19
  40684a:	f240 808a 	bls.w	406962 <_realloc_r+0x30a>
  40684e:	6829      	ldr	r1, [r5, #0]
  406850:	f8ca 1008 	str.w	r1, [sl, #8]
  406854:	6869      	ldr	r1, [r5, #4]
  406856:	f8ca 100c 	str.w	r1, [sl, #12]
  40685a:	2a1b      	cmp	r2, #27
  40685c:	f200 808a 	bhi.w	406974 <_realloc_r+0x31c>
  406860:	3508      	adds	r5, #8
  406862:	f10a 0210 	add.w	r2, sl, #16
  406866:	6829      	ldr	r1, [r5, #0]
  406868:	6011      	str	r1, [r2, #0]
  40686a:	6869      	ldr	r1, [r5, #4]
  40686c:	6051      	str	r1, [r2, #4]
  40686e:	68a9      	ldr	r1, [r5, #8]
  406870:	6091      	str	r1, [r2, #8]
  406872:	eb0a 0107 	add.w	r1, sl, r7
  406876:	ebab 0207 	sub.w	r2, fp, r7
  40687a:	f042 0201 	orr.w	r2, r2, #1
  40687e:	6099      	str	r1, [r3, #8]
  406880:	604a      	str	r2, [r1, #4]
  406882:	f8da 3004 	ldr.w	r3, [sl, #4]
  406886:	f003 0301 	and.w	r3, r3, #1
  40688a:	431f      	orrs	r7, r3
  40688c:	4640      	mov	r0, r8
  40688e:	f8ca 7004 	str.w	r7, [sl, #4]
  406892:	f7fe f831 	bl	4048f8 <__malloc_unlock>
  406896:	e751      	b.n	40673c <_realloc_r+0xe4>
  406898:	682b      	ldr	r3, [r5, #0]
  40689a:	6003      	str	r3, [r0, #0]
  40689c:	686b      	ldr	r3, [r5, #4]
  40689e:	6043      	str	r3, [r0, #4]
  4068a0:	2a1b      	cmp	r2, #27
  4068a2:	d82d      	bhi.n	406900 <_realloc_r+0x2a8>
  4068a4:	f100 0308 	add.w	r3, r0, #8
  4068a8:	f105 0208 	add.w	r2, r5, #8
  4068ac:	e71b      	b.n	4066e6 <_realloc_r+0x8e>
  4068ae:	4632      	mov	r2, r6
  4068b0:	6829      	ldr	r1, [r5, #0]
  4068b2:	6011      	str	r1, [r2, #0]
  4068b4:	6869      	ldr	r1, [r5, #4]
  4068b6:	6051      	str	r1, [r2, #4]
  4068b8:	68a9      	ldr	r1, [r5, #8]
  4068ba:	6091      	str	r1, [r2, #8]
  4068bc:	461c      	mov	r4, r3
  4068be:	46d1      	mov	r9, sl
  4068c0:	e72a      	b.n	406718 <_realloc_r+0xc0>
  4068c2:	eb09 0107 	add.w	r1, r9, r7
  4068c6:	ebab 0b07 	sub.w	fp, fp, r7
  4068ca:	f04b 0201 	orr.w	r2, fp, #1
  4068ce:	6099      	str	r1, [r3, #8]
  4068d0:	604a      	str	r2, [r1, #4]
  4068d2:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4068d6:	f003 0301 	and.w	r3, r3, #1
  4068da:	431f      	orrs	r7, r3
  4068dc:	4640      	mov	r0, r8
  4068de:	f845 7c04 	str.w	r7, [r5, #-4]
  4068e2:	f7fe f809 	bl	4048f8 <__malloc_unlock>
  4068e6:	462e      	mov	r6, r5
  4068e8:	e728      	b.n	40673c <_realloc_r+0xe4>
  4068ea:	4629      	mov	r1, r5
  4068ec:	f7ff fe50 	bl	406590 <memmove>
  4068f0:	e6ff      	b.n	4066f2 <_realloc_r+0x9a>
  4068f2:	4629      	mov	r1, r5
  4068f4:	4630      	mov	r0, r6
  4068f6:	461c      	mov	r4, r3
  4068f8:	46d1      	mov	r9, sl
  4068fa:	f7ff fe49 	bl	406590 <memmove>
  4068fe:	e70b      	b.n	406718 <_realloc_r+0xc0>
  406900:	68ab      	ldr	r3, [r5, #8]
  406902:	6083      	str	r3, [r0, #8]
  406904:	68eb      	ldr	r3, [r5, #12]
  406906:	60c3      	str	r3, [r0, #12]
  406908:	2a24      	cmp	r2, #36	; 0x24
  40690a:	d017      	beq.n	40693c <_realloc_r+0x2e4>
  40690c:	f100 0310 	add.w	r3, r0, #16
  406910:	f105 0210 	add.w	r2, r5, #16
  406914:	e6e7      	b.n	4066e6 <_realloc_r+0x8e>
  406916:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40691a:	f023 0303 	bic.w	r3, r3, #3
  40691e:	441c      	add	r4, r3
  406920:	462e      	mov	r6, r5
  406922:	e6f9      	b.n	406718 <_realloc_r+0xc0>
  406924:	68a9      	ldr	r1, [r5, #8]
  406926:	f8ca 1010 	str.w	r1, [sl, #16]
  40692a:	68e9      	ldr	r1, [r5, #12]
  40692c:	f8ca 1014 	str.w	r1, [sl, #20]
  406930:	2a24      	cmp	r2, #36	; 0x24
  406932:	d00c      	beq.n	40694e <_realloc_r+0x2f6>
  406934:	3510      	adds	r5, #16
  406936:	f10a 0218 	add.w	r2, sl, #24
  40693a:	e7b9      	b.n	4068b0 <_realloc_r+0x258>
  40693c:	692b      	ldr	r3, [r5, #16]
  40693e:	6103      	str	r3, [r0, #16]
  406940:	696b      	ldr	r3, [r5, #20]
  406942:	6143      	str	r3, [r0, #20]
  406944:	f105 0218 	add.w	r2, r5, #24
  406948:	f100 0318 	add.w	r3, r0, #24
  40694c:	e6cb      	b.n	4066e6 <_realloc_r+0x8e>
  40694e:	692a      	ldr	r2, [r5, #16]
  406950:	f8ca 2018 	str.w	r2, [sl, #24]
  406954:	696a      	ldr	r2, [r5, #20]
  406956:	f8ca 201c 	str.w	r2, [sl, #28]
  40695a:	3518      	adds	r5, #24
  40695c:	f10a 0220 	add.w	r2, sl, #32
  406960:	e7a6      	b.n	4068b0 <_realloc_r+0x258>
  406962:	4632      	mov	r2, r6
  406964:	e77f      	b.n	406866 <_realloc_r+0x20e>
  406966:	4629      	mov	r1, r5
  406968:	4630      	mov	r0, r6
  40696a:	9301      	str	r3, [sp, #4]
  40696c:	f7ff fe10 	bl	406590 <memmove>
  406970:	9b01      	ldr	r3, [sp, #4]
  406972:	e77e      	b.n	406872 <_realloc_r+0x21a>
  406974:	68a9      	ldr	r1, [r5, #8]
  406976:	f8ca 1010 	str.w	r1, [sl, #16]
  40697a:	68e9      	ldr	r1, [r5, #12]
  40697c:	f8ca 1014 	str.w	r1, [sl, #20]
  406980:	2a24      	cmp	r2, #36	; 0x24
  406982:	d003      	beq.n	40698c <_realloc_r+0x334>
  406984:	3510      	adds	r5, #16
  406986:	f10a 0218 	add.w	r2, sl, #24
  40698a:	e76c      	b.n	406866 <_realloc_r+0x20e>
  40698c:	692a      	ldr	r2, [r5, #16]
  40698e:	f8ca 2018 	str.w	r2, [sl, #24]
  406992:	696a      	ldr	r2, [r5, #20]
  406994:	f8ca 201c 	str.w	r2, [sl, #28]
  406998:	3518      	adds	r5, #24
  40699a:	f10a 0220 	add.w	r2, sl, #32
  40699e:	e762      	b.n	406866 <_realloc_r+0x20e>
  4069a0:	20400440 	.word	0x20400440

004069a4 <__sread>:
  4069a4:	b510      	push	{r4, lr}
  4069a6:	460c      	mov	r4, r1
  4069a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4069ac:	f000 f9f6 	bl	406d9c <_read_r>
  4069b0:	2800      	cmp	r0, #0
  4069b2:	db03      	blt.n	4069bc <__sread+0x18>
  4069b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4069b6:	4403      	add	r3, r0
  4069b8:	6523      	str	r3, [r4, #80]	; 0x50
  4069ba:	bd10      	pop	{r4, pc}
  4069bc:	89a3      	ldrh	r3, [r4, #12]
  4069be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4069c2:	81a3      	strh	r3, [r4, #12]
  4069c4:	bd10      	pop	{r4, pc}
  4069c6:	bf00      	nop

004069c8 <__swrite>:
  4069c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4069cc:	4616      	mov	r6, r2
  4069ce:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4069d2:	461f      	mov	r7, r3
  4069d4:	05d3      	lsls	r3, r2, #23
  4069d6:	460c      	mov	r4, r1
  4069d8:	4605      	mov	r5, r0
  4069da:	d507      	bpl.n	4069ec <__swrite+0x24>
  4069dc:	2200      	movs	r2, #0
  4069de:	2302      	movs	r3, #2
  4069e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4069e4:	f000 f9c4 	bl	406d70 <_lseek_r>
  4069e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4069ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4069f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4069f4:	81a2      	strh	r2, [r4, #12]
  4069f6:	463b      	mov	r3, r7
  4069f8:	4632      	mov	r2, r6
  4069fa:	4628      	mov	r0, r5
  4069fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406a00:	f000 b8a4 	b.w	406b4c <_write_r>

00406a04 <__sseek>:
  406a04:	b510      	push	{r4, lr}
  406a06:	460c      	mov	r4, r1
  406a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406a0c:	f000 f9b0 	bl	406d70 <_lseek_r>
  406a10:	89a3      	ldrh	r3, [r4, #12]
  406a12:	1c42      	adds	r2, r0, #1
  406a14:	bf0e      	itee	eq
  406a16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  406a1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  406a1e:	6520      	strne	r0, [r4, #80]	; 0x50
  406a20:	81a3      	strh	r3, [r4, #12]
  406a22:	bd10      	pop	{r4, pc}

00406a24 <__sclose>:
  406a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406a28:	f000 b908 	b.w	406c3c <_close_r>

00406a2c <__swbuf_r>:
  406a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406a2e:	460d      	mov	r5, r1
  406a30:	4614      	mov	r4, r2
  406a32:	4606      	mov	r6, r0
  406a34:	b110      	cbz	r0, 406a3c <__swbuf_r+0x10>
  406a36:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406a38:	2b00      	cmp	r3, #0
  406a3a:	d04b      	beq.n	406ad4 <__swbuf_r+0xa8>
  406a3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406a40:	69a3      	ldr	r3, [r4, #24]
  406a42:	60a3      	str	r3, [r4, #8]
  406a44:	b291      	uxth	r1, r2
  406a46:	0708      	lsls	r0, r1, #28
  406a48:	d539      	bpl.n	406abe <__swbuf_r+0x92>
  406a4a:	6923      	ldr	r3, [r4, #16]
  406a4c:	2b00      	cmp	r3, #0
  406a4e:	d036      	beq.n	406abe <__swbuf_r+0x92>
  406a50:	b2ed      	uxtb	r5, r5
  406a52:	0489      	lsls	r1, r1, #18
  406a54:	462f      	mov	r7, r5
  406a56:	d515      	bpl.n	406a84 <__swbuf_r+0x58>
  406a58:	6822      	ldr	r2, [r4, #0]
  406a5a:	6961      	ldr	r1, [r4, #20]
  406a5c:	1ad3      	subs	r3, r2, r3
  406a5e:	428b      	cmp	r3, r1
  406a60:	da1c      	bge.n	406a9c <__swbuf_r+0x70>
  406a62:	3301      	adds	r3, #1
  406a64:	68a1      	ldr	r1, [r4, #8]
  406a66:	1c50      	adds	r0, r2, #1
  406a68:	3901      	subs	r1, #1
  406a6a:	60a1      	str	r1, [r4, #8]
  406a6c:	6020      	str	r0, [r4, #0]
  406a6e:	7015      	strb	r5, [r2, #0]
  406a70:	6962      	ldr	r2, [r4, #20]
  406a72:	429a      	cmp	r2, r3
  406a74:	d01a      	beq.n	406aac <__swbuf_r+0x80>
  406a76:	89a3      	ldrh	r3, [r4, #12]
  406a78:	07db      	lsls	r3, r3, #31
  406a7a:	d501      	bpl.n	406a80 <__swbuf_r+0x54>
  406a7c:	2d0a      	cmp	r5, #10
  406a7e:	d015      	beq.n	406aac <__swbuf_r+0x80>
  406a80:	4638      	mov	r0, r7
  406a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406a84:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406a86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406a8a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  406a8e:	81a2      	strh	r2, [r4, #12]
  406a90:	6822      	ldr	r2, [r4, #0]
  406a92:	6661      	str	r1, [r4, #100]	; 0x64
  406a94:	6961      	ldr	r1, [r4, #20]
  406a96:	1ad3      	subs	r3, r2, r3
  406a98:	428b      	cmp	r3, r1
  406a9a:	dbe2      	blt.n	406a62 <__swbuf_r+0x36>
  406a9c:	4621      	mov	r1, r4
  406a9e:	4630      	mov	r0, r6
  406aa0:	f7ff f87a 	bl	405b98 <_fflush_r>
  406aa4:	b940      	cbnz	r0, 406ab8 <__swbuf_r+0x8c>
  406aa6:	6822      	ldr	r2, [r4, #0]
  406aa8:	2301      	movs	r3, #1
  406aaa:	e7db      	b.n	406a64 <__swbuf_r+0x38>
  406aac:	4621      	mov	r1, r4
  406aae:	4630      	mov	r0, r6
  406ab0:	f7ff f872 	bl	405b98 <_fflush_r>
  406ab4:	2800      	cmp	r0, #0
  406ab6:	d0e3      	beq.n	406a80 <__swbuf_r+0x54>
  406ab8:	f04f 37ff 	mov.w	r7, #4294967295
  406abc:	e7e0      	b.n	406a80 <__swbuf_r+0x54>
  406abe:	4621      	mov	r1, r4
  406ac0:	4630      	mov	r0, r6
  406ac2:	f7fe ff55 	bl	405970 <__swsetup_r>
  406ac6:	2800      	cmp	r0, #0
  406ac8:	d1f6      	bne.n	406ab8 <__swbuf_r+0x8c>
  406aca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406ace:	6923      	ldr	r3, [r4, #16]
  406ad0:	b291      	uxth	r1, r2
  406ad2:	e7bd      	b.n	406a50 <__swbuf_r+0x24>
  406ad4:	f7ff f8b8 	bl	405c48 <__sinit>
  406ad8:	e7b0      	b.n	406a3c <__swbuf_r+0x10>
  406ada:	bf00      	nop

00406adc <_wcrtomb_r>:
  406adc:	b5f0      	push	{r4, r5, r6, r7, lr}
  406ade:	4606      	mov	r6, r0
  406ae0:	b085      	sub	sp, #20
  406ae2:	461f      	mov	r7, r3
  406ae4:	b189      	cbz	r1, 406b0a <_wcrtomb_r+0x2e>
  406ae6:	4c10      	ldr	r4, [pc, #64]	; (406b28 <_wcrtomb_r+0x4c>)
  406ae8:	4d10      	ldr	r5, [pc, #64]	; (406b2c <_wcrtomb_r+0x50>)
  406aea:	6824      	ldr	r4, [r4, #0]
  406aec:	6b64      	ldr	r4, [r4, #52]	; 0x34
  406aee:	2c00      	cmp	r4, #0
  406af0:	bf08      	it	eq
  406af2:	462c      	moveq	r4, r5
  406af4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406af8:	47a0      	blx	r4
  406afa:	1c43      	adds	r3, r0, #1
  406afc:	d103      	bne.n	406b06 <_wcrtomb_r+0x2a>
  406afe:	2200      	movs	r2, #0
  406b00:	238a      	movs	r3, #138	; 0x8a
  406b02:	603a      	str	r2, [r7, #0]
  406b04:	6033      	str	r3, [r6, #0]
  406b06:	b005      	add	sp, #20
  406b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406b0a:	460c      	mov	r4, r1
  406b0c:	4906      	ldr	r1, [pc, #24]	; (406b28 <_wcrtomb_r+0x4c>)
  406b0e:	4a07      	ldr	r2, [pc, #28]	; (406b2c <_wcrtomb_r+0x50>)
  406b10:	6809      	ldr	r1, [r1, #0]
  406b12:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406b14:	2900      	cmp	r1, #0
  406b16:	bf08      	it	eq
  406b18:	4611      	moveq	r1, r2
  406b1a:	4622      	mov	r2, r4
  406b1c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  406b20:	a901      	add	r1, sp, #4
  406b22:	47a0      	blx	r4
  406b24:	e7e9      	b.n	406afa <_wcrtomb_r+0x1e>
  406b26:	bf00      	nop
  406b28:	20400014 	.word	0x20400014
  406b2c:	20400854 	.word	0x20400854

00406b30 <__ascii_wctomb>:
  406b30:	b121      	cbz	r1, 406b3c <__ascii_wctomb+0xc>
  406b32:	2aff      	cmp	r2, #255	; 0xff
  406b34:	d804      	bhi.n	406b40 <__ascii_wctomb+0x10>
  406b36:	700a      	strb	r2, [r1, #0]
  406b38:	2001      	movs	r0, #1
  406b3a:	4770      	bx	lr
  406b3c:	4608      	mov	r0, r1
  406b3e:	4770      	bx	lr
  406b40:	238a      	movs	r3, #138	; 0x8a
  406b42:	6003      	str	r3, [r0, #0]
  406b44:	f04f 30ff 	mov.w	r0, #4294967295
  406b48:	4770      	bx	lr
  406b4a:	bf00      	nop

00406b4c <_write_r>:
  406b4c:	b570      	push	{r4, r5, r6, lr}
  406b4e:	460d      	mov	r5, r1
  406b50:	4c08      	ldr	r4, [pc, #32]	; (406b74 <_write_r+0x28>)
  406b52:	4611      	mov	r1, r2
  406b54:	4606      	mov	r6, r0
  406b56:	461a      	mov	r2, r3
  406b58:	4628      	mov	r0, r5
  406b5a:	2300      	movs	r3, #0
  406b5c:	6023      	str	r3, [r4, #0]
  406b5e:	f7f9 fe95 	bl	40088c <_write>
  406b62:	1c43      	adds	r3, r0, #1
  406b64:	d000      	beq.n	406b68 <_write_r+0x1c>
  406b66:	bd70      	pop	{r4, r5, r6, pc}
  406b68:	6823      	ldr	r3, [r4, #0]
  406b6a:	2b00      	cmp	r3, #0
  406b6c:	d0fb      	beq.n	406b66 <_write_r+0x1a>
  406b6e:	6033      	str	r3, [r6, #0]
  406b70:	bd70      	pop	{r4, r5, r6, pc}
  406b72:	bf00      	nop
  406b74:	2040c844 	.word	0x2040c844

00406b78 <__register_exitproc>:
  406b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406b7c:	4d2c      	ldr	r5, [pc, #176]	; (406c30 <__register_exitproc+0xb8>)
  406b7e:	4606      	mov	r6, r0
  406b80:	6828      	ldr	r0, [r5, #0]
  406b82:	4698      	mov	r8, r3
  406b84:	460f      	mov	r7, r1
  406b86:	4691      	mov	r9, r2
  406b88:	f7ff fc1e 	bl	4063c8 <__retarget_lock_acquire_recursive>
  406b8c:	4b29      	ldr	r3, [pc, #164]	; (406c34 <__register_exitproc+0xbc>)
  406b8e:	681c      	ldr	r4, [r3, #0]
  406b90:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  406b94:	2b00      	cmp	r3, #0
  406b96:	d03e      	beq.n	406c16 <__register_exitproc+0x9e>
  406b98:	685a      	ldr	r2, [r3, #4]
  406b9a:	2a1f      	cmp	r2, #31
  406b9c:	dc1c      	bgt.n	406bd8 <__register_exitproc+0x60>
  406b9e:	f102 0e01 	add.w	lr, r2, #1
  406ba2:	b176      	cbz	r6, 406bc2 <__register_exitproc+0x4a>
  406ba4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406ba8:	2401      	movs	r4, #1
  406baa:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  406bae:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  406bb2:	4094      	lsls	r4, r2
  406bb4:	4320      	orrs	r0, r4
  406bb6:	2e02      	cmp	r6, #2
  406bb8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  406bbc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406bc0:	d023      	beq.n	406c0a <__register_exitproc+0x92>
  406bc2:	3202      	adds	r2, #2
  406bc4:	f8c3 e004 	str.w	lr, [r3, #4]
  406bc8:	6828      	ldr	r0, [r5, #0]
  406bca:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  406bce:	f7ff fbfd 	bl	4063cc <__retarget_lock_release_recursive>
  406bd2:	2000      	movs	r0, #0
  406bd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406bd8:	4b17      	ldr	r3, [pc, #92]	; (406c38 <__register_exitproc+0xc0>)
  406bda:	b30b      	cbz	r3, 406c20 <__register_exitproc+0xa8>
  406bdc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406be0:	f7fd fae4 	bl	4041ac <malloc>
  406be4:	4603      	mov	r3, r0
  406be6:	b1d8      	cbz	r0, 406c20 <__register_exitproc+0xa8>
  406be8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  406bec:	6002      	str	r2, [r0, #0]
  406bee:	2100      	movs	r1, #0
  406bf0:	6041      	str	r1, [r0, #4]
  406bf2:	460a      	mov	r2, r1
  406bf4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406bf8:	f04f 0e01 	mov.w	lr, #1
  406bfc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406c00:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406c04:	2e00      	cmp	r6, #0
  406c06:	d0dc      	beq.n	406bc2 <__register_exitproc+0x4a>
  406c08:	e7cc      	b.n	406ba4 <__register_exitproc+0x2c>
  406c0a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  406c0e:	430c      	orrs	r4, r1
  406c10:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406c14:	e7d5      	b.n	406bc2 <__register_exitproc+0x4a>
  406c16:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  406c1a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  406c1e:	e7bb      	b.n	406b98 <__register_exitproc+0x20>
  406c20:	6828      	ldr	r0, [r5, #0]
  406c22:	f7ff fbd3 	bl	4063cc <__retarget_lock_release_recursive>
  406c26:	f04f 30ff 	mov.w	r0, #4294967295
  406c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406c2e:	bf00      	nop
  406c30:	20400850 	.word	0x20400850
  406c34:	0041239c 	.word	0x0041239c
  406c38:	004041ad 	.word	0x004041ad

00406c3c <_close_r>:
  406c3c:	b538      	push	{r3, r4, r5, lr}
  406c3e:	4c07      	ldr	r4, [pc, #28]	; (406c5c <_close_r+0x20>)
  406c40:	2300      	movs	r3, #0
  406c42:	4605      	mov	r5, r0
  406c44:	4608      	mov	r0, r1
  406c46:	6023      	str	r3, [r4, #0]
  406c48:	f7fb f934 	bl	401eb4 <_close>
  406c4c:	1c43      	adds	r3, r0, #1
  406c4e:	d000      	beq.n	406c52 <_close_r+0x16>
  406c50:	bd38      	pop	{r3, r4, r5, pc}
  406c52:	6823      	ldr	r3, [r4, #0]
  406c54:	2b00      	cmp	r3, #0
  406c56:	d0fb      	beq.n	406c50 <_close_r+0x14>
  406c58:	602b      	str	r3, [r5, #0]
  406c5a:	bd38      	pop	{r3, r4, r5, pc}
  406c5c:	2040c844 	.word	0x2040c844

00406c60 <_fclose_r>:
  406c60:	b570      	push	{r4, r5, r6, lr}
  406c62:	b159      	cbz	r1, 406c7c <_fclose_r+0x1c>
  406c64:	4605      	mov	r5, r0
  406c66:	460c      	mov	r4, r1
  406c68:	b110      	cbz	r0, 406c70 <_fclose_r+0x10>
  406c6a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406c6c:	2b00      	cmp	r3, #0
  406c6e:	d03c      	beq.n	406cea <_fclose_r+0x8a>
  406c70:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406c72:	07d8      	lsls	r0, r3, #31
  406c74:	d505      	bpl.n	406c82 <_fclose_r+0x22>
  406c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406c7a:	b92b      	cbnz	r3, 406c88 <_fclose_r+0x28>
  406c7c:	2600      	movs	r6, #0
  406c7e:	4630      	mov	r0, r6
  406c80:	bd70      	pop	{r4, r5, r6, pc}
  406c82:	89a3      	ldrh	r3, [r4, #12]
  406c84:	0599      	lsls	r1, r3, #22
  406c86:	d53c      	bpl.n	406d02 <_fclose_r+0xa2>
  406c88:	4621      	mov	r1, r4
  406c8a:	4628      	mov	r0, r5
  406c8c:	f7fe fee4 	bl	405a58 <__sflush_r>
  406c90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  406c92:	4606      	mov	r6, r0
  406c94:	b133      	cbz	r3, 406ca4 <_fclose_r+0x44>
  406c96:	69e1      	ldr	r1, [r4, #28]
  406c98:	4628      	mov	r0, r5
  406c9a:	4798      	blx	r3
  406c9c:	2800      	cmp	r0, #0
  406c9e:	bfb8      	it	lt
  406ca0:	f04f 36ff 	movlt.w	r6, #4294967295
  406ca4:	89a3      	ldrh	r3, [r4, #12]
  406ca6:	061a      	lsls	r2, r3, #24
  406ca8:	d422      	bmi.n	406cf0 <_fclose_r+0x90>
  406caa:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406cac:	b141      	cbz	r1, 406cc0 <_fclose_r+0x60>
  406cae:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406cb2:	4299      	cmp	r1, r3
  406cb4:	d002      	beq.n	406cbc <_fclose_r+0x5c>
  406cb6:	4628      	mov	r0, r5
  406cb8:	f7ff f8ec 	bl	405e94 <_free_r>
  406cbc:	2300      	movs	r3, #0
  406cbe:	6323      	str	r3, [r4, #48]	; 0x30
  406cc0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406cc2:	b121      	cbz	r1, 406cce <_fclose_r+0x6e>
  406cc4:	4628      	mov	r0, r5
  406cc6:	f7ff f8e5 	bl	405e94 <_free_r>
  406cca:	2300      	movs	r3, #0
  406ccc:	6463      	str	r3, [r4, #68]	; 0x44
  406cce:	f7fe ffe7 	bl	405ca0 <__sfp_lock_acquire>
  406cd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406cd4:	2200      	movs	r2, #0
  406cd6:	07db      	lsls	r3, r3, #31
  406cd8:	81a2      	strh	r2, [r4, #12]
  406cda:	d50e      	bpl.n	406cfa <_fclose_r+0x9a>
  406cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406cde:	f7ff fb71 	bl	4063c4 <__retarget_lock_close_recursive>
  406ce2:	f7fe ffe3 	bl	405cac <__sfp_lock_release>
  406ce6:	4630      	mov	r0, r6
  406ce8:	bd70      	pop	{r4, r5, r6, pc}
  406cea:	f7fe ffad 	bl	405c48 <__sinit>
  406cee:	e7bf      	b.n	406c70 <_fclose_r+0x10>
  406cf0:	6921      	ldr	r1, [r4, #16]
  406cf2:	4628      	mov	r0, r5
  406cf4:	f7ff f8ce 	bl	405e94 <_free_r>
  406cf8:	e7d7      	b.n	406caa <_fclose_r+0x4a>
  406cfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406cfc:	f7ff fb66 	bl	4063cc <__retarget_lock_release_recursive>
  406d00:	e7ec      	b.n	406cdc <_fclose_r+0x7c>
  406d02:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406d04:	f7ff fb60 	bl	4063c8 <__retarget_lock_acquire_recursive>
  406d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406d0c:	2b00      	cmp	r3, #0
  406d0e:	d1bb      	bne.n	406c88 <_fclose_r+0x28>
  406d10:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406d12:	f016 0601 	ands.w	r6, r6, #1
  406d16:	d1b1      	bne.n	406c7c <_fclose_r+0x1c>
  406d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406d1a:	f7ff fb57 	bl	4063cc <__retarget_lock_release_recursive>
  406d1e:	4630      	mov	r0, r6
  406d20:	bd70      	pop	{r4, r5, r6, pc}
  406d22:	bf00      	nop

00406d24 <_fstat_r>:
  406d24:	b538      	push	{r3, r4, r5, lr}
  406d26:	460b      	mov	r3, r1
  406d28:	4c07      	ldr	r4, [pc, #28]	; (406d48 <_fstat_r+0x24>)
  406d2a:	4605      	mov	r5, r0
  406d2c:	4611      	mov	r1, r2
  406d2e:	4618      	mov	r0, r3
  406d30:	2300      	movs	r3, #0
  406d32:	6023      	str	r3, [r4, #0]
  406d34:	f7fb f8c1 	bl	401eba <_fstat>
  406d38:	1c43      	adds	r3, r0, #1
  406d3a:	d000      	beq.n	406d3e <_fstat_r+0x1a>
  406d3c:	bd38      	pop	{r3, r4, r5, pc}
  406d3e:	6823      	ldr	r3, [r4, #0]
  406d40:	2b00      	cmp	r3, #0
  406d42:	d0fb      	beq.n	406d3c <_fstat_r+0x18>
  406d44:	602b      	str	r3, [r5, #0]
  406d46:	bd38      	pop	{r3, r4, r5, pc}
  406d48:	2040c844 	.word	0x2040c844

00406d4c <_isatty_r>:
  406d4c:	b538      	push	{r3, r4, r5, lr}
  406d4e:	4c07      	ldr	r4, [pc, #28]	; (406d6c <_isatty_r+0x20>)
  406d50:	2300      	movs	r3, #0
  406d52:	4605      	mov	r5, r0
  406d54:	4608      	mov	r0, r1
  406d56:	6023      	str	r3, [r4, #0]
  406d58:	f7fb f8b4 	bl	401ec4 <_isatty>
  406d5c:	1c43      	adds	r3, r0, #1
  406d5e:	d000      	beq.n	406d62 <_isatty_r+0x16>
  406d60:	bd38      	pop	{r3, r4, r5, pc}
  406d62:	6823      	ldr	r3, [r4, #0]
  406d64:	2b00      	cmp	r3, #0
  406d66:	d0fb      	beq.n	406d60 <_isatty_r+0x14>
  406d68:	602b      	str	r3, [r5, #0]
  406d6a:	bd38      	pop	{r3, r4, r5, pc}
  406d6c:	2040c844 	.word	0x2040c844

00406d70 <_lseek_r>:
  406d70:	b570      	push	{r4, r5, r6, lr}
  406d72:	460d      	mov	r5, r1
  406d74:	4c08      	ldr	r4, [pc, #32]	; (406d98 <_lseek_r+0x28>)
  406d76:	4611      	mov	r1, r2
  406d78:	4606      	mov	r6, r0
  406d7a:	461a      	mov	r2, r3
  406d7c:	4628      	mov	r0, r5
  406d7e:	2300      	movs	r3, #0
  406d80:	6023      	str	r3, [r4, #0]
  406d82:	f7fb f8a1 	bl	401ec8 <_lseek>
  406d86:	1c43      	adds	r3, r0, #1
  406d88:	d000      	beq.n	406d8c <_lseek_r+0x1c>
  406d8a:	bd70      	pop	{r4, r5, r6, pc}
  406d8c:	6823      	ldr	r3, [r4, #0]
  406d8e:	2b00      	cmp	r3, #0
  406d90:	d0fb      	beq.n	406d8a <_lseek_r+0x1a>
  406d92:	6033      	str	r3, [r6, #0]
  406d94:	bd70      	pop	{r4, r5, r6, pc}
  406d96:	bf00      	nop
  406d98:	2040c844 	.word	0x2040c844

00406d9c <_read_r>:
  406d9c:	b570      	push	{r4, r5, r6, lr}
  406d9e:	460d      	mov	r5, r1
  406da0:	4c08      	ldr	r4, [pc, #32]	; (406dc4 <_read_r+0x28>)
  406da2:	4611      	mov	r1, r2
  406da4:	4606      	mov	r6, r0
  406da6:	461a      	mov	r2, r3
  406da8:	4628      	mov	r0, r5
  406daa:	2300      	movs	r3, #0
  406dac:	6023      	str	r3, [r4, #0]
  406dae:	f7f9 fd4f 	bl	400850 <_read>
  406db2:	1c43      	adds	r3, r0, #1
  406db4:	d000      	beq.n	406db8 <_read_r+0x1c>
  406db6:	bd70      	pop	{r4, r5, r6, pc}
  406db8:	6823      	ldr	r3, [r4, #0]
  406dba:	2b00      	cmp	r3, #0
  406dbc:	d0fb      	beq.n	406db6 <_read_r+0x1a>
  406dbe:	6033      	str	r3, [r6, #0]
  406dc0:	bd70      	pop	{r4, r5, r6, pc}
  406dc2:	bf00      	nop
  406dc4:	2040c844 	.word	0x2040c844

00406dc8 <__aeabi_uldivmod>:
  406dc8:	b953      	cbnz	r3, 406de0 <__aeabi_uldivmod+0x18>
  406dca:	b94a      	cbnz	r2, 406de0 <__aeabi_uldivmod+0x18>
  406dcc:	2900      	cmp	r1, #0
  406dce:	bf08      	it	eq
  406dd0:	2800      	cmpeq	r0, #0
  406dd2:	bf1c      	itt	ne
  406dd4:	f04f 31ff 	movne.w	r1, #4294967295
  406dd8:	f04f 30ff 	movne.w	r0, #4294967295
  406ddc:	f000 b97a 	b.w	4070d4 <__aeabi_idiv0>
  406de0:	f1ad 0c08 	sub.w	ip, sp, #8
  406de4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406de8:	f000 f806 	bl	406df8 <__udivmoddi4>
  406dec:	f8dd e004 	ldr.w	lr, [sp, #4]
  406df0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406df4:	b004      	add	sp, #16
  406df6:	4770      	bx	lr

00406df8 <__udivmoddi4>:
  406df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406dfc:	468c      	mov	ip, r1
  406dfe:	460d      	mov	r5, r1
  406e00:	4604      	mov	r4, r0
  406e02:	9e08      	ldr	r6, [sp, #32]
  406e04:	2b00      	cmp	r3, #0
  406e06:	d151      	bne.n	406eac <__udivmoddi4+0xb4>
  406e08:	428a      	cmp	r2, r1
  406e0a:	4617      	mov	r7, r2
  406e0c:	d96d      	bls.n	406eea <__udivmoddi4+0xf2>
  406e0e:	fab2 fe82 	clz	lr, r2
  406e12:	f1be 0f00 	cmp.w	lr, #0
  406e16:	d00b      	beq.n	406e30 <__udivmoddi4+0x38>
  406e18:	f1ce 0c20 	rsb	ip, lr, #32
  406e1c:	fa01 f50e 	lsl.w	r5, r1, lr
  406e20:	fa20 fc0c 	lsr.w	ip, r0, ip
  406e24:	fa02 f70e 	lsl.w	r7, r2, lr
  406e28:	ea4c 0c05 	orr.w	ip, ip, r5
  406e2c:	fa00 f40e 	lsl.w	r4, r0, lr
  406e30:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  406e34:	0c25      	lsrs	r5, r4, #16
  406e36:	fbbc f8fa 	udiv	r8, ip, sl
  406e3a:	fa1f f987 	uxth.w	r9, r7
  406e3e:	fb0a cc18 	mls	ip, sl, r8, ip
  406e42:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  406e46:	fb08 f309 	mul.w	r3, r8, r9
  406e4a:	42ab      	cmp	r3, r5
  406e4c:	d90a      	bls.n	406e64 <__udivmoddi4+0x6c>
  406e4e:	19ed      	adds	r5, r5, r7
  406e50:	f108 32ff 	add.w	r2, r8, #4294967295
  406e54:	f080 8123 	bcs.w	40709e <__udivmoddi4+0x2a6>
  406e58:	42ab      	cmp	r3, r5
  406e5a:	f240 8120 	bls.w	40709e <__udivmoddi4+0x2a6>
  406e5e:	f1a8 0802 	sub.w	r8, r8, #2
  406e62:	443d      	add	r5, r7
  406e64:	1aed      	subs	r5, r5, r3
  406e66:	b2a4      	uxth	r4, r4
  406e68:	fbb5 f0fa 	udiv	r0, r5, sl
  406e6c:	fb0a 5510 	mls	r5, sl, r0, r5
  406e70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  406e74:	fb00 f909 	mul.w	r9, r0, r9
  406e78:	45a1      	cmp	r9, r4
  406e7a:	d909      	bls.n	406e90 <__udivmoddi4+0x98>
  406e7c:	19e4      	adds	r4, r4, r7
  406e7e:	f100 33ff 	add.w	r3, r0, #4294967295
  406e82:	f080 810a 	bcs.w	40709a <__udivmoddi4+0x2a2>
  406e86:	45a1      	cmp	r9, r4
  406e88:	f240 8107 	bls.w	40709a <__udivmoddi4+0x2a2>
  406e8c:	3802      	subs	r0, #2
  406e8e:	443c      	add	r4, r7
  406e90:	eba4 0409 	sub.w	r4, r4, r9
  406e94:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406e98:	2100      	movs	r1, #0
  406e9a:	2e00      	cmp	r6, #0
  406e9c:	d061      	beq.n	406f62 <__udivmoddi4+0x16a>
  406e9e:	fa24 f40e 	lsr.w	r4, r4, lr
  406ea2:	2300      	movs	r3, #0
  406ea4:	6034      	str	r4, [r6, #0]
  406ea6:	6073      	str	r3, [r6, #4]
  406ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406eac:	428b      	cmp	r3, r1
  406eae:	d907      	bls.n	406ec0 <__udivmoddi4+0xc8>
  406eb0:	2e00      	cmp	r6, #0
  406eb2:	d054      	beq.n	406f5e <__udivmoddi4+0x166>
  406eb4:	2100      	movs	r1, #0
  406eb6:	e886 0021 	stmia.w	r6, {r0, r5}
  406eba:	4608      	mov	r0, r1
  406ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406ec0:	fab3 f183 	clz	r1, r3
  406ec4:	2900      	cmp	r1, #0
  406ec6:	f040 808e 	bne.w	406fe6 <__udivmoddi4+0x1ee>
  406eca:	42ab      	cmp	r3, r5
  406ecc:	d302      	bcc.n	406ed4 <__udivmoddi4+0xdc>
  406ece:	4282      	cmp	r2, r0
  406ed0:	f200 80fa 	bhi.w	4070c8 <__udivmoddi4+0x2d0>
  406ed4:	1a84      	subs	r4, r0, r2
  406ed6:	eb65 0503 	sbc.w	r5, r5, r3
  406eda:	2001      	movs	r0, #1
  406edc:	46ac      	mov	ip, r5
  406ede:	2e00      	cmp	r6, #0
  406ee0:	d03f      	beq.n	406f62 <__udivmoddi4+0x16a>
  406ee2:	e886 1010 	stmia.w	r6, {r4, ip}
  406ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406eea:	b912      	cbnz	r2, 406ef2 <__udivmoddi4+0xfa>
  406eec:	2701      	movs	r7, #1
  406eee:	fbb7 f7f2 	udiv	r7, r7, r2
  406ef2:	fab7 fe87 	clz	lr, r7
  406ef6:	f1be 0f00 	cmp.w	lr, #0
  406efa:	d134      	bne.n	406f66 <__udivmoddi4+0x16e>
  406efc:	1beb      	subs	r3, r5, r7
  406efe:	0c3a      	lsrs	r2, r7, #16
  406f00:	fa1f fc87 	uxth.w	ip, r7
  406f04:	2101      	movs	r1, #1
  406f06:	fbb3 f8f2 	udiv	r8, r3, r2
  406f0a:	0c25      	lsrs	r5, r4, #16
  406f0c:	fb02 3318 	mls	r3, r2, r8, r3
  406f10:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406f14:	fb0c f308 	mul.w	r3, ip, r8
  406f18:	42ab      	cmp	r3, r5
  406f1a:	d907      	bls.n	406f2c <__udivmoddi4+0x134>
  406f1c:	19ed      	adds	r5, r5, r7
  406f1e:	f108 30ff 	add.w	r0, r8, #4294967295
  406f22:	d202      	bcs.n	406f2a <__udivmoddi4+0x132>
  406f24:	42ab      	cmp	r3, r5
  406f26:	f200 80d1 	bhi.w	4070cc <__udivmoddi4+0x2d4>
  406f2a:	4680      	mov	r8, r0
  406f2c:	1aed      	subs	r5, r5, r3
  406f2e:	b2a3      	uxth	r3, r4
  406f30:	fbb5 f0f2 	udiv	r0, r5, r2
  406f34:	fb02 5510 	mls	r5, r2, r0, r5
  406f38:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  406f3c:	fb0c fc00 	mul.w	ip, ip, r0
  406f40:	45a4      	cmp	ip, r4
  406f42:	d907      	bls.n	406f54 <__udivmoddi4+0x15c>
  406f44:	19e4      	adds	r4, r4, r7
  406f46:	f100 33ff 	add.w	r3, r0, #4294967295
  406f4a:	d202      	bcs.n	406f52 <__udivmoddi4+0x15a>
  406f4c:	45a4      	cmp	ip, r4
  406f4e:	f200 80b8 	bhi.w	4070c2 <__udivmoddi4+0x2ca>
  406f52:	4618      	mov	r0, r3
  406f54:	eba4 040c 	sub.w	r4, r4, ip
  406f58:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406f5c:	e79d      	b.n	406e9a <__udivmoddi4+0xa2>
  406f5e:	4631      	mov	r1, r6
  406f60:	4630      	mov	r0, r6
  406f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406f66:	f1ce 0420 	rsb	r4, lr, #32
  406f6a:	fa05 f30e 	lsl.w	r3, r5, lr
  406f6e:	fa07 f70e 	lsl.w	r7, r7, lr
  406f72:	fa20 f804 	lsr.w	r8, r0, r4
  406f76:	0c3a      	lsrs	r2, r7, #16
  406f78:	fa25 f404 	lsr.w	r4, r5, r4
  406f7c:	ea48 0803 	orr.w	r8, r8, r3
  406f80:	fbb4 f1f2 	udiv	r1, r4, r2
  406f84:	ea4f 4518 	mov.w	r5, r8, lsr #16
  406f88:	fb02 4411 	mls	r4, r2, r1, r4
  406f8c:	fa1f fc87 	uxth.w	ip, r7
  406f90:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406f94:	fb01 f30c 	mul.w	r3, r1, ip
  406f98:	42ab      	cmp	r3, r5
  406f9a:	fa00 f40e 	lsl.w	r4, r0, lr
  406f9e:	d909      	bls.n	406fb4 <__udivmoddi4+0x1bc>
  406fa0:	19ed      	adds	r5, r5, r7
  406fa2:	f101 30ff 	add.w	r0, r1, #4294967295
  406fa6:	f080 808a 	bcs.w	4070be <__udivmoddi4+0x2c6>
  406faa:	42ab      	cmp	r3, r5
  406fac:	f240 8087 	bls.w	4070be <__udivmoddi4+0x2c6>
  406fb0:	3902      	subs	r1, #2
  406fb2:	443d      	add	r5, r7
  406fb4:	1aeb      	subs	r3, r5, r3
  406fb6:	fa1f f588 	uxth.w	r5, r8
  406fba:	fbb3 f0f2 	udiv	r0, r3, r2
  406fbe:	fb02 3310 	mls	r3, r2, r0, r3
  406fc2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406fc6:	fb00 f30c 	mul.w	r3, r0, ip
  406fca:	42ab      	cmp	r3, r5
  406fcc:	d907      	bls.n	406fde <__udivmoddi4+0x1e6>
  406fce:	19ed      	adds	r5, r5, r7
  406fd0:	f100 38ff 	add.w	r8, r0, #4294967295
  406fd4:	d26f      	bcs.n	4070b6 <__udivmoddi4+0x2be>
  406fd6:	42ab      	cmp	r3, r5
  406fd8:	d96d      	bls.n	4070b6 <__udivmoddi4+0x2be>
  406fda:	3802      	subs	r0, #2
  406fdc:	443d      	add	r5, r7
  406fde:	1aeb      	subs	r3, r5, r3
  406fe0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406fe4:	e78f      	b.n	406f06 <__udivmoddi4+0x10e>
  406fe6:	f1c1 0720 	rsb	r7, r1, #32
  406fea:	fa22 f807 	lsr.w	r8, r2, r7
  406fee:	408b      	lsls	r3, r1
  406ff0:	fa05 f401 	lsl.w	r4, r5, r1
  406ff4:	ea48 0303 	orr.w	r3, r8, r3
  406ff8:	fa20 fe07 	lsr.w	lr, r0, r7
  406ffc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  407000:	40fd      	lsrs	r5, r7
  407002:	ea4e 0e04 	orr.w	lr, lr, r4
  407006:	fbb5 f9fc 	udiv	r9, r5, ip
  40700a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40700e:	fb0c 5519 	mls	r5, ip, r9, r5
  407012:	fa1f f883 	uxth.w	r8, r3
  407016:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40701a:	fb09 f408 	mul.w	r4, r9, r8
  40701e:	42ac      	cmp	r4, r5
  407020:	fa02 f201 	lsl.w	r2, r2, r1
  407024:	fa00 fa01 	lsl.w	sl, r0, r1
  407028:	d908      	bls.n	40703c <__udivmoddi4+0x244>
  40702a:	18ed      	adds	r5, r5, r3
  40702c:	f109 30ff 	add.w	r0, r9, #4294967295
  407030:	d243      	bcs.n	4070ba <__udivmoddi4+0x2c2>
  407032:	42ac      	cmp	r4, r5
  407034:	d941      	bls.n	4070ba <__udivmoddi4+0x2c2>
  407036:	f1a9 0902 	sub.w	r9, r9, #2
  40703a:	441d      	add	r5, r3
  40703c:	1b2d      	subs	r5, r5, r4
  40703e:	fa1f fe8e 	uxth.w	lr, lr
  407042:	fbb5 f0fc 	udiv	r0, r5, ip
  407046:	fb0c 5510 	mls	r5, ip, r0, r5
  40704a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40704e:	fb00 f808 	mul.w	r8, r0, r8
  407052:	45a0      	cmp	r8, r4
  407054:	d907      	bls.n	407066 <__udivmoddi4+0x26e>
  407056:	18e4      	adds	r4, r4, r3
  407058:	f100 35ff 	add.w	r5, r0, #4294967295
  40705c:	d229      	bcs.n	4070b2 <__udivmoddi4+0x2ba>
  40705e:	45a0      	cmp	r8, r4
  407060:	d927      	bls.n	4070b2 <__udivmoddi4+0x2ba>
  407062:	3802      	subs	r0, #2
  407064:	441c      	add	r4, r3
  407066:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40706a:	eba4 0408 	sub.w	r4, r4, r8
  40706e:	fba0 8902 	umull	r8, r9, r0, r2
  407072:	454c      	cmp	r4, r9
  407074:	46c6      	mov	lr, r8
  407076:	464d      	mov	r5, r9
  407078:	d315      	bcc.n	4070a6 <__udivmoddi4+0x2ae>
  40707a:	d012      	beq.n	4070a2 <__udivmoddi4+0x2aa>
  40707c:	b156      	cbz	r6, 407094 <__udivmoddi4+0x29c>
  40707e:	ebba 030e 	subs.w	r3, sl, lr
  407082:	eb64 0405 	sbc.w	r4, r4, r5
  407086:	fa04 f707 	lsl.w	r7, r4, r7
  40708a:	40cb      	lsrs	r3, r1
  40708c:	431f      	orrs	r7, r3
  40708e:	40cc      	lsrs	r4, r1
  407090:	6037      	str	r7, [r6, #0]
  407092:	6074      	str	r4, [r6, #4]
  407094:	2100      	movs	r1, #0
  407096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40709a:	4618      	mov	r0, r3
  40709c:	e6f8      	b.n	406e90 <__udivmoddi4+0x98>
  40709e:	4690      	mov	r8, r2
  4070a0:	e6e0      	b.n	406e64 <__udivmoddi4+0x6c>
  4070a2:	45c2      	cmp	sl, r8
  4070a4:	d2ea      	bcs.n	40707c <__udivmoddi4+0x284>
  4070a6:	ebb8 0e02 	subs.w	lr, r8, r2
  4070aa:	eb69 0503 	sbc.w	r5, r9, r3
  4070ae:	3801      	subs	r0, #1
  4070b0:	e7e4      	b.n	40707c <__udivmoddi4+0x284>
  4070b2:	4628      	mov	r0, r5
  4070b4:	e7d7      	b.n	407066 <__udivmoddi4+0x26e>
  4070b6:	4640      	mov	r0, r8
  4070b8:	e791      	b.n	406fde <__udivmoddi4+0x1e6>
  4070ba:	4681      	mov	r9, r0
  4070bc:	e7be      	b.n	40703c <__udivmoddi4+0x244>
  4070be:	4601      	mov	r1, r0
  4070c0:	e778      	b.n	406fb4 <__udivmoddi4+0x1bc>
  4070c2:	3802      	subs	r0, #2
  4070c4:	443c      	add	r4, r7
  4070c6:	e745      	b.n	406f54 <__udivmoddi4+0x15c>
  4070c8:	4608      	mov	r0, r1
  4070ca:	e708      	b.n	406ede <__udivmoddi4+0xe6>
  4070cc:	f1a8 0802 	sub.w	r8, r8, #2
  4070d0:	443d      	add	r5, r7
  4070d2:	e72b      	b.n	406f2c <__udivmoddi4+0x134>

004070d4 <__aeabi_idiv0>:
  4070d4:	4770      	bx	lr
  4070d6:	bf00      	nop
  4070d8:	454c4449 	.word	0x454c4449
  4070dc:	00000000 	.word	0x00000000
  4070e0:	51726d54 	.word	0x51726d54
  4070e4:	00000000 	.word	0x00000000
  4070e8:	20726d54 	.word	0x20726d54
  4070ec:	00637653 	.word	0x00637653
  4070f0:	0a05000d 	.word	0x0a05000d
  4070f4:	0000004b 	.word	0x0000004b
  4070f8:	00001932 	.word	0x00001932
  4070fc:	0e00008b 	.word	0x0e00008b
  407100:	32800008 	.word	0x32800008
  407104:	030a0205 	.word	0x030a0205
  407108:	0f022003 	.word	0x0f022003
  40710c:	00000a0f 	.word	0x00000a0f
  407110:	18180000 	.word	0x18180000
  407114:	00002020 	.word	0x00002020
  407118:	0a000000 	.word	0x0a000000
  40711c:	02020000 	.word	0x02020000
  407120:	18180000 	.word	0x18180000
  407124:	00030000 	.word	0x00030000
  407128:	00000000 	.word	0x00000000
  40712c:	18010002 	.word	0x18010002
  407130:	1e1e1e1e 	.word	0x1e1e1e1e
  407134:	1e1e1e1e 	.word	0x1e1e1e1e
  407138:	1e1e1e1e 	.word	0x1e1e1e1e
  40713c:	00001e1e 	.word	0x00001e1e
	...

00407150 <image_data_ar>:
  407150:	ffffffff ffffffff ffffffff ffffffff     ................
  407160:	ffffffff ffffffff ffffffff ffffffff     ................
  407170:	ffffffff ffffffff ffffffff ffffffff     ................
  407180:	ffffffff ffffffff ffffffff ffffffff     ................
  407190:	ffffffff ffffffff ffffffff ffffffff     ................
  4071a0:	ffffffff ffffffff ffffffff ffffffff     ................
  4071b0:	c4ffffff 7676c4c4 4f4f4f76 23373737     ......vvvOOO777#
  4071c0:	18182323 10101018 05090909 03030505     ##..............
  4071d0:	00000003 03000000 05050303 09090905     ................
  4071e0:	18101010 23231818 37373723 774f4f4f     ......###777OOOw
  4071f0:	c4c47777 ffffffc4 ffffffff ffffffff     ww..............
  407200:	ffffffff ffffffff ffffffff ffffffff     ................
  407210:	ffffffff ffffffff ffffffff ffffffff     ................
  407220:	ffffffff ffffffff ffffffff ffffffff     ................
  407230:	ffffffff ffffffff ffffffff ffffffff     ................
  407240:	ffffffff ffffffff ffffffff ffffffff     ................
  407250:	ffffffff ffffffff ffffffff ffffffff     ................
  407260:	ffffffff ffffffff ffffffff ffffffff     ................
  407270:	ffffffff ffffffff ffffffff ffffffff     ................
  407280:	ffffffff ffffffff ffffffff ffffffff     ................
  407290:	ffffffff ffffffff ffffffff ffffffff     ................
  4072a0:	ffffffff ffffffff ffffffff 78dfdfdf     ...............x
  4072b0:	3f3f7878 1d1d1d3f 00070707 00000000     xx???...........
	...
  4072fc:	07070700 3f1d1d1d 78783f3f e2e2e278     .......???xxx...
  40730c:	ffffffff ffffffff ffffffff ffffffff     ................
  40731c:	ffffffff ffffffff ffffffff ffffffff     ................
  40732c:	ffffffff ffffffff ffffffff ffffffff     ................
  40733c:	ffffffff ffffffff ffffffff ffffffff     ................
  40734c:	ffffffff ffffffff ffffffff ffffffff     ................
  40735c:	ffffffff ffffffff ffffffff ffffffff     ................
  40736c:	ffffffff ffffffff ffffffff ffffffff     ................
  40737c:	ffffffff ffffffff ffffffff ffffffff     ................
  40738c:	ffffffff ffffffff ffffffff ffffffff     ................
  40739c:	ffffffff ffffffff ffffffff a9ffffff     ................
  4073ac:	4747a9a9 1b1b1b47 00020202 00000000     ..GGG...........
	...
  407410:	03030300 491b1b1b a9a94949 ffffffa9     .......III......
  407420:	ffffffff ffffffff ffffffff ffffffff     ................
  407430:	ffffffff ffffffff ffffffff ffffffff     ................
  407440:	ffffffff ffffffff ffffffff ffffffff     ................
  407450:	ffffffff ffffffff ffffffff ffffffff     ................
  407460:	ffffffff ffffffff ffffffff ffffffff     ................
  407470:	ffffffff ffffffff ffffffff ffffffff     ................
  407480:	ffffffff ffffffff ffffffff ffffffff     ................
  407490:	ffffffff ffffffff ffffffff ffffffff     ................
  4074a0:	ffffffff ffffffff b7b7ffff 444444b7     .............DDD
  4074b0:	00121212 00000000 00000000 00000000     ................
	...
  407524:	13131300 b9444444 ffffb9b9 ffffffff     ....DDD.........
  407534:	ffffffff ffffffff ffffffff ffffffff     ................
  407544:	ffffffff ffffffff ffffffff ffffffff     ................
  407554:	ffffffff ffffffff ffffffff ffffffff     ................
  407564:	ffffffff ffffffff ffffffff ffffffff     ................
  407574:	ffffffff ffffffff ffffffff ffffffff     ................
  407584:	ffffffff ffffffff ffffffff ffffffff     ................
  407594:	ffffffff ffffffff ffffffff ffffffff     ................
  4075a4:	ffffffff f9f9f9ff 1e6c6c6c 01011e1e     ........lll.....
  4075b4:	00000001 00000000 00000000 00000000     ................
	...
  407630:	01000000 1e1e0101 6c6c6c1e fff9f9f9     .........lll....
  407640:	ffffffff ffffffff ffffffff ffffffff     ................
  407650:	ffffffff ffffffff ffffffff ffffffff     ................
  407660:	ffffffff ffffffff ffffffff ffffffff     ................
  407670:	ffffffff ffffffff ffffffff ffffffff     ................
  407680:	ffffffff ffffffff ffffffff ffffffff     ................
  407690:	ffffffff ffffffff ffffffff ffffffff     ................
  4076a0:	ffffffff ffffffff f3ffffff 5a5af3f3     ..............ZZ
  4076b0:	0f0f0f5a 00000000 00000000 00000000     Z...............
	...
  4076e4:	11040404 21211111 2c2c2c21 3a323232     ......!!!,,,222:
  4076f4:	44443a3a 4e4e4e44 444e4e4e 3a3a4444     ::DDDNNNNNNDDD::
  407704:	3232323a 212c2c2c 11112121 04040411     :222,,,!!!......
	...
  407744:	5a0f0f0f f3f35a5a fffffff3 ffffffff     ...ZZZ..........
  407754:	ffffffff ffffffff ffffffff ffffffff     ................
  407764:	ffffffff ffffffff ffffffff ffffffff     ................
  407774:	ffffffff ffffffff ffffffff ffffffff     ................
  407784:	ffffffff ffffffff ffffffff ffffffff     ................
  407794:	ffffffff ffffffff ffffffff ffffffff     ................
  4077a4:	ffffffff ffffffff eaeaeaff 0c515151     ............QQQ.
  4077b4:	00000c0c 00000000 00000000 00000000     ................
	...
  4077dc:	0d0d0d00 54292929 81815454 bfbfbf81     ....)))TTT......
  4077ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4077fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40780c:	ffffffff ffffffff ffffffff ffffffff     ................
  40781c:	80bfbfbf 54548080 28282854 000c0c0c     ......TTT(((....
	...
  407850:	0c0c0000 5252520c ffeaeaea ffffffff     .....RRR........
  407860:	ffffffff ffffffff ffffffff ffffffff     ................
  407870:	ffffffff ffffffff ffffffff ffffffff     ................
  407880:	ffffffff ffffffff ffffffff ffffffff     ................
  407890:	ffffffff ffffffff ffffffff ffffffff     ................
  4078a0:	ffffffff ffffffff ffffffff f9ffffff     ................
  4078b0:	5454f9f9 09090954 00000000 00000000     ..TTT...........
	...
  4078d8:	09090900 622e2e2e bfbf6262 ffffffbf     .......bbb......
  4078e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4078f8:	ffffffff ffffffff ffffffff ffffffff     ................
  407908:	ffffffff ffffffff ffffffff ffffffff     ................
  407918:	ffffffff ffffffff ffffffff ffffffff     ................
  407928:	ffffffff ffffffff bdffffff 6161bdbd     ..............aa
  407938:	2e2e2e61 00090909 00000000 00000000     a...............
	...
  407960:	54090909 fcfc5454 fffffffc ffffffff     ...TTT..........
  407970:	ffffffff ffffffff ffffffff ffffffff     ................
  407980:	ffffffff ffffffff ffffffff ffffffff     ................
  407990:	ffffffff ffffffff ffffffff ffffffff     ................
  4079a0:	ffffffff ffffffff ffffffff ffffffff     ................
  4079b0:	ffffffff 15949494 00001515 00000000     ................
	...
  4079d8:	27060606 6b6b2727 f3f3f36b ffffffff     ...'''kkk.......
  4079e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4079f8:	ffffffff ffffffff ffffffff ffffffff     ................
  407a08:	ffffffff ffffffff ffffffff ffffffff     ................
  407a18:	ffffffff ffffffff ffffffff ffffffff     ................
  407a28:	ffffffff ffffffff ffffffff ffffffff     ................
  407a38:	ffffffff ffffffff ffffffff 81f9f9f9     ................
  407a48:	32328181 07070732 00000000 00000000     ..222...........
	...
  407a6c:	13130000 8a8a8a13 ffffffff ffffffff     ................
  407a7c:	ffffffff ffffffff ffffffff ffffffff     ................
  407a8c:	ffffffff ffffffff ffffffff ffffffff     ................
  407a9c:	ffffffff ffffffff ffffffff ffffffff     ................
  407aac:	ffffffff ffffffff d5d5ffff 323232d5     .............222
  407abc:	00010101 00000000 00000000 00000000     ................
	...
  407ad8:	1a1a0000 6c6c6c1a fff3f3f3 ffffffff     .....lll........
  407ae8:	ffffffff ffffffff ffffffff ffffffff     ................
  407af8:	ffffffff ffffffff ffffffff ffffffff     ................
  407b08:	ffffffff ffffffff ffffffff ffffffff     ................
  407b18:	ffffffff ffffffff ffffffff ffffffff     ................
  407b28:	ffffffff ffffffff ffffffff ffffffff     ................
  407b38:	ffffffff ffffffff ffffffff ffffffff     ................
  407b48:	ffffffff ffffffff ffffffff f3f3f3ff     ................
  407b58:	1a6b6b6b 00001a1a 00000000 00000000     kkk.............
	...
  407b78:	01010100 d7323232 ffffd7d7 ffffffff     ....222.........
  407b88:	ffffffff ffffffff ffffffff ffffffff     ................
  407b98:	ffffffff ffffffff ffffffff ffffffff     ................
  407ba8:	ffffffff ffffffff ffffffff ffffffff     ................
  407bb8:	6bffffff 09096b6b 00000009 00000000     ...kkk..........
	...
  407bd8:	02020200 94272727 ffff9494 ffffffff     ....'''.........
  407be8:	ffffffff ffffffff ffffffff ffffffff     ................
  407bf8:	ffffffff ffffffff ffffffff ffffffff     ................
  407c08:	ffffffff ffffffff ffffffff ffffffff     ................
  407c18:	ffffffff ffffffff ffffffff ffffffff     ................
  407c28:	ffffffff ffffffff ffffffff ffffffff     ................
  407c38:	ffffffff ffffffff ffffffff ffffffff     ................
  407c48:	ffffffff ffffffff ffffffff ffffffff     ................
  407c58:	ffffffff ffffffff ffffffff 9393ffff     ................
  407c68:	27272793 00020202 00000000 00000000     .'''............
	...
  407c84:	09000000 6c6c0909 ffffff6c ffffffff     ......lll.......
  407c94:	ffffffff ffffffff ffffffff ffffffff     ................
  407ca4:	ffffffff ffffffff ffffffff ffffffff     ................
  407cb4:	ffffffff ffffffff f0f0f0ff 00343434     ............444.
	...
  407cd8:	02000000 30300202 bbbbbb30 ffffffff     ......000.......
  407ce8:	ffffffff ffffffff ffffffff ffffffff     ................
  407cf8:	ffffffff ffffffff ffffffff ffffffff     ................
  407d08:	ffffffff ffffffff ffffffff ffffffff     ................
  407d18:	ffffffff ffffffff ffffffff ffffffff     ................
  407d28:	ffffffff ffffffff ffffffff ffffffff     ................
  407d38:	ffffffff ffffffff ffffffff ffffffff     ................
  407d48:	ffffffff ffffffff ffffffff ffffffff     ................
  407d58:	ffffffff ffffffff ffffffff ffffffff     ................
  407d68:	ffffffff ffffffff ffffffff 2eb9b9b9     ................
  407d78:	01012e2e 00000001 00000000 00000000     ................
	...
  407d94:	34343400 fff0f0f0 ffffffff ffffffff     .444............
  407da4:	ffffffff ffffffff ffffffff ffffffff     ................
  407db4:	ffffffff ffffffff ffffffff b5b5ffff     ................
  407dc4:	151515b5 00000000 00000000 00000000     ................
	...
  407de0:	991a1a1a ffff9999 ffffffff ffffffff     ................
  407df0:	ffffffff ffffffff ffffffff ffffffff     ................
  407e00:	ffffffff ffffffff ffffffff ffffffff     ................
  407e10:	ffffffff ffffffff ffffffff ffffffff     ................
  407e20:	ffffffff ffffffff ffffffff ffffffff     ................
  407e30:	ffffffff ffffffff ffffffff ffffffff     ................
  407e40:	ffffffff ffffffff ffffffff ffffffff     ................
  407e50:	ffffffff ffffffff ffffffff ffffffff     ................
  407e60:	ffffffff ffffffff ffffffff ffffffff     ................
  407e70:	ffffffff ffffffff ffffffff ffffffff     ................
  407e80:	a2a2ffff 1e1e1ea2 00000000 00000000     ................
	...
  407ea0:	ad141414 ffffadad ffffffff ffffffff     ................
  407eb0:	ffffffff ffffffff ffffffff ffffffff     ................
  407ec0:	ffffffff 6bffffff 06066b6b 00000006     .......kkk......
	...
  407ee0:	0f0f0000 7373730f ffffffff ffffffff     .....sss........
  407ef0:	ffffffff ffffffff ffffffff ffffffff     ................
  407f00:	ffffffff ffffffff ffffffff ffffffff     ................
  407f10:	ffffffff ffffffff ffffffff ffffffff     ................
  407f20:	ffffffff ffffffff ffffffff ffffffff     ................
  407f30:	ffffffff ffffffff ffffffff ffffffff     ................
  407f40:	ffffffff ffffffff ffffffff ffffffff     ................
  407f50:	ffffffff ffffffff ffffffff ffffffff     ................
  407f60:	ffffffff ffffffff ffffffff ffffffff     ................
  407f70:	ffffffff ffffffff ffffffff ffffffff     ................
  407f80:	ffffffff ffffffff ffffffff ffffffff     ................
  407f90:	0f717171 00000f0f 00000000 00000000     qqq.............
	...
  407fa8:	06000000 6b6b0606 ffffff6b ffffffff     ......kkk.......
  407fb8:	ffffffff ffffffff ffffffff ffffffff     ................
  407fc8:	ffffffff 014c4c4c 00000101 00000000     ....LLL.........
	...
  407fe4:	32010101 eded3232 ffffffed ffffffff     ...222..........
  407ff4:	ffffffff ffffffff ffffffff ffffffff     ................
  408004:	ffffffff ffffffff ffffffff ffffffff     ................
  408014:	ffffffff ffffffff ffffffff ffffffff     ................
  408024:	ffffffff ffffffff ffffffff ffffffff     ................
  408034:	ffffffff ffffffff ffffffff ffffffff     ................
  408044:	ffffffff ffffffff ffffffff ffffffff     ................
  408054:	ffffffff ffffffff ffffffff ffffffff     ................
  408064:	ffffffff ffffffff ffffffff ffffffff     ................
  408074:	ffffffff ffffffff ffffffff ffffffff     ................
  408084:	ffffffff ffffffff ffffffff ffffffff     ................
  408094:	ffffffff f0ffffff 3d3df0f0 0101013d     ..........===...
	...
  4080b8:	45454500 ffffffff ffffffff ffffffff     .EEE............
  4080c8:	ffffffff fcfcffff 3d3d3dfc 00000000     .........===....
	...
  4080e8:	0b0b0b00 ff7c7c7c ffffffff ffffffff     ....|||.........
  4080f8:	ffffffff ffffffff ffffffff ffffffff     ................
  408108:	ffffffff ffffffff ffffffff ffffffff     ................
  408118:	ffffffff ffffffff ffffffff ffffffff     ................
  408128:	ffffffff ffffffff ffffffff ffffffff     ................
  408138:	ffffffff ffffffff ffffffff ffffffff     ................
  408148:	ffffffff ffffffff ffffffff ffffffff     ................
  408158:	ffffffff ffffffff ffffffff ffffffff     ................
  408168:	ffffffff ffffffff ffffffff ffffffff     ................
  408178:	ffffffff ffffffff ffffffff ffffffff     ................
  408188:	ffffffff ffffffff ffffffff ffffffff     ................
  408198:	ffffffff ffffffff ffffffff ffffffff     ................
  4081a8:	858585ff 000c0c0c 00000000 00000000     ................
	...
  4081c4:	fc323232 fffffcfc ffffffff f3ffffff     222.............
  4081d4:	2a2af3f3 0000002a 00000000 00000000     ..***...........
	...
  4081ec:	28280000 d7d7d728 ffffffff ffffffff     ..(((...........
  4081fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40820c:	ffffffff ffffffff ffffffff ffffffff     ................
  40821c:	ffffffff ffffffff ffffffff ffffffff     ................
  40822c:	ffffffff ffffffff ffffffff ffffffff     ................
  40823c:	ffffffff ffffffff ffffffff ffffffff     ................
  40824c:	ffffffff ffffffff ffffffff ffffffff     ................
  40825c:	ffffffff ffffffff ffffffff ffffffff     ................
  40826c:	ffffffff ffffffff ffffffff ffffffff     ................
  40827c:	ffffffff ffffffff ffffffff ffffffff     ................
  40828c:	ffffffff ffffffff ffffffff ffffffff     ................
  40829c:	ffffffff ffffffff ffffffff ffffffff     ................
  4082ac:	ffffffff ffffffff 27d7d7d7 00002727     ...........'''..
	...
  4082cc:	29000000 f3f32929 fffffff3 1ee4e4e4     ...)))..........
  4082dc:	00001e1e 00000000 00000000 00000000     ................
  4082ec:	00000000 4f010101 ffff4f4f ffffffff     .......OOO......
  4082fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40830c:	ffffffff ffffffff ffffffff ffffffff     ................
  40831c:	ffffffff ffffffff ffffffff ffffffff     ................
  40832c:	ffffffff ffffffff ffffffff ffffffff     ................
  40833c:	ffffffff ffffffff ffffffff ffffffff     ................
  40834c:	ffffffff ffffffff ffffffff ffffffff     ................
  40835c:	ffffffff ffffffff ffffffff ffffffff     ................
  40836c:	ffffffff ffffffff ffffffff ffffffff     ................
  40837c:	ffffffff ffffffff ffffffff ffffffff     ................
  40838c:	ffffffff ffffffff ffffffff ffffffff     ................
  40839c:	ffffffff ffffffff ffffffff ffffffff     ................
  4083ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4083bc:	ffffffff 4c4cffff 0101014c 00000000     ......LLL.......
	...
  4083d8:	1e1e0000 e4e4e41e 002e2e2e 00000000     ................
	...
  4083f4:	04040400 ff737373 ffffffff ffffffff     ....sss.........
  408404:	ffffffff ffffffff ffffffff ffffffff     ................
  408414:	ffffffff ffffffff ffffffff ffffffff     ................
  408424:	ffffffff ffffffff ffffffff ffffffff     ................
  408434:	ffffffff ffffffff ffffffff ffffffff     ................
  408444:	ffffffff ffffffff ffffffff ffffffff     ................
  408454:	ffffffff ffffffff ffffffff ffffffff     ................
  408464:	ffffffff ffffffff ffffffff ffffffff     ................
  408474:	ffffffff ffffffff ffffffff ffffffff     ................
  408484:	ffffffff ffffffff ffffffff ffffffff     ................
  408494:	ffffffff ffffffff ffffffff ffffffff     ................
  4084a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4084b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4084c4:	ffffffff ffffffff 707070ff 00040404     .........ppp....
	...
  4084e4:	2e2e2e00 00050505 00000000 00000000     ................
  4084f4:	00000000 0b0b0000 9999990b ffffffff     ................
  408504:	ffffffff ffffffff ffffffff ffffffff     ................
  408514:	ffffffff ffffffff ffffffff ffffffff     ................
  408524:	ffffffff ffffffff ffffffff ffffffff     ................
  408534:	ffffffff ffffffff ffffffff ffffffff     ................
  408544:	ffffffff ffffffff ffffffff ffffffff     ................
  408554:	ffffffff ffffffff ffffffff ffffffff     ................
  408564:	ffffffff ffffffff ffffffff ffffffff     ................
  408574:	ffffffff ffffffff ffffffff ffffffff     ................
  408584:	ffffffff ffffffff ffffffff ffffffff     ................
  408594:	ffffffff ffffffff ffffffff ffffffff     ................
  4085a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4085b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4085c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4085d4:	ffffffff 0b989898 00000b0b 00000000     ................
	...
  4085ec:	06060600 000b0b0b 00000000 00000000     ................
  4085fc:	00000000 6d6d0000 ffffff6d ffffffff     ......mmm.......
  40860c:	ffffffff ffffffff ffffffff ffffffff     ................
  40861c:	ffffffff ffffffff ffffffff ffffffff     ................
  40862c:	ffffffff ffffffff ffffffff ffffffff     ................
  40863c:	ffffffff ffffffff ffffffff ffffffff     ................
  40864c:	ffffffff ffffffff ffffffff ffffffff     ................
  40865c:	ffffffff ffffffff ffffffff ffffffff     ................
  40866c:	ffffffff ffffffff ffffffff ffffffff     ................
  40867c:	ffffffff ffffffff ffffffff ffffffff     ................
  40868c:	ffffffff ffffffff ffffffff ffffffff     ................
  40869c:	ffffffff ffffffff ffffffff ffffffff     ................
  4086ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4086bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4086cc:	ffffffff ffffffff ffffffff ffffffff     ................
  4086dc:	ffffffff 6cffffff 00006c6c 00000000     .......lll......
	...
  4086f4:	0b0b0b00 00464646 00000000 00000000     ....FFF.........
  408704:	00000000 13130000 f9f9f913 ffffffff     ................
  408714:	ffffffff ffffffff ffffffff ffffffff     ................
  408724:	ffffffff ffffffff ffffffff ffffffff     ................
  408734:	ffffffff ffffffff ffffffff ffffffff     ................
  408744:	ffffffff ffffffff ffffffff ffffffff     ................
  408754:	ffffffff ffffffff ffffffff ffffffff     ................
  408764:	ffffffff ffffffff ffffffff ffffffff     ................
  408774:	ffffffff ffffffff ffffffff ffffffff     ................
  408784:	ffffffff ffffffff ffffffff ffffffff     ................
  408794:	ffffffff ffffffff ffffffff ffffffff     ................
  4087a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4087b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4087c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4087d4:	ffffffff ffffffff ffffffff ffffffff     ................
  4087e4:	ffffffff 13f9f9f9 00001313 00000000     ................
	...
  4087fc:	46464600 0fededed 00000f0f 00000000     .FFF............
	...
  408814:	52525200 ffffffff ffffffff ffffffff     .RRR............
  408824:	ffffffff ffffffff ffffffff ffffffff     ................
  408834:	ffffffff ffffffff ffffffff ffffffff     ................
  408844:	ffffffff ffffffff ffffffff ffffffff     ................
  408854:	ffffffff ffffffff ffffffff ffffffff     ................
  408864:	ffffffff ffffffff ffffffff ffffffff     ................
  408874:	ffffffff ffffffff ffffffff ffffffff     ................
  408884:	ffffffff ffffffff ffffffff ffffffff     ................
  408894:	ffffffff ffffffff ffffffff ffffffff     ................
  4088a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4088b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4088c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4088d4:	ffffffff ffffffff ffffffff ffffffff     ................
  4088e4:	ffffffff ffffffff ffffffff 00515151     ............QQQ.
	...
  408900:	0d0d0000 eaeaea0d 76ffffff 00007676     ...........vvv..
	...
  40891c:	06060600 ffcbcbcb ffffffff ffffffff     ................
  40892c:	ffffffff ffffffff ffffffff ffffffff     ................
  40893c:	ffffffff ffffffff ffffffff ffffffff     ................
  40894c:	ffffffff ffffffff ffffffff ffffffff     ................
  40895c:	ffffffff ffffffff ffffffff ffffffff     ................
  40896c:	ffffffff ffffffff ffffffff ffffffff     ................
  40897c:	ffffffff ffffffff ffffffff ffffffff     ................
  40898c:	ffffffff ffffffff ffffffff ffffffff     ................
  40899c:	ffffffff ffffffff ffffffff ffffffff     ................
  4089ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4089bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4089cc:	ffffffff ffffffff ffffffff ffffffff     ................
  4089dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4089ec:	ffffffff ffffffff d0d0d0ff 00060606     ................
	...
  408a08:	71710000 ffffff71 ffffffff 2020ffff     ..qqq.........  
  408a18:	00000020 00000000 00000000 00000000      ...............
  408a28:	ff303030 ffffffff ffffffff ffffffff     000.............
  408a38:	ffffffff ffffffff ffffffff ffffffff     ................
  408a48:	ffffffff ffffffff ffffffff ffffffff     ................
  408a58:	ffffffff ffffffff ffffffff ffffffff     ................
  408a68:	ffffffff ffffffff ffffffff ffffffff     ................
  408a78:	ffffffff ffffffff ffffffff ffffffff     ................
  408a88:	ffffffff ffffffff ffffffff ffffffff     ................
  408a98:	ffffffff ffffffff ffffffff ffffffff     ................
  408aa8:	ffffffff ffffffff ffffffff ffffffff     ................
  408ab8:	ffffffff ffffffff ffffffff ffffffff     ................
  408ac8:	ffffffff ffffffff ffffffff ffffffff     ................
  408ad8:	ffffffff ffffffff ffffffff ffffffff     ................
  408ae8:	ffffffff ffffffff ffffffff ffffffff     ................
  408af8:	ffffffff 2e2e2eff 00000000 00000000     ................
  408b08:	00000000 21000000 ffff2121 ffffffff     .......!!!......
  408b18:	ffffffff b3b3ffff 030303b3 00000000     ................
	...
  408b30:	93010101 ffff9393 ffffffff ffffffff     ................
  408b40:	ffffffff ffffffff ffffffff ffffffff     ................
  408b50:	ffffffff ffffffff ffffffff ffffffff     ................
  408b60:	ffffffff ffffffff ffffffff ffffffff     ................
  408b70:	ffffffff ffffffff ffffffff ffffffff     ................
  408b80:	ffffffff ffffffff ffffffff ffffffff     ................
  408b90:	ffffffff ffffffff ffffffff ffffffff     ................
  408ba0:	ffffffff ffffffff ffffffff ffffffff     ................
  408bb0:	ffffffff ffffffff ffffffff ffffffff     ................
  408bc0:	ffffffff ffffffff ffffffff ffffffff     ................
  408bd0:	ffffffff ffffffff ffffffff ffffffff     ................
  408be0:	ffffffff ffffffff ffffffff ffffffff     ................
  408bf0:	ffffffff ffffffff ffffffff ffffffff     ................
  408c00:	9191ffff 01010191 00000000 00000000     ................
  408c10:	00000000 ad030303 ffffadad ffffffff     ................
  408c20:	ffffffff ffffffff 3d3d3dff 00000000     .........===....
	...
  408c38:	17000000 fcfc1717 fffffffc ffffffff     ................
  408c48:	ffffffff ffffffff ffffffff ffffffff     ................
  408c58:	ffffffff ffffffff ffffffff ffffffff     ................
  408c68:	ffffffff ffffffff ffffffff 32dfdfdf     ...............2
  408c78:	4e4e3232 ffffff4e ffffffff ffffffff     22NNN...........
  408c88:	ffffffff ffffffff ffffffff ffffffff     ................
  408c98:	ffffffff f6f6ffff 3d3d3df6 f63d3d3d     .........======.
  408ca8:	fffff6f6 ffffffff ffffffff ffffffff     ................
  408cb8:	ffffffff ffffffff ffffffff ffffffff     ................
  408cc8:	4fffffff 32324f4f dfdfdf32 ffffffff     ...OOO222.......
  408cd8:	ffffffff ffffffff ffffffff ffffffff     ................
  408ce8:	ffffffff ffffffff ffffffff ffffffff     ................
  408cf8:	ffffffff ffffffff ffffffff fcffffff     ................
  408d08:	1717fcfc 00000017 00000000 00000000     ................
  408d18:	00000000 ff3d3d3d ffffffff ffffffff     ....===.........
  408d28:	ffffffff ffffffff e7e7e7ff 000c0c0c     ................
	...
  408d44:	5b5b0000 ffffff5b ffffffff ffffffff     ..[[[...........
  408d54:	ffffffff ffffffff ffffffff ffffffff     ................
  408d64:	ffffffff ffffffff ffffffff ffffffff     ................
  408d74:	ffffffff e2e2e2ff 00181818 00000000     ................
  408d84:	36363600 ffffffff ffffffff ffffffff     .666............
  408d94:	ffffffff ffffffff ffffffff f6ffffff     ................
  408da4:	2727f6f6 00000027 23000000 f3f32323     ..'''......###..
  408db4:	fffffff3 ffffffff ffffffff ffffffff     ................
  408dc4:	ffffffff ffffffff ffffffff 003d3d3d     ............===.
  408dd4:	00000000 17171700 ffdcdcdc ffffffff     ................
  408de4:	ffffffff ffffffff ffffffff ffffffff     ................
  408df4:	ffffffff ffffffff ffffffff ffffffff     ................
  408e04:	ffffffff ffffffff 5affffff 00005a5a     ...........ZZZ..
	...
  408e20:	0a0a0a00 ffe2e2e2 ffffffff ffffffff     ................
  408e30:	ffffffff ffffffff ffffffff 00696969     ............iii.
	...
  408e4c:	07070000 d5d5d507 ffffffff ffffffff     ................
  408e5c:	ffffffff ffffffff ffffffff ffffffff     ................
  408e6c:	ffffffff ffffffff ffffffff ffffffff     ................
  408e7c:	e2e2ffff 181818e2 00000000 00000000     ................
  408e8c:	00000000 ff373737 ffffffff ffffffff     ....777.........
  408e9c:	ffffffff ffffffff ffffffff 27f6f6f6     ...............'
  408eac:	00002727 00000000 00000000 23230000     ''............##
  408ebc:	f3f3f323 ffffffff ffffffff ffffffff     #...............
  408ecc:	ffffffff ffffffff 3d3d3dff 00000000     .........===....
	...
  408ee4:	dc171717 ffffdcdc ffffffff ffffffff     ................
  408ef4:	ffffffff ffffffff ffffffff ffffffff     ................
  408f04:	ffffffff ffffffff ffffffff ffffffff     ................
  408f14:	09dadada 00000909 00000000 00000000     ................
  408f24:	00000000 6b6b6b00 ffffffff ffffffff     .....kkk........
  408f34:	ffffffff ffffffff ffffffff ffffffff     ................
  408f44:	1dffffff 00001d1d 00000000 00000000     ................
  408f54:	00000000 34343400 ffffffff ffffffff     .....444........
  408f64:	ffffffff ffffffff ffffffff ffffffff     ................
  408f74:	ffffffff ffffffff ffffffff e2ffffff     ................
  408f84:	1818e2e2 00000018 00000000 00000000     ................
  408f94:	00000000 37000000 ffff3737 ffffffff     .......777......
  408fa4:	ffffffff ffffffff f6f6f6ff 00272727     ............'''.
	...
  408fc4:	23232300 fff3f3f3 ffffffff ffffffff     .###............
  408fd4:	ffffffff 3d3dffff 0000003d 00000000     ......===.......
	...
  408fec:	17000000 dcdc1717 ffffffdc ffffffff     ................
  408ffc:	ffffffff ffffffff ffffffff ffffffff     ................
  40900c:	ffffffff ffffffff ffffffff ffffffff     ................
  40901c:	00343434 00000000 00000000 00000000     444.............
  40902c:	1b1b0000 ffffff1b ffffffff ffffffff     ................
  40903c:	ffffffff ffffffff ffffffff ffffffff     ................
  40904c:	a8ffffff 0202a8a8 00000002 00000000     ................
  40905c:	00000000 01010100 ff999999 ffffffff     ................
  40906c:	ffffffff ffffffff ffffffff ffffffff     ................
  40907c:	ffffffff ffffffff ffffffff 1ae2e2e2     ................
  40908c:	00001a1a 00000000 00000000 00000000     ................
	...
  4090a4:	3d3d0000 ffffff3d ffffffff f6f6ffff     ..===...........
  4090b4:	272727f6 00000000 00000000 00000000     .'''............
	...
  4090d0:	f3232323 fffff3f3 ffffffff 3dffffff     ###............=
  4090e0:	00003d3d 00000000 00000000 00000000     ==..............
	...
  4090f8:	17170000 dcdcdc17 ffffffff ffffffff     ................
  409108:	ffffffff ffffffff ffffffff ffffffff     ................
  409118:	ffffffff ffffffff 9e9e9eff 00020202     ................
	...
  409130:	02000000 a2a20202 ffffffa2 ffffffff     ................
  409140:	ffffffff ffffffff ffffffff ffffffff     ................
  409150:	ffffffff ffffffff 3838ffff 00000038     ..........888...
	...
  40916c:	ff1a1a1a ffffffff ffffffff ffffffff     ................
  40917c:	ffffffff ffffffff ffffffff ffffffff     ................
  40918c:	f6f6f6ff 00181818 00000000 00000000     ................
	...
  4091b0:	45454500 ffffffff 2b2bffff 0000002b     .EEE......+++...
	...
  4091d8:	2b000000 ffff2b2b ffffffff 00444444     ...+++......DDD.
	...
  409204:	1a1a1a00 fff6f6f6 ffffffff ffffffff     ................
  409214:	ffffffff ffffffff ffffffff ffffffff     ................
  409224:	ffffffff 1a1a1aff 00000000 00000000     ................
  409234:	00000000 38000000 ffff3838 ffffffff     .......888......
  409244:	ffffffff ffffffff ffffffff ffffffff     ................
  409254:	ffffffff ffffffff ffffffff dcdcffff     ................
  409264:	0a0a0adc 00000000 00000000 00000000     ................
  409274:	65000000 ffff6565 ffffffff ffffffff     ...eee..........
  409284:	ffffffff ffffffff ffffffff ffffffff     ................
  409294:	999999ff 00000000 00000000 00000000     ................
	...
  4092b8:	0b0b0b00 e4ffffff 0101e4e4 00000001     ................
	...
  4092e0:	01000000 eaea0101 ffffffea 000b0b0b     ................
	...
  409310:	ff9e9e9e ffffffff ffffffff ffffffff     ................
  409320:	ffffffff ffffffff ffffffff 6464ffff     ..............dd
  409330:	00000064 00000000 00000000 00000000     d...............
  409340:	dc0a0a0a ffffdcdc ffffffff ffffffff     ................
  409350:	ffffffff ffffffff ffffffff ffffffff     ................
  409360:	ffffffff ffffffff ffffffff 5f5f5fff     .............___
	...
  40937c:	0a000000 e2e20a0a ffffffe2 ffffffff     ................
  40938c:	ffffffff ffffffff ffffffff ffffffff     ................
  40939c:	ffffffff 2c4d4d4d 2c2c2c2c 0d0d0d2c     ....MMM,,,,,,...
	...
  4093b8:	27000000 2e2e2727 7b7b7b2e ffffffff     ...'''...{{{....
  4093c8:	6262ffff 2c2c2c62 0a2c2c2c 00000a0a     ..bbb,,,,,,.....
	...
  4093e4:	2b2b2b00 642c2c2c ffff6464 ffffffff     .+++,,,ddd......
  4093f4:	2e7a7a7a 2c2c2e2e 0707072c 00000000     zzz...,,,.......
	...
  40940c:	2c030303 2c2c2c2c 4f4f4f2c ffffffff     ...,,,,,,OOO....
  40941c:	ffffffff ffffffff ffffffff ffffffff     ................
  40942c:	ffffffff e2ffffff 0a0ae2e2 0000000a     ................
	...
  409448:	ff5f5f5f ffffffff ffffffff ffffffff     ___.............
  409458:	ffffffff ffffffff ffffffff ffffffff     ................
  409468:	ffffffff ffffffff ffffffff ffffffff     ................
  409478:	00181818 00000000 00000000 00000000     ................
  409488:	3b3b0000 ffffff3b ffffffff ffffffff     ..;;;...........
  409498:	ffffffff ffffffff ffffffff ffffffff     ................
  4094a8:	ffffffff ffffffff 525252ff 00000000     .........RRR....
	...
  4094c0:	69000000 ffff6969 ffffffff ffffffff     ...iii..........
  4094d0:	ffffffff ffffffff 41ffffff 00004141     ...........AAA..
	...
  4094ec:	85858500 ffffffff ffffffff ffffffff     ................
  4094fc:	ffffffff ffffffff 323232ff 00000000     .........222....
	...
  409514:	a5000000 ffffa5a5 ffffffff ffffffff     ................
  409524:	ffffffff ffffffff ffffffff ffffffff     ................
  409534:	ffffffff 3affffff 00003a3a 00000000     .......:::......
	...
  40954c:	17171700 fffcfcfc ffffffff ffffffff     ................
  40955c:	ffffffff ffffffff ffffffff ffffffff     ................
  40956c:	ffffffff ffffffff ffffffff ffffffff     ................
  40957c:	ffffffff 01999999 00000101 00000000     ................
  40958c:	00000000 03030000 a9a9a903 ffffffff     ................
  40959c:	ffffffff ffffffff ffffffff ffffffff     ................
  4095ac:	ffffffff ffffffff ffffffff c9c9c9ff     ................
  4095bc:	00010101 00000000 00000000 2c000000     ...............,
  4095cc:	ffff2c2c ffffffff ffffffff ffffffff     ,,..............
  4095dc:	ffffffff a8ffffff 0000a8a8 00000000     ................
	...
  4095f4:	3a3a3a00 ffffffff ffffffff ffffffff     .:::............
  409604:	ffffffff ffffffff 848484ff 00000000     ................
	...
  40961c:	4a000000 ffff4a4a ffffffff ffffffff     ...JJJ..........
  40962c:	ffffffff ffffffff ffffffff ffffffff     ................
  40963c:	ffffffff 03a9a9a9 00000303 00000000     ................
  40964c:	00000000 01010000 99999901 dfffffff     ................
  40965c:	b1b1dfdf ffffffb1 ffffffff ffffffff     ................
  40966c:	ffffffff ffffffff ffffffff ffffffff     ................
  40967c:	ffffffff ffffffff ffffffff 32ffffff     ...............2
  40968c:	00003232 00000000 00000000 00000000     22..............
  40969c:	1e1e1e00 ffffffff ffffffff ffffffff     ................
  4096ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4096bc:	ffffffff ffffffff 001b1b1b 00000000     ................
  4096cc:	00000000 11000000 ffff1111 ffffffff     ................
  4096dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4096ec:	1111ffff 00000011 00000000 00000000     ................
  4096fc:	1a1a1a00 ffffffff ffffffff ffffffff     ................
  40970c:	ffffffff ffffffff fcfcfcff 000a0a0a     ................
	...
  409724:	25000000 ffff2525 ffffffff ffffffff     ...%%%..........
  409734:	ffffffff ffffffff ffffffff ffffffff     ................
  409744:	ffffffff 001e1e1e 00000000 00000000     ................
  409754:	00000000 32320000 ffffff32 092c2c2c     ......222...,,,.
  409764:	09090909 0d0d0d09 ff989898 ffffffff     ................
  409774:	ffffffff ffffffff ffffffff ffffffff     ................
  409784:	ffffffff ffffffff ffffffff d2ffffff     ................
  409794:	0707d2d2 00000007 00000000 00000000     ................
  4097a4:	00000000 ff6f6f6f ffffffff ffffffff     ....ooo.........
  4097b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4097c4:	ffffffff ffffffff 00424242 00000000     ........BBB.....
  4097d4:	00000000 01000000 eaea0101 ffffffea     ................
  4097e4:	ffffffff ffffffff ffffffff ffffffff     ................
  4097f4:	3434ffff 00000034 00000000 00000000     ..444...........
  409804:	06060600 ffffffff ffffffff ffffffff     ................
  409814:	ffffffff ffffffff ffffffff 00272727     ............'''.
	...
  40982c:	0f000000 ffff0f0f ffffffff ffffffff     ................
  40983c:	ffffffff ffffffff ffffffff ffffffff     ................
  40984c:	6d6d6dff 00000000 00000000 00000000     .mmm............
  40985c:	07000000 d2d20707 5a5a5ad2 00040404     .........ZZZ....
	...
  409874:	ff0f0f0f ffffffff ffffffff ffffffff     ................
  409884:	ffffffff ffffffff ffffffff ffffffff     ................
  409894:	ffffffff ffffffff 5757ffff 00000057     ..........WWW...
	...
  4098b0:	ea0c0c0c ffffeaea ffffffff ffffffff     ................
  4098c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4098d0:	ffffffff 006c6c6c 00000000 00000000     ....lll.........
  4098e0:	00000000 b9b90000 ffffffb9 ffffffff     ................
  4098f0:	ffffffff ffffffff ffffffff 5757ffff     ..............WW
  409900:	00000057 00000000 00000000 00000000     W...............
  409910:	fff0f0f0 ffffffff ffffffff ffffffff     ................
  409920:	ffffffff ffffffff 00444444 00000000     ........DDD.....
  409930:	00000000 05000000 ffff0505 ffffffff     ................
  409940:	ffffffff ffffffff ffffffff ffffffff     ................
  409950:	eaeaffff 0c0c0cea 00000000 00000000     ................
  409960:	00000000 57000000 ffff5757 1d1d1dff     .......WWW......
	...
  40997c:	04000000 05050404 05050505 ffffffff     ................
  40998c:	ffffffff ffffffff ffffffff ffffffff     ................
  40999c:	ffffffff ffffffff fcfcffff 151515fc     ................
	...
  4099b8:	41000000 ffff4141 ffffffff ffffffff     ...AAA..........
  4099c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4099d8:	ffffffff 00848484 00000000 00000000     ................
  4099e8:	00000000 9d9d0000 ffffff9d ffffffff     ................
  4099f8:	ffffffff ffffffff ffffffff 6969ffff     ..............ii
  409a08:	00000069 00000000 00000000 00000000     i...............
  409a18:	ffc6c6c6 ffffffff ffffffff ffffffff     ................
  409a28:	ffffffff ffffffff 00545454 00000000     ........TTT.....
	...
  409a40:	fcfc0000 fffffffc ffffffff ffffffff     ................
  409a50:	ffffffff ffffffff 4040ffff 00000040     ..........@@@...
	...
  409a6c:	fc151515 fffffcfc 303030ff 00000000     .........000....
	...
  409a84:	4d050505 52524d4d 52525252 ffffffff     ...MMMRRRRRR....
  409a94:	ffffffff ffffffff ffffffff ffffffff     ................
  409aa4:	ffffffff ffffffff ffffffff 8f8f8fff     ................
  409ab4:	00010101 00000000 00000000 03000000     ................
  409ac4:	b1b10303 ffffffb1 ffffffff ffffffff     ................
  409ad4:	ffffffff ffffffff ffffffff ffffffff     ................
  409ae4:	00747474 00000000 00000000 00000000     ttt.............
  409af4:	b3b30000 ffffffb3 ffffffff ffffffff     ................
  409b04:	ffffffff ffffffff 5c5cffff 0000005c     ..........\\\...
	...
  409b20:	ffe4e4e4 ffffffff ffffffff ffffffff     ................
  409b30:	ffffffff ffffffff 00494949 00000000     ........III.....
  409b40:	00000000 03000000 ffff0303 ffffffff     ................
  409b50:	ffffffff ffffffff ffffffff b7ffffff     ................
  409b60:	0303b7b7 00000003 00000000 00000000     ................
  409b70:	01010100 ff898989 ffffffff c2c2c2ff     ................
  409b80:	000b0b0b 00000000 05050500 ff303030     ............000.
  409b90:	ffffffff ffffffff ffffffff ffffffff     ................
  409ba0:	ffffffff ffffffff ffffffff ffffffff     ................
  409bb0:	ffffffff ffffffff ffffffff 002c2c2c     ............,,,.
	...
  409bcc:	23230000 ffffff23 ffffffff ffffffff     ..###...........
  409bdc:	ffffffff ffffffff ffffffff ffffffff     ................
  409bec:	004f4f4f 00000000 00000000 00000000     OOO.............
  409bfc:	dcdc0000 ffffffdc ffffffff ffffffff     ................
  409c0c:	ffffffff ffffffff 3d3dffff 0000003d     ..........===...
	...
  409c24:	03030300 ffffffff ffffffff ffffffff     ................
  409c34:	ffffffff ffffffff ffffffff 00303030     ............000.
	...
  409c4c:	0a000000 ffff0a0a ffffffff ffffffff     ................
  409c5c:	ffffffff ffffffff 23ffffff 00002323     ...........###..
	...
  409c78:	2c2c2c00 ffffffff ffffffff ffffffff     .,,,............
  409c88:	30c2c2c2 1e1e3030 6161611e ffffffff     ...000...aaa....
  409c98:	ffffffff ffffffff ffffffff ffffffff     ................
  409ca8:	ffffffff ffffffff ffffffff ffffffff     ................
  409cb8:	ffffffff ffffffff ffffffff 06c9c9c9     ................
  409cc8:	00000606 00000000 00000000 00000000     ................
  409cd8:	78787800 ffffffff ffffffff ffffffff     .xxx............
  409ce8:	ffffffff ffffffff ffffffff 00272727     ............'''.
	...
  409d00:	0b000000 ffff0b0b ffffffff ffffffff     ................
  409d10:	ffffffff ffffffff ffffffff 1c1cffff     ................
  409d20:	0000001c 00000000 00000000 14141400     ................
  409d30:	ffffffff ffffffff ffffffff ffffffff     ................
  409d40:	ffffffff ffffffff 00131313 00000000     ................
  409d50:	00000000 1d000000 ffff1d1d ffffffff     ................
  409d60:	ffffffff ffffffff ffffffff 00777777     ............www.
	...
  409d7c:	06060000 c9c9c906 ffffffff ffffffff     ................
  409d8c:	ffffffff ffffffff ffffffff ffffffff     ................
  409d9c:	ffffffff ffffffff ffffffff ffffffff     ................
  409dac:	ffffffff ffffffff ffffffff ffffffff     ................
  409dbc:	ffffffff ffffffff ffffffff ffffffff     ................
  409dcc:	4effffff 00004e4e 00000000 00000000     ...NNN..........
  409ddc:	00000000 0f0f0f00 fff0f0f0 ffffffff     ................
  409dec:	ffffffff ffffffff ffffffff edededff     ................
  409dfc:	00050505 00000000 00000000 21000000     ...............!
  409e0c:	ffff2121 ffffffff ffffffff ffffffff     !!..............
  409e1c:	ffffffff d0ffffff 0202d0d0 00000002     ................
	...
  409e34:	2e2e2e00 ffffffff ffffffff ffffffff     ................
  409e44:	ffffffff ffffffff afafafff 00000000     ................
	...
  409e5c:	3c000000 ffff3c3c ffffffff ffffffff     ...<<<..........
  409e6c:	ffffffff f0f0f0ff 000f0f0f 00000000     ................
	...
  409e84:	4e4e0000 ffffff4e ffffffff ffffffff     ..NNN...........
  409e94:	ffffffff ffffffff ffffffff ffffffff     ................
  409ea4:	ffffffff ffffffff ffffffff ffffffff     ................
  409eb4:	ffffffff ffffffff ffffffff ffffffff     ................
  409ec4:	ffffffff ffffffff ffffffff ffffffff     ................
  409ed4:	f6ffffff 1111f6f6 00000011 00000000     ................
	...
  409eec:	ff494949 ffffffff ffffffff ffffffff     III.............
  409efc:	ffffffff 6b6b6bff 00000000 00000000     .....kkk........
  409f0c:	00000000 57000000 ffff5757 ffffffff     .......WWW......
  409f1c:	ffffffff ffffffff ffffffff 55ffffff     ...............U
  409f2c:	00005555 00000000 00000000 00000000     UU..............
  409f3c:	6f6f6f00 ffffffff ffffffff ffffffff     .ooo............
  409f4c:	ffffffff ffffffff 444444ff 00000000     .........DDD....
	...
  409f64:	8a000000 ffff8a8a ffffffff ffffffff     ................
  409f74:	ffffffff 474747ff 00000000 00000000     .....GGG........
  409f84:	00000000 10000000 f3f31010 fffffff3     ................
  409f94:	ffffffff ffffffff ffffffff ffffffff     ................
  409fa4:	ffffffff ffffffff ffffffff ffffffff     ................
  409fb4:	ffffffff ffffffff ffffffff ffffffff     ................
  409fc4:	ffffffff ffffffff ffffffff ffffffff     ................
  409fd4:	ffffffff ffffffff ffffffff 8181ffff     ................
  409fe4:	00000081 00000000 00000000 00000000     ................
  409ff4:	bf050505 ffffbfbf ffffffff ffffffff     ................
  40a004:	ffffffff 272727ff 00000000 00000000     .....'''........
  40a014:	00000000 d0020202 ffffd0d0 ffffffff     ................
  40a024:	ffffffff ffffffff ffffffff 1dffffff     ................
  40a034:	00001d1d 00000000 00000000 05050000     ................
  40a044:	ededed05 ffffffff ffffffff ffffffff     ................
  40a054:	ffffffff ffffffff 131313ff 00000000     ................
	...
  40a06c:	fc0b0b0b fffffcfc ffffffff ffffffff     ................
  40a07c:	bfbfffff 040404bf 00000000 00000000     ................
  40a08c:	00000000 81000000 ffff8181 ffffffff     ................
  40a09c:	ffffffff ffffffff ffffffff ffffffff     ................
  40a0ac:	ffffffff ffffffff ffffffff ffffffff     ................
  40a0bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40a0cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40a0dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40a0ec:	272727ff 00000000 00000000 00000000     .'''............
  40a0fc:	28000000 ffff2828 ffffffff ffffffff     ...(((..........
  40a10c:	eaeaffff 050505ea 00000000 00000000     ................
  40a11c:	00000000 ff1d1d1d ffffffff ffffffff     ................
  40a12c:	ffffffff ffffffff ffffffff 02d0d0d0     ................
  40a13c:	00000202 00000000 00000000 28280000     ..............((
  40a14c:	ffffff28 ffffffff ffffffff ffffffff     (...............
  40a15c:	ffffffff adadffff 000000ad 00000000     ................
	...
  40a174:	ff363636 ffffffff ffffffff ffffffff     666.............
  40a184:	2727ffff 00000027 00000000 00000000     ..'''...........
  40a194:	00000000 ff272727 ffffffff ffffffff     ....'''.........
  40a1a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40a1b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40a1c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40a1d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40a1e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40a1f4:	bdbdbdff 00040404 00000000 00000000     ................
  40a204:	00000000 84840000 ffffff84 ffffffff     ................
  40a214:	6c6cffff 0000006c 00000000 00000000     ..lll...........
  40a224:	00000000 ff575757 ffffffff ffffffff     ....WWW.........
  40a234:	ffffffff ffffffff ffffffff 00575757     ............WWW.
	...
  40a250:	6c6c0000 ffffff6c ffffffff ffffffff     ..lll...........
  40a260:	ffffffff ffffffff 4444ffff 00000044     ..........DDD...
	...
  40a27c:	ff898989 ffffffff ffffffff 84ffffff     ................
  40a28c:	00008484 00000000 00000000 00000000     ................
  40a29c:	04040400 ffbdbdbd ffffffff ffffffff     ................
  40a2ac:	ffffffff ffffffff ffffffff ffffffff     ................
  40a2bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40a2cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40a2dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40a2ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40a2fc:	ffffffff 00464646 00000000 00000000     ....FFF.........
  40a30c:	00000000 11110000 f6f6f611 ffffffff     ................
  40a31c:	2727ffff 00000027 00000000 00000000     ..'''...........
  40a32c:	02020200 ffcdcdcd ffffffff ffffffff     ................
  40a33c:	ffffffff ffffffff ffffffff 001c1c1c     ................
	...
  40a354:	05000000 eded0505 ffffffed ffffffff     ................
  40a364:	ffffffff ffffffff ffffffff 1313ffff     ................
  40a374:	00000013 00000000 00000000 0b0b0b00     ................
  40a384:	fffcfcfc ffffffff ffffffff 14f9f9f9     ................
  40a394:	00001414 00000000 00000000 00000000     ................
  40a3a4:	47474700 ffffffff ffffffff ffffffff     .GGG............
  40a3b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40a3c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40a3d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40a3e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40a3f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40a404:	ffffffff 0ff0f0f0 00000f0f 00000000     ................
	...
  40a41c:	4f4f4f00 ffffffff 0606ffff 00000006     .OOO............
	...
  40a434:	1e1e1e00 ffffffff ffffffff ffffffff     ................
  40a444:	ffffffff ffffffff e4e4e4ff 00020202     ................
	...
  40a45c:	28000000 ffff2828 ffffffff ffffffff     ...(((..........
  40a46c:	ffffffff ffffffff bdffffff 0000bdbd     ................
	...
  40a488:	36363600 ffffffff ffffffff ffffffff     .666............
  40a498:	004f4f4f 00000000 00000000 00000000     OOO.............
  40a4a8:	0f0f0000 f0f0f00f ffffffff ffffffff     ................
  40a4b8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a4c8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a4d8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a4e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a4f8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a508:	ffffffff ffffffff 76ffffff 00007676     ...........vvv..
	...
  40a524:	06060600 b5cbcbcb 0000b5b5 00000000     ................
	...
  40a53c:	57575700 ffffffff ffffffff ffffffff     .WWW............
  40a54c:	ffffffff ffffffff 8f8f8fff 00000000     ................
	...
  40a564:	6d000000 ffff6d6d ffffffff ffffffff     ...mmm..........
  40a574:	ffffffff ffffffff 73ffffff 00007373     ...........sss..
	...
  40a590:	89898900 ffffffff ffffffff cbcbcbff     ................
  40a5a0:	00060606 00000000 00000000 00000000     ................
  40a5b0:	76760000 ffffff76 ffffffff ffffffff     ..vvv...........
  40a5c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a5d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a5e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a5f0:	ffffffff ffffffff ffffffff ffffffff     ................
  40a600:	ffffffff ffffffff ffffffff ffffffff     ................
  40a610:	ffffffff ffffffff ffffffff 2121ffff     ..............!!
  40a620:	00000021 00000000 00000000 00000000     !...............
  40a630:	6f2e2e2e 00006f6f 00000000 00000000     ...ooo..........
  40a640:	00000000 a8a8a800 ffffffff ffffffff     ................
  40a650:	ffffffff ffffffff ffffffff 585858ff     .............XXX
	...
  40a66c:	d0000000 ffffd0d0 ffffffff ffffffff     ................
  40a67c:	ffffffff ffffffff 46ffffff 00004646     ...........FFF..
	...
  40a694:	03030000 f3f3f303 ffffffff ffffffff     ................
  40a6a4:	2c2c2cff 00000000 00000000 00000000     .,,,............
  40a6b4:	22000000 ffff2222 ffffffff ffffffff     ..."""..........
  40a6c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40a6d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40a6e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40a6f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40a704:	ffffffff ffffffff ffffffff ffffffff     ................
  40a714:	ffffffff ffffffff ffffffff ffffffff     ................
  40a724:	b3b3ffff 030303b3 00000000 00000000     ................
  40a734:	00000000 0f010101 00000f0f 00000000     ................
	...
  40a74c:	1a1a1a00 1a1a1a1a 1a1a1a1a 1a1a1a1a     ................
  40a75c:	1a1a1a1a 1a1a1a1a 0c0c0c1a 00000000     ................
	...
  40a774:	1a010101 1a1a1a1a 1a1a1a1a 1a1a1a1a     ................
  40a784:	1a1a1a1a 1a1a1a1a 0a1a1a1a 00000a0a     ................
	...
  40a79c:	03030000 1a1a1a03 1a1a1a1a 1a1a1a1a     ................
  40a7ac:	0101011a 00000000 00000000 00000000     ................
  40a7bc:	b3030303 ffffb3b3 ffffffff ffffffff     ................
  40a7cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40a7dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40a7ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40a7fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40a80c:	ffffffff ffffffff ffffffff ffffffff     ................
  40a81c:	ffffffff ffffffff ffffffff ffffffff     ................
  40a82c:	ffffffff 3f3f3fff 00000000 00000000     .....???........
	...
  40a8c4:	ff3f3f3f ffffffff ffffffff ffffffff     ???.............
  40a8d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40a8e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40a8f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40a904:	ffffffff ffffffff ffffffff ffffffff     ................
  40a914:	ffffffff ffffffff ffffffff ffffffff     ................
  40a924:	ffffffff ffffffff ffffffff ffffffff     ................
  40a934:	ffffffff eaeaeaff 000d0d0d 00000000     ................
	...
  40a9c8:	0c0c0c00 ffe7e7e7 ffffffff ffffffff     ................
  40a9d8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a9e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a9f8:	ffffffff ffffffff ffffffff ffffffff     ................
  40aa08:	ffffffff ffffffff ffffffff ffffffff     ................
  40aa18:	ffffffff ffffffff ffffffff ffffffff     ................
  40aa28:	ffffffff ffffffff ffffffff ffffffff     ................
  40aa38:	ffffffff ffffffff ffffffff 006b6b6b     ............kkk.
	...
  40aad0:	6c6c6c00 ffffffff ffffffff ffffffff     .lll............
  40aae0:	ffffffff ffffffff ffffffff ffffffff     ................
  40aaf0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ab00:	ffffffff ffffffff ffffffff ffffffff     ................
  40ab10:	ffffffff ffffffff ffffffff ffffffff     ................
  40ab20:	ffffffff ffffffff ffffffff ffffffff     ................
  40ab30:	ffffffff ffffffff ffffffff ffffffff     ................
  40ab40:	ffffffff ffffffff ffffffff 23ffffff     ...............#
  40ab50:	00002323 00000000 00000000 00000000     ##..............
	...
  40abd4:	23230000 ffffff23 ffffffff ffffffff     ..###...........
  40abe4:	ffffffff ffffffff ffffffff ffffffff     ................
  40abf4:	ffffffff ffffffff ffffffff ffffffff     ................
  40ac04:	ffffffff ffffffff ffffffff ffffffff     ................
  40ac14:	ffffffff ffffffff ffffffff ffffffff     ................
  40ac24:	ffffffff ffffffff ffffffff ffffffff     ................
  40ac34:	ffffffff ffffffff ffffffff ffffffff     ................
  40ac44:	ffffffff ffffffff ffffffff ffffffff     ................
  40ac54:	edffffff 4949eded 25252549 23232323     ......III%%%####
  40ac64:	04042323 00000004 00000000 00000000     ##..............
  40ac74:	05050500 23232323 23232323 23232323     ....############
  40ac84:	23232323 23232323 23232323 00020202     ############....
	...
  40ac9c:	09000000 23230909 23232323 23232323     ......##########
  40acac:	23232323 23232323 21232323 00002121     ###########!!!..
	...
  40acc8:	0b0b0b00 23232323 23232323 23232323     ....############
  40acd8:	49252525 f0f04949 fffffff0 ffffffff     %%%III..........
  40ace8:	ffffffff ffffffff ffffffff ffffffff     ................
  40acf8:	ffffffff ffffffff ffffffff ffffffff     ................
  40ad08:	ffffffff ffffffff ffffffff ffffffff     ................
  40ad18:	ffffffff ffffffff ffffffff ffffffff     ................
  40ad28:	ffffffff ffffffff ffffffff ffffffff     ................
  40ad38:	ffffffff ffffffff ffffffff ffffffff     ................
  40ad48:	ffffffff ffffffff ffffffff ffffffff     ................
  40ad58:	ffffffff ffffffff ffffffff ffffffff     ................
  40ad68:	ffffffff 2a2affff 0000002a 00000000     ......***.......
  40ad78:	00000000 02020200 ffcdcdcd ffffffff     ................
  40ad88:	ffffffff ffffffff ffffffff ffffffff     ................
  40ad98:	001e1e1e 00000000 00000000 05000000     ................
  40ada8:	eaea0505 ffffffea ffffffff ffffffff     ................
  40adb8:	ffffffff ffffffff 1414ffff 00000014     ................
	...
  40add0:	0b0b0b00 fffcfcfc ffffffff ffffffff     ................
  40ade0:	ffffffff ffffffff ffffffff ffffffff     ................
  40adf0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ae00:	ffffffff ffffffff ffffffff ffffffff     ................
  40ae10:	ffffffff ffffffff ffffffff ffffffff     ................
  40ae20:	ffffffff ffffffff ffffffff ffffffff     ................
  40ae30:	ffffffff ffffffff ffffffff ffffffff     ................
  40ae40:	ffffffff ffffffff ffffffff ffffffff     ................
  40ae50:	ffffffff ffffffff ffffffff ffffffff     ................
  40ae60:	ffffffff ffffffff ffffffff ffffffff     ................
  40ae70:	ffffffff 7171ffff 00000071 00000000     ......qqq.......
	...
  40ae88:	ff525252 ffffffff ffffffff ffffffff     RRR.............
  40ae98:	ffffffff ffffffff 005a5a5a 00000000     ........ZZZ.....
	...
  40aeb0:	68680000 ffffff68 ffffffff ffffffff     ..hhh...........
  40aec0:	ffffffff ffffffff 4747ffff 00000047     ..........GGG...
	...
  40aedc:	ff848484 ffffffff ffffffff ffffffff     ................
  40aeec:	ffffffff ffffffff ffffffff ffffffff     ................
  40aefc:	ffffffff ffffffff ffffffff ffffffff     ................
  40af0c:	ffffffff ffffffff ffffffff ffffffff     ................
  40af1c:	ffffffff ffffffff ffffffff ffffffff     ................
  40af2c:	ffffffff ffffffff ffffffff ffffffff     ................
  40af3c:	ffffffff ffffffff ffffffff ffffffff     ................
  40af4c:	ffffffff ffffffff ffffffff ffffffff     ................
  40af5c:	ffffffff ffffffff ffffffff ffffffff     ................
  40af6c:	ffffffff ffffffff ffffffff ffffffff     ................
  40af7c:	f0f0ffff 060606f0 00000000 00000000     ................
  40af8c:	00000000 ff1b1b1b ffffffff ffffffff     ................
  40af9c:	ffffffff ffffffff ffffffff 03d7d7d7     ................
  40afac:	00000303 00000000 00000000 25250000     ..............%%
  40afbc:	ffffff25 ffffffff ffffffff ffffffff     %...............
  40afcc:	ffffffff b5b5ffff 000000b5 00000000     ................
	...
  40afe4:	ff323232 ffffffff ffffffff ffffffff     222.............
  40aff4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b004:	ffffffff ffffffff ffffffff ffffffff     ................
  40b014:	ffffffff ffffffff ffffffff ffffffff     ................
  40b024:	ffffffff ffffffff ffffffff ffffffff     ................
  40b034:	ffffffff ffffffff ffffffff ffffffff     ................
  40b044:	ffffffff ffffffff ffffffff ffffffff     ................
  40b054:	ffffffff ffffffff ffffffff ffffffff     ................
  40b064:	ffffffff ffffffff ffffffff ffffffff     ................
  40b074:	ffffffff ffffffff ffffffff ffffffff     ................
  40b084:	ffffffff 2a2a2aff 00000000 00000000     .....***........
  40b094:	00000000 c9010101 ffffc9c9 ffffffff     ................
  40b0a4:	ffffffff ffffffff ffffffff 1effffff     ................
  40b0b4:	00001e1e 00000000 00000000 04040000     ................
  40b0c4:	e7e7e704 ffffffff ffffffff ffffffff     ................
  40b0d4:	ffffffff ffffffff 151515ff 00000000     ................
	...
  40b0ec:	f90a0a0a fffff9f9 ffffffff ffffffff     ................
  40b0fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40b10c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b11c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b12c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b13c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b14c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b15c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b16c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b17c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b18c:	ffffffff 737373ff 00000000 00000000     .....sss........
  40b19c:	00000000 52000000 ffff5252 ffffffff     .......RRR......
  40b1ac:	ffffffff ffffffff ffffffff 5bffffff     ...............[
  40b1bc:	00005b5b 00000000 00000000 00000000     [[..............
  40b1cc:	68686800 ffffffff ffffffff ffffffff     .hhh............
  40b1dc:	ffffffff ffffffff 474747ff 00000000     .........GGG....
	...
  40b1f4:	82000000 ffff8282 ffffffff ffffffff     ................
  40b204:	ffffffff ffffffff ffffffff ffffffff     ................
  40b214:	ffffffff ffffffff ffffffff ffffffff     ................
  40b224:	ffffffff ffffffff ffffffff ffffffff     ................
  40b234:	ffffffff ffffffff ffffffff ffffffff     ................
  40b244:	ffffffff ffffffff ffffffff ffffffff     ................
  40b254:	ffffffff ffffffff ffffffff ffffffff     ................
  40b264:	ffffffff ffffffff ffffffff ffffffff     ................
  40b274:	ffffffff ffffffff ffffffff ffffffff     ................
  40b284:	ffffffff ffffffff ffffffff ffffffff     ................
  40b294:	ffffffff f0f0f0ff 00060606 00000000     ................
  40b2a4:	00000000 20000000 ffff2020 ffffffff     .......   ......
  40b2b4:	ffffffff ffffffff ffffffff d7ffffff     ................
  40b2c4:	0303d7d7 00000003 00000000 00000000     ................
  40b2d4:	2c2c2c00 ffffffff ffffffff ffffffff     .,,,............
  40b2e4:	ffffffff ffffffff b5b5b5ff 00000000     ................
	...
  40b2fc:	3a000000 ffff3a3a ffffffff ffffffff     ...:::..........
  40b30c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b31c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b32c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b33c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b34c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b35c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b36c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b37c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b38c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b39c:	ffffffff ffffffff 00292929 00000000     ........))).....
  40b3ac:	00000000 0a000000 ffff0a0a ffffffff     ................
  40b3bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40b3cc:	1e1effff 0000001e 00000000 00000000     ................
  40b3dc:	13131300 ffffffff ffffffff ffffffff     ................
  40b3ec:	ffffffff ffffffff ffffffff 00141414     ................
	...
  40b404:	1c000000 ffff1c1c ffffffff ffffffff     ................
  40b414:	ffffffff ffffffff ffffffff ffffffff     ................
  40b424:	ffffffff ffffffff ffffffff ffffffff     ................
  40b434:	ffffffff ffffffff ffffffff ffffffff     ................
  40b444:	ffffffff ffffffff ffffffff ffffffff     ................
  40b454:	ffffffff ffffffff ffffffff ffffffff     ................
  40b464:	ffffffff ffffffff ffffffff ffffffff     ................
  40b474:	ffffffff ffffffff ffffffff ffffffff     ................
  40b484:	ffffffff ffffffff ffffffff ffffffff     ................
  40b494:	ffffffff ffffffff ffffffff ffffffff     ................
  40b4a4:	ffffffff ffffffff 00525252 00000000     ........RRR.....
	...
  40b4bc:	d7d70000 ffffffd7 ffffffff ffffffff     ................
  40b4cc:	ffffffff ffffffff 4040ffff 00000040     ..........@@@...
	...
  40b4e4:	03030300 ffffffff ffffffff ffffffff     ................
  40b4f4:	ffffffff ffffffff ffffffff 00323232     ............222.
	...
  40b50c:	0a000000 ffff0a0a ffffffff ffffffff     ................
  40b51c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b52c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b53c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b54c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b55c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b56c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b57c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b58c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b59c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b5ac:	ffffffff ffffffff 00777777 00000000     ........www.....
	...
  40b5c4:	adad0000 ffffffad ffffffff ffffffff     ................
  40b5d4:	ffffffff ffffffff 5e5effff 0000005e     ..........^^^...
	...
  40b5f0:	ffdfdfdf ffffffff ffffffff ffffffff     ................
  40b600:	ffffffff ffffffff 004a4a4a 00000000     ........JJJ.....
  40b610:	00000000 03000000 ffff0303 ffffffff     ................
  40b620:	ffffffff ffffffff ffffffff ffffffff     ................
  40b630:	ffffffff ffffffff ffffffff ffffffff     ................
  40b640:	ffffffff ffffffff ffffffff ffffffff     ................
  40b650:	ffffffff ffffffff ffffffff ffffffff     ................
  40b660:	ffffffff ffffffff ffffffff ffffffff     ................
  40b670:	ffffffff ffffffff ffffffff ffffffff     ................
  40b680:	ffffffff ffffffff ffffffff ffffffff     ................
  40b690:	ffffffff ffffffff ffffffff ffffffff     ................
  40b6a0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b6b0:	ffffffff ffffffff ffffffff 00a0a0a0     ................
	...
  40b6cc:	adad0000 ffffffad ffffffff ffffffff     ................
  40b6dc:	ffffffff ffffffff 7e7effff 0000007e     ..........~~~...
	...
  40b6f8:	ffd7d7d7 ffffffff ffffffff ffffffff     ................
  40b708:	ffffffff ffffffff 00656565 00000000     ........eee.....
  40b718:	00000000 03000000 fcfc0303 fffffffc     ................
  40b728:	ffffffff ffffffff ffffffff ffffffff     ................
  40b738:	ffffffff ffffffff ffffffff ffffffff     ................
  40b748:	ffffffff ffffffff ffffffff ffffffff     ................
  40b758:	ffffffff ffffffff ffffffff ffffffff     ................
  40b768:	ffffffff ffffffff ffffffff ffffffff     ................
  40b778:	ffffffff ffffffff ffffffff ffffffff     ................
  40b788:	ffffffff ffffffff ffffffff ffffffff     ................
  40b798:	ffffffff ffffffff ffffffff ffffffff     ................
  40b7a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b7b8:	ffffffff ffffffff ffffffff 0df6f6f6     ................
  40b7c8:	00000d0d 00000000 0f000000 fcfc0f0f     ................
  40b7d8:	fffffffc ffffffff ffffffff ffffffff     ................
  40b7e8:	ffffffff dcdcffff 090909dc 00000000     ................
  40b7f8:	00000000 17171700 ffffffff ffffffff     ................
  40b808:	ffffffff ffffffff ffffffff ffffffff     ................
  40b818:	04c2c2c2 00000404 00000000 22000000     ..............."
  40b828:	ffff2222 ffffffff ffffffff ffffffff     ""..............
  40b838:	ffffffff ffffffff ffffffff ffffffff     ................
  40b848:	ffffffff ffffffff ffffffff ffffffff     ................
  40b858:	ffffffff ffffffff ffffffff ffffffff     ................
  40b868:	ffffffff ffffffff ffffffff ffffffff     ................
  40b878:	ffffffff ffffffff ffffffff ffffffff     ................
  40b888:	ffffffff ffffffff ffffffff ffffffff     ................
  40b898:	ffffffff ffffffff ffffffff ffffffff     ................
  40b8a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b8b8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b8c8:	ffffffff 9effffff 18189e9e 04040418     ................
  40b8d8:	a51a1a1a ffffa5a5 ffffffff ffffffff     ................
  40b8e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b8f8:	8d8d8dff 04141414 1e1e0404 b7b7b71e     ................
  40b908:	ffffffff ffffffff ffffffff ffffffff     ................
  40b918:	ffffffff ffffffff 7bffffff 11117b7b     ...........{{{..
  40b928:	05050511 c9232323 ffffc9c9 ffffffff     ....###.........
  40b938:	ffffffff ffffffff ffffffff ffffffff     ................
  40b948:	ffffffff ffffffff ffffffff ffffffff     ................
  40b958:	ffffffff ffffffff ffffffff ffffffff     ................
  40b968:	ffffffff ffffffff ffffffff ffffffff     ................
  40b978:	ffffffff ffffffff                       ........

0040b980 <image_data_soneca>:
  40b980:	ffffffff ffffffff ffffffff ffffffff     ................
  40b990:	ffffffff ffffffff ffffffff ffffffff     ................
  40b9a0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b9b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b9c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b9d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b9e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b9f0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba00:	ffffffff 1ebbbbbb 03031e1e 0f0f0f03     ................
  40ba10:	ea4f4f4f ffffeaea ffffffff ffffffff     OOO.............
  40ba20:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba30:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba40:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba50:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba60:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba70:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba80:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba90:	ffffffff ffffffff ffffffff ffffffff     ................
  40baa0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bab0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bac0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bad0:	17ffffff 00001717 00000000 00000000     ................
  40bae0:	0a0a0000 5454540a fff9f9f9 ffffffff     .....TTT........
  40baf0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb00:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb10:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb20:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb30:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb40:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb50:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb60:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb70:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb80:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb90:	ffffffff ffffffff ffffffff cdffffff     ................
  40bba0:	0000cdcd 00000000 00000000 00000000     ................
  40bbb0:	00000000 14000000 8d8d1414 ffffff8d     ................
  40bbc0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bbd0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bbe0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bbf0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc00:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc10:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc20:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc30:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc40:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc50:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc60:	ffffffff ffffffff ffffffff eaeaffff     ................
  40bc70:	030303ea 00000000 00000000 00000000     ................
	...
  40bc88:	01010100 f03c3c3c fffff0f0 ffffffff     ....<<<.........
  40bc98:	ffffffff ffffffff ffffffff ffffffff     ................
  40bca8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bcb8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bcc8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bcd8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bce8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bcf8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd08:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd18:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd28:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd38:	ffffffff ffffffff 00252525 00000000     ........%%%.....
	...
  40bd5c:	14140000 b9b9b914 ffffffff ffffffff     ................
  40bd6c:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd7c:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd8c:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd9c:	ffffffff ffffffff ffffffff ffffffff     ................
  40bdac:	ffffffff ffffffff ffffffff ffffffff     ................
  40bdbc:	ffffffff ffffffff ffffffff ffffffff     ................
  40bdcc:	ffffffff ffffffff ffffffff ffffffff     ................
  40bddc:	ffffffff ffffffff ffffffff ffffffff     ................
  40bdec:	ffffffff ffffffff ffffffff ffffffff     ................
  40bdfc:	ffffffff ffffffff ffffffff ffffffff     ................
  40be0c:	78ffffff 00007878 00000000 00000000     ...xxx..........
	...
  40be30:	82090909 ffff8282 ffffffff ffffffff     ................
  40be40:	ffffffff ffffffff ffffffff ffffffff     ................
  40be50:	ffffffff ffffffff ffffffff ffffffff     ................
  40be60:	ffffffff ffffffff ffffffff ffffffff     ................
  40be70:	ffffffff ffffffff ffffffff ededffff     ................
  40be80:	3f3f3fed 1e141414 85851e1e ffffff85     .???............
  40be90:	ffffffff ffffffff ffffffff ffffffff     ................
  40bea0:	ffffffff ffffffff ffffffff ffffffff     ................
  40beb0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bec0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bed0:	ffffffff ffffffff ffffffff fcfcffff     ................
  40bee0:	0c0c0cfc 00000000 00000000 00000000     ................
	...
  40bf00:	03030000 6b6b6b03 ffffffff ffffffff     .....kkk........
  40bf10:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf20:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf30:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf40:	ffffffff ffffffff ffffffff 303030ff     .............000
	...
  40bf58:	01010100 f9414141 fffff9f9 ffffffff     ....AAA.........
  40bf68:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf78:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf88:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf98:	ffffffff ffffffff ffffffff ffffffff     ................
  40bfa8:	ffffffff ffffffff 00343434 00000000     ........444.....
	...
  40bfd4:	5f010101 ffff5f5f ffffffff ffffffff     ...___..........
  40bfe4:	ffffffff ffffffff ffffffff ffffffff     ................
  40bff4:	ffffffff ffffffff ffffffff ffffffff     ................
  40c004:	ffffffff ffffffff ffffffff ffffffff     ................
  40c014:	ffffffff ffffffff 00040404 00000000     ................
	...
  40c02c:	1b1b0000 c4c4c41b ffffffff ffffffff     ................
  40c03c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c04c:	c9ffffff 7474c9c9 9e9e9e74 ffffffff     ......ttt.......
  40c05c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c06c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c07c:	73ffffff 00007373 00000000 00000000     ...sss..........
	...
  40c0a4:	02020000 6b6b6b02 ffffffff ffffffff     .....kkk........
  40c0b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40c0c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40c0d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40c0e4:	ffffffff 00f6f6f6 00000000 00000000     ................
	...
  40c100:	7b090909 ffff7b7b ffffffff ffffffff     ...{{{..........
  40c110:	ffffffff d0d0d0ff 1b555555 01011b1b     ........UUU.....
  40c120:	00000001 30000000 ffff3030 ffffffff     .......000......
  40c130:	ffffffff ffffffff ffffffff ffffffff     ................
  40c140:	ffffffff ffffffff ffffffff e2e2ffff     ................
  40c150:	030303e2 00000000 00000000 00000000     ................
  40c160:	1b1a1a1a 00001b1b 00000000 00000000     ................
	...
  40c178:	82030303 ffff8282 ffffffff ffffffff     ................
  40c188:	ffffffff ffffffff ffffffff ffffffff     ................
  40c198:	ffffffff ffffffff ffffffff ffffffff     ................
  40c1a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40c1b8:	0000ffff 00000000 00000000 00000000     ................
	...
  40c1d0:	01010000 3f3f3f01 d5f9f9f9 5a5ad5d5     .....???......ZZ
  40c1e0:	1e1e1e5a 00020202 00000000 00000000     Z...............
	...
  40c1f8:	78787800 ffffffff ffffffff ffffffff     .xxx............
  40c208:	ffffffff ffffffff ffffffff ffffffff     ................
  40c218:	ffffffff ffffffff 00131313 00000000     ................
  40c228:	00000000 0f000000 f3f30f0f 2e2e2ef3     ................
	...
  40c248:	07070000 b5b5b507 ffffffff ffffffff     ................
  40c258:	ffffffff ffffffff ffffffff ffffffff     ................
  40c268:	ffffffff ffffffff ffffffff ffffffff     ................
  40c278:	ffffffff ffffffff ffffffff ffffffff     ................
  40c288:	010101ff 00000000 00000000 00000000     ................
	...
  40c2a4:	0d000000 02020d0d 00000002 00000000     ................
	...
  40c2c8:	ff4a4a4a ffffffff ffffffff ffffffff     JJJ.............
  40c2d8:	ffffffff ffffffff ffffffff ffffffff     ................
  40c2e8:	ffffffff 27ffffff 00002727 00000000     .......'''......
  40c2f8:	00000000 02020000 f3f3f302 34ffffff     ...............4
  40c308:	00003434 00000000 00000000 00000000     44..............
  40c318:	00000000 f0141414 fffff0f0 ffffffff     ................
  40c328:	ffffffff ffffffff ffffffff ffffffff     ................
  40c338:	ffffffff ffffffff ffffffff ffffffff     ................
  40c348:	ffffffff ffffffff ffffffff ffffffff     ................
  40c358:	00020202 00000000 00000000 00000000     ................
	...
  40c394:	76000000 ffff7676 ffffffff ffffffff     ...vvv..........
  40c3a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40c3b4:	ffffffff ffffffff 4141ffff 00000041     ..........AAA...
	...
  40c3d0:	ffa8a8a8 fcfcffff 282828fc 00000000     .........(((....
	...
  40c3ec:	3b3b0000 ffffff3b ffffffff ffffffff     ..;;;...........
  40c3fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40c40c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c41c:	ffffffff ffffffff 03ffffff 00000303     ................
	...
  40c460:	06000000 f3f30606 fffffff3 ffffffff     ................
  40c470:	ffffffff ffffffff ffffffff ffffffff     ................
  40c480:	ffffffff ffffffff ffffffff 5d5d5dff     .............]]]
	...
  40c49c:	89000000 ffff8989 ffffffff 1ef3f3f3     ................
  40c4ac:	00001e1e 00000000 00000000 00000000     ................
  40c4bc:	01010100 ff898989 ffffffff ffffffff     ................
  40c4cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40c4dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40c4ec:	ffffffff ffffffff 0404ffff 00000004     ................
	...
  40c504:	0a0a0a00 00010101 00000000 00000000     ................
	...
  40c530:	2c2c0000 ffffff2c ffffffff ffffffff     ..,,,...........
  40c540:	ffffffff ffffffff ffffffff ffffffff     ................
  40c550:	ffffffff ffffffff ffffffff 006b6b6b     ............kkk.
	...
  40c56c:	77770000 ffffff77 ffffffff d5d5ffff     ..www...........
  40c57c:	0b0b0bd5 00000000 00000000 00000000     ................
  40c58c:	12000000 f6f61212 fffffff6 ffffffff     ................
  40c59c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c5ac:	ffffffff ffffffff ffffffff ffffffff     ................
  40c5bc:	ffffffff ffffffff 050505ff 00000000     ................
	...
  40c5d4:	84282828 0a0a8484 0000000a 00000000     (((.............
	...
  40c5ec:	01000000 00000101 00000000 00000000     ................
  40c5fc:	00000000 78787800 ffffffff ffffffff     .....xxx........
  40c60c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c61c:	ffffffff ffffffff ffffffff 7cffffff     ...............|
  40c62c:	00007c7c 00000000 00000000 00000000     ||..............
  40c63c:	67676700 ffffffff ffffffff ffffffff     .ggg............
  40c64c:	01858585 00000101 00000000 00000000     ................
  40c65c:	00000000 51515100 ffffffff ffffffff     .....QQQ........
  40c66c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c67c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c68c:	ffffffff cdcdcdff 00040404 00000000     ................
  40c69c:	00000000 27000000 ffff2727 cdcdcdff     .......'''......
  40c6ac:	00232323 00000000 0d0d0d00 933c3c3c     ###.........<<<.
  40c6bc:	05059393 00000005 00000000 00000000     ................
  40c6cc:	07070700 fff6f6f6 ffffffff ffffffff     ................
  40c6dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40c6ec:	ffffffff ffffffff ffffffff 8989ffff     ................
  40c6fc:	00000089 00000000 00000000 00000000     ................
  40c70c:	ff5e5e5e ffffffff ffffffff ffffffff     ^^^.............
  40c71c:	3d3dffff 0000003d 00000000 00000000     ..===...........
  40c72c:	00000000 e7090909 ffffe7e7 ffffffff     ................
  40c73c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c74c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c75c:	777777ff 000a0a0a 00000000 00000000     .www............
  40c76c:	00000000 25250000 ffffff25 ffffffff     ......%%%.......
  40c77c:	c4c4ffff bbbbbbc4 ffffffff 6d6dffff     ..............mm
  40c78c:	0000006d 00000000 00000000 00000000     m...............
  40c79c:	ff303030 ffffffff ffffffff ffffffff     000.............
  40c7ac:	ffffffff ffffffff ffffffff ffffffff     ................
  40c7bc:	ffffffff ffffffff ffffffff 787878ff     .............xxx
	...
  40c7d8:	6b000000 ffff6b6b ffffffff ffffffff     ...kkk..........
  40c7e8:	ffffffff edededff 000c0c0c 00000000     ................
	...
  40c800:	4a4a0000 ffffff4a ffffffff ffffffff     ..JJJ...........
  40c810:	ffffffff ffffffff ffffffff ffffffff     ................
  40c820:	ffffffff eaeaffff 343434ea 00010101     .........444....
	...
  40c840:	2e2e2e00 ffffffff ffffffff ffffffff     ................
  40c850:	ffffffff ffffffff 272727ff 00000000     .........'''....
	...
  40c868:	7e000000 ffff7e7e ffffffff ffffffff     ...~~~..........
  40c878:	ffffffff ffffffff ffffffff ffffffff     ................
  40c888:	ffffffff ffffffff ffffffff ffffffff     ................
  40c898:	00696969 00000000 00000000 00000000     iii.............
  40c8a8:	7b7b0000 ffffff7b ffffffff ffffffff     ..{{{...........
  40c8b8:	ffffffff 62ffffff 00006262 00000000     .......bbb......
	...
  40c8d0:	0a0a0a00 fff3f3f3 ffffffff ffffffff     ................
  40c8e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c8f0:	9b9bffff 1111119b 00000000 00000000     ................
	...
  40c90c:	01010100 ff868686 ffffffff ffffffff     ................
  40c91c:	ffffffff ffffffff ffffffff 00060606     ................
	...
  40c934:	03000000 eded0303 ffffffed ffffffff     ................
  40c944:	ffffffff ffffffff ffffffff ffffffff     ................
  40c954:	ffffffff ffffffff ffffffff ffffffff     ................
  40c964:	58ffffff 00005858 00000000 00000000     ...XXX..........
  40c974:	00000000 8e8e8e00 ffffffff ffffffff     ................
  40c984:	ffffffff ffffffff ffffffff 151515ff     ................
	...
  40c9a0:	68000000 ffff6868 ffffffff ffffffff     ...hhh..........
  40c9b0:	ffffffff ffffffff fcffffff 4c4cfcfc     ..............LL
  40c9c0:	0303034c 00000000 00000000 00000000     L...............
	...
  40c9d8:	06060600 ff6c6c6c ffffffff ffffffff     ....lll.........
  40c9e8:	ffffffff ffffffff ffffffff 03ffffff     ................
  40c9f8:	00000303 00000000 00000000 00000000     ................
  40ca08:	37373700 ffffffff ffffffff ffffffff     .777............
  40ca18:	ffffffff ffffffff ffffffff ffffffff     ................
  40ca28:	ffffffff ffffffff ffffffff 3b3bffff     ..............;;
  40ca38:	0000003b 00000000 00000000 00000000     ;...............
  40ca48:	ffb9b9b9 ffffffff ffffffff ffffffff     ................
  40ca58:	ffffffff ffffffff 00646464 00000000     ........ddd.....
	...
  40ca70:	1d1d0000 ffffff1d ffffffff ffffffff     ................
  40ca80:	ffffffff ffffffff 2a2affff 0000002a     ..........***...
	...
  40caa4:	1b1b1b00 ffbbbbbb ffffffff ffffffff     ................
  40cab4:	ffffffff ffffffff ffffffff ffffffff     ................
  40cac4:	2b2bffff 0000002b 00000000 00000000     ..+++...........
  40cad4:	00000000 70000000 ffff7070 ffffffff     .......ppp......
  40cae4:	ffffffff ffffffff ffffffff ffffffff     ................
  40caf4:	ffffffff ffffffff ffffffff ffffffff     ................
  40cb04:	222222ff 00000000 00000000 00000000     ."""............
  40cb14:	fc040404 fffffcfc ffffffff ffffffff     ................
  40cb24:	ffffffff ffffffff f6ffffff 0b0bf6f6     ................
  40cb34:	0000000b 00000000 00000000 01010100     ................
  40cb44:	ffc4c4c4 ffffffff ffffffff ffffffff     ................
  40cb54:	9191ffff 00000091 00000000 00000000     ................
	...
  40cb70:	05050500 bd4f4f4f ffffbdbd ffffffff     ....OOO.........
  40cb80:	ffffffff ffffffff ffffffff ffffffff     ................
  40cb90:	ffffffff d7d7d7ff 000c0c0c 00000000     ................
	...
  40cba8:	06060000 b9b9b906 ffffffff ffffffff     ................
  40cbb8:	ffffffff ffffffff ffffffff ffffffff     ................
  40cbc8:	ffffffff ffffffff ffffffff 000f0f0f     ................
	...
  40cbe0:	13000000 ffff1313 ffffffff ffffffff     ................
  40cbf0:	ffffffff ffffffff ffffffff ffffffff     ................
  40cc00:	404040ff 00000000 00000000 00000000     .@@@............
  40cc10:	52000000 ffff5252 ffffffff ffffffff     ...RRR..........
  40cc20:	ffffffff 6b6b6bff 00000000 00000000     .....kkk........
	...
  40cc44:	01010000 15151501 ff5a5a5a ffffffff     ........ZZZ.....
  40cc54:	ffffffff ffffffff ffffffff ffffffff     ................
  40cc64:	8fffffff 02028f8f 00000002 00000000     ................
	...
  40cc7c:	f3171717 fffff3f3 ffffffff ffffffff     ................
  40cc8c:	ffffffff ffffffff ffffffff ffffffff     ................
  40cc9c:	ffffffff 00c6c6c6 00000000 00000000     ................
  40ccac:	00000000 27270000 ffffff27 ffffffff     ......'''.......
  40ccbc:	ffffffff ffffffff ffffffff ffffffff     ................
  40cccc:	ffffffff 00a5a5a5 00000000 00000000     ................
  40ccdc:	00000000 20200000 ffffff20 ffffffff     ......   .......
  40ccec:	ffffffff ffffffff 04c4c4c4 00000404     ................
	...
  40cd1c:	4c4c0000 ffffff4c ffffffff d0d0ffff     ..LLL...........
  40cd2c:	515151d0 44444444 44444444 14141444     .QQQDDDDDDDDD...
	...
  40cd4c:	39390000 ffffff39 ffffffff ffffffff     ..999...........
  40cd5c:	ffffffff ffffffff ffffffff ffffffff     ................
  40cd6c:	61ffffff 00006161 00000000 00000000     ...aaa..........
  40cd7c:	00000000 52525200 ffffffff ffffffff     .....RRR........
  40cd8c:	ffffffff ffffffff ffffffff ffffffff     ................
  40cd9c:	ffffffff 0d0dffff 0000000d 00000000     ................
  40cdac:	00000000 05050500 fff6f6f6 ffffffff     ................
  40cdbc:	ffffffff ffffffff 6f6fffff 0909096f     ..........ooo...
	...
  40cdec:	0a0a0a00 fffcfcfc b9b9ffff 0a0a0ab9     ................
	...
  40ce1c:	01010100 ff767676 ffffffff ffffffff     ....vvv.........
  40ce2c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ce3c:	2a2affff 0000002a 00000000 00000000     ..***...........
  40ce4c:	00000000 ffa8a8a8 ffffffff ffffffff     ................
  40ce5c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ce6c:	ffffffff 343434ff 00000000 00000000     .....444........
  40ce7c:	00000000 96000000 ffff9696 ffffffff     ................
  40ce8c:	ffffffff ffffffff ffffffff 7bf6f6f6     ...............{
  40ce9c:	32327b7b 0b0b0b32 00000000 00000000     {{222...........
	...
  40cebc:	8e000000 f9f98e8e 181818f9 00000000     ................
	...
  40ceec:	12000000 ffff1212 ffffffff ffffffff     ................
  40cefc:	ffffffff ffffffff ffffffff e7e7ffff     ................
  40cf0c:	050505e7 00000000 00000000 00000000     ................
  40cf1c:	ff0a0a0a ffffffff ffffffff ffffffff     ................
  40cf2c:	ffffffff ffffffff ffffffff ffffffff     ................
  40cf3c:	ffffffff 006b6b6b 00000000 00000000     ....kkk.........
  40cf4c:	00000000 5a5a0000 ffffff5a ffffffff     ......ZZZ.......
  40cf5c:	ffffffff ffffffff ffffffff ffffffff     ................
  40cf6c:	ffffffff 96ffffff 3f3f9696 1212123f     ..........???...
	...
  40cf8c:	3b3b0000 4545453b 00000000 00000000     ..;;;EEE........
	...
  40cfbc:	03030000 ffffff03 ffffffff ffffffff     ................
  40cfcc:	ffffffff ffffffff ffffffff 626262ff     .............bbb
	...
  40cfe8:	30000000 ffff3030 ffffffff ffffffff     ...000..........
  40cff8:	ffffffff ffffffff ffffffff ffffffff     ................
  40d008:	ffffffff afffffff 0000afaf 00000000     ................
	...
  40d020:	34343400 ffffffff ffffffff ffffffff     .444............
  40d030:	ffffffff ffffffff ffffffff ffffffff     ................
  40d040:	ffffffff ffffffff afffffff 0303afaf     ................
  40d050:	00000003 00000000 00000000 0a0a0a00     ................
  40d060:	00020202 00000000 00000000 00000000     ................
	...
  40d08c:	1b1b1b00 ffffffff ffffffff ffffffff     ................
  40d09c:	ffffffff ffffffff ffffffff 001a1a1a     ................
	...
  40d0b8:	88880000 ffffff88 ffffffff ffffffff     ................
  40d0c8:	ffffffff ffffffff ffffffff ffffffff     ................
  40d0d8:	ffffffff fcfcffff 040404fc 00000000     ................
	...
  40d0f0:	ff202020 ffffffff ffffffff ffffffff        .............
  40d100:	ffffffff ffffffff ffffffff ffffffff     ................
  40d110:	ffffffff ffffffff ffffffff 1e1e1eff     ................
	...
  40d158:	11111100 ffafafaf ffffffff ffffffff     ................
  40d168:	ffffffff ffffffff ffffffff 00868686     ................
	...
  40d184:	0d0d0000 ffffff0d ffffffff ffffffff     ................
  40d194:	ffffffff ffffffff ffffffff ffffffff     ................
  40d1a4:	ffffffff ffffffff ffffffff 00141414     ................
	...
  40d1bc:	13000000 ffff1313 ffffffff ffffffff     ................
  40d1cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d1dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d1ec:	00555555 00000000 00000000 00000000     UUU.............
	...
  40d208:	01010000 74747401 abcdcdcd abababab     .....ttt........
  40d218:	abababab abababab 9393abab ababab93     ................
  40d228:	fffcfcfc ffffffff ffffffff ffffffff     ................
  40d238:	ffffffff ffffffff 1effffff 00001e1e     ................
	...
  40d254:	44444400 ffffffff ffffffff ffffffff     .DDD............
  40d264:	ffffffff ffffffff ffffffff ffffffff     ................
  40d274:	ffffffff ffffffff 1dffffff 00001d1d     ................
	...
  40d28c:	09090000 ffffff09 ffffffff ffffffff     ................
  40d29c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d2ac:	ffffffff ffffffff ffffffff cbffffff     ................
  40d2bc:	0101cbcb 00000001 00000000 00000000     ................
	...
  40d2d8:	39393900 ffffffff ffffffff ffffffff     .999............
  40d2e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40d2f8:	ffffffff ffffffff ffffffff ffffffff     ................
  40d308:	ffffffff 76ffffff 00007676 00000000     .......vvv......
	...
  40d320:	05050500 ffd5d5d5 ffffffff ffffffff     ................
  40d330:	ffffffff ffffffff ffffffff ffffffff     ................
  40d340:	ffffffff ffffffff ffffffff 2525ffff     ..............%%
  40d350:	00000025 00000000 00000000 05050500     %...............
  40d360:	ffffffff ffffffff ffffffff ffffffff     ................
  40d370:	ffffffff ffffffff ffffffff ffffffff     ................
  40d380:	ffffffff ffffffff ffffffff 171717ff     ................
	...
  40d3a4:	12121200 ffededed ffffffff ffffffff     ................
  40d3b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d3c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d3d4:	ffffffff edffffff 0f0feded 0000000f     ................
	...
  40d3f0:	ff3d3d3d ffffffff ffffffff ffffffff     ===.............
  40d400:	ffffffff ffffffff ffffffff ffffffff     ................
  40d410:	ffffffff ffffffff ffffffff 2c2c2cff     .............,,,
	...
  40d42c:	ff020202 ffffffff ffffffff ffffffff     ................
  40d43c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d44c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d45c:	00474747 00000000 00000000 00000000     GGG.............
  40d46c:	00000000 03030300 ffa0a0a0 ffffffff     ................
  40d47c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d48c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d49c:	ffffffff ffffffff ffffffff 3d3dffff     ..............==
  40d4ac:	0000003d 00000000 00000000 00000000     =...............
  40d4bc:	cd050505 ffffcdcd ffffffff ffffffff     ................
  40d4cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d4dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d4ec:	002e2e2e 00000000 00000000 02000000     ................
  40d4fc:	ffff0202 ffffffff ffffffff ffffffff     ................
  40d50c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d51c:	ffffffff ffffffff ffffffff a9ffffff     ................
  40d52c:	0000a9a9 00000000 00000000 00000000     ................
  40d53c:	00000000 ff515151 ffffffff ffffffff     ....QQQ.........
  40d54c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d55c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d56c:	ffffffff ffffffff 7c7cffff 0101017c     ..........|||...
	...
  40d588:	4f000000 ffff4f4f ffffffff ffffffff     ...OOO..........
  40d598:	ffffffff ffffffff ffffffff ffffffff     ................
  40d5a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40d5b8:	27ffffff 00002727 00000000 00000000     ...'''..........
  40d5c8:	06060000 ffffff06 ffffffff ffffffff     ................
  40d5d8:	ffffffff ffffffff ffffffff ffffffff     ................
  40d5e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40d5f8:	ffffffff 111111ff 00000000 00000000     ................
  40d608:	00000000 ff1e1e1e ffffffff ffffffff     ................
  40d618:	ffffffff ffffffff ffffffff ffffffff     ................
  40d628:	ffffffff ffffffff ffffffff ffffffff     ................
  40d638:	ffffffff ffffffff bfbfffff 090909bf     ................
	...
  40d654:	13000000 f6f61313 fffffff6 ffffffff     ................
  40d664:	ffffffff ffffffff ffffffff ffffffff     ................
  40d674:	ffffffff ffffffff ffffffff ffffffff     ................
  40d684:	ffffffff 2020ffff 00000020 00000000     ......   .......
  40d694:	00000000 0b0b0b00 ffffffff ffffffff     ................
  40d6a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d6b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d6c4:	ffffffff ffffffff 02767676 00000202     ........vvv.....
  40d6d4:	00000000 c60d0d0d ffffc6c6 ffffffff     ................
  40d6e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d6f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d704:	ffffffff ffffffff d7d7ffff 111111d7     ................
	...
  40d720:	02000000 8d8d0202 ffffff8d ffffffff     ................
  40d730:	ffffffff ffffffff ffffffff ffffffff     ................
  40d740:	ffffffff ffffffff ffffffff ffffffff     ................
  40d750:	ffffffff ffffffff 151515ff 00000000     ................
	...
  40d768:	ff111111 ffffffff ffffffff ffffffff     ................
  40d778:	ffffffff ffffffff ffffffff ffffffff     ................
  40d788:	ffffffff ffffffff ffffffff ffffffff     ................
  40d798:	ffffffff a8a8ffff 474747a8 da545454     .........GGGTTT.
  40d7a8:	ffffdada ffffffff ffffffff ffffffff     ................
  40d7b8:	ffffffff ffffffff ffffffff ffffffff     ................
  40d7c8:	ffffffff ffffffff ffffffff ffffffff     ................
  40d7d8:	eaeaffff 1a1a1aea 00000000 00000000     ................
	...
  40d7f0:	47470000 ffffff47 ffffffff ffffffff     ..GGG...........
  40d800:	ffffffff ffffffff ffffffff ffffffff     ................
  40d810:	ffffffff ffffffff ffffffff ffffffff     ................
  40d820:	ffffffff ffffffff 00050505 00000000     ................
  40d830:	00000000 20000000 ffff2020 ffffffff     .......   ......
  40d840:	ffffffff ffffffff ffffffff ffffffff     ................
  40d850:	ffffffff ffffffff ffffffff ffffffff     ................
  40d860:	ffffffff ffffffff ffffffff ffffffff     ................
  40d870:	ffffffff ffffffff ffffffff ffffffff     ................
  40d880:	ffffffff ffffffff ffffffff ffffffff     ................
  40d890:	ffffffff ffffffff ffffffff ffffffff     ................
  40d8a0:	ffffffff dcdcffff 1b1b1bdc 00000000     ................
	...
  40d8bc:	1e1e0000 fcfcfc1e ffffffff ffffffff     ................
  40d8cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d8dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d8ec:	ffffffff ffffffff 00c4c4c4 00000000     ................
	...
  40d904:	38380000 ffffff38 ffffffff ffffffff     ..888...........
  40d914:	ffffffff ffffffff ffffffff ffffffff     ................
  40d924:	ffffffff ffffffff ffffffff ffffffff     ................
  40d934:	ffffffff ffffffff ffffffff ffffffff     ................
  40d944:	ffffffff ffffffff ffffffff ffffffff     ................
  40d954:	ffffffff ffffffff ffffffff ffffffff     ................
  40d964:	ffffffff ffffffff ffffffff bfbfffff     ................
  40d974:	111111bf 00000000 00000000 00000000     ................
  40d984:	00000000 0f0f0000 cdcdcd0f ffffffff     ................
  40d994:	ffffffff ffffffff ffffffff ffffffff     ................
  40d9a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d9b4:	ffffffff ffffffff ffffffff 73ffffff     ...............s
  40d9c4:	00007373 00000000 00000000 00000000     ss..............
  40d9d4:	57575700 ffffffff ffffffff ffffffff     .WWW............
  40d9e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d9f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40da04:	ffffffff ffffffff ffffffff ffffffff     ................
  40da14:	ffffffff ffffffff ffffffff ffffffff     ................
  40da24:	ffffffff ffffffff ffffffff ffffffff     ................
  40da34:	ffffffff ffffffff 7a7affff 0909097a     ..........zzz...
	...
  40da54:	0a0a0000 b3b3b30a ffffffff ffffffff     ................
  40da64:	ffffffff ffffffff ffffffff ffffffff     ................
  40da74:	ffffffff ffffffff ffffffff ffffffff     ................
  40da84:	ffffffff ffffffff ffffffff 3636ffff     ..............66
  40da94:	00000036 00000000 00000000 00000000     6...............
  40daa4:	ff8e8e8e ffffffff ffffffff ffffffff     ................
  40dab4:	ffffffff ffffffff ffffffff ffffffff     ................
  40dac4:	ffffffff ffffffff ffffffff ffffffff     ................
  40dad4:	ffffffff ffffffff ffffffff ffffffff     ................
  40dae4:	ffffffff ffffffff ffffffff ffffffff     ................
  40daf4:	ffffffff ffffffff ffffffff ffffffff     ................
  40db04:	edffffff 3d3deded 0101013d 00000000     ......===.......
	...
  40db20:	06060000 9b9b9b06 ffffffff ffffffff     ................
  40db30:	ffffffff ffffffff ffffffff ffffffff     ................
  40db40:	ffffffff ffffffff ffffffff ffffffff     ................
  40db50:	ffffffff ffffffff ffffffff ffffffff     ................
  40db60:	131313ff 00000000 00000000 00000000     ................
  40db70:	f6050505 fffff6f6 ffffffff ffffffff     ................
  40db80:	ffffffff ffffffff ffffffff ffffffff     ................
  40db90:	ffffffff ffffffff ffffffff ffffffff     ................
  40dba0:	ffffffff ffffffff ffffffff ffffffff     ................
  40dbb0:	ffffffff ffffffff ffffffff ffffffff     ................
  40dbc0:	ffffffff ffffffff ffffffff ffffffff     ................
  40dbd0:	77ffffff 0d0d7777 0000000d 00000000     ...www..........
	...
  40dbec:	0a0a0000 9b9b9b0a ffffffff ffffffff     ................
  40dbfc:	ffffffff ffffffff ffffffff ffffffff     ................
  40dc0c:	ffffffff ffffffff ffffffff ffffffff     ................
  40dc1c:	ffffffff ffffffff ffffffff ffffffff     ................
  40dc2c:	b7b7b7ff 00010101 00000000 00000000     ................
  40dc3c:	20000000 ffff2020 ffffffff d7ffffff     ...   ..........
  40dc4c:	eaead7d7 ffffffea ffffffff ffffffff     ................
  40dc5c:	ffffffff ffffffff ffffffff ffffffff     ................
  40dc6c:	ffffffff ffffffff ffffffff ffffffff     ................
  40dc7c:	ffffffff ffffffff ffffffff ffffffff     ................
  40dc8c:	ffffffff ffffffff ffffffff ffffffff     ................
  40dc9c:	1e868686 00001e1e 00000000 00000000     ................
	...
  40dcb8:	0f0f0000 b3b3b30f ffffffff ffffffff     ................
  40dcc8:	ffffffff ffffffff ffffffff ffffffff     ................
  40dcd8:	ffffffff ffffffff ffffffff ffffffff     ................
  40dce8:	ffffffff ffffffff ffffffff ffffffff     ................
  40dcf8:	ffffffff 00444444 00000000 00000000     ....DDD.........
  40dd08:	00000000 4c4c0000 ffffff4c 17bbbbbb     ......LLL.......
  40dd18:	00001717 03030300 78252525 fcfc7878     ........%%%xxx..
  40dd28:	fffffffc ffffffff ffffffff ffffffff     ................
  40dd38:	ffffffff ffffffff ffffffff ffffffff     ................
  40dd48:	ffffffff ffffffff ffffffff ffffffff     ................
  40dd58:	ffffffff ffffffff e7e7ffff 616161e7     .............aaa
  40dd68:	001a1a1a 00000000 00000000 00000000     ................
	...
  40dd84:	1e1e0000 cdcdcd1e ffffffff ffffffff     ................
  40dd94:	ffffffff ffffffff ffffffff ffffffff     ................
  40dda4:	ffffffff ffffffff ffffffff ffffffff     ................
  40ddb4:	ffffffff ffffffff ffffffff ffffffff     ................
  40ddc4:	ffffffff 0fffffff 00000f0f 00000000     ................
  40ddd4:	00000000 01010000 bdbdbd01 1effffff     ................
  40dde4:	00001e1e 00000000 00000000 00000000     ................
  40ddf4:	0c0c0c00 73343434 e2e27373 ffffffe2     ....444sss......
  40de04:	ffffffff ffffffff ffffffff ffffffff     ................
  40de14:	ffffffff ffffffff ffffffff ffffffff     ................
  40de24:	ffffffff 61c6c6c6 2a2a6161 0505052a     .......aaa***...
	...
  40de4c:	02000000 47470202 fcfcfc47 ffffffff     ......GGG.......
  40de5c:	ffffffff ffffffff ffffffff ffffffff     ................
  40de6c:	ffffffff ffffffff ffffffff ffffffff     ................
  40de7c:	ffffffff ffffffff ffffffff ffffffff     ................
  40de8c:	ffffffff ffffffff 74ffffff 00007474     ...........ttt..
	...
  40dea8:	1c1c1c00 ffffffff 0303ffff 00000003     ................
	...
  40decc:	03030300 27141414 42422727 5e5e5e42     .......'''BBB^^^
  40dedc:	7b6b6b6b 8e8e7b7b 7777778e 5a696969     kkk{{{...wwwiiiZ
  40deec:	3b3b5a5a 2323233b 000f0f0f 00000000     ZZ;;;###........
	...
  40df18:	13000000 8d8d1313 ffffff8d ffffffff     ................
  40df28:	ffffffff ffffffff ffffffff ffffffff     ................
  40df38:	ffffffff ffffffff ffffffff ffffffff     ................
  40df48:	ffffffff ffffffff ffffffff ffffffff     ................
  40df58:	ffffffff ffffffff ffffffff 1717ffff     ................
  40df68:	00000017 00000000 00000000 00000000     ................
  40df78:	ff5d5d5d ffffffff 0f0f0fff 00000000     ]]].............
	...
  40dfe4:	4e050505 f6f64e4e fffffff6 ffffffff     ...NNN..........
  40dff4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e004:	ffffffff ffffffff ffffffff ffffffff     ................
  40e014:	ffffffff ffffffff ffffffff ffffffff     ................
  40e024:	ffffffff ffffffff ffffffff 7a7affff     ..............zz
  40e034:	0000007a 00000000 00000000 00000000     z...............
  40e044:	e7090909 ffffe7e7 ffffffff 004e4e4e     ............NNN.
	...
  40e0ac:	04040400 cd373737 ffffcdcd ffffffff     ....777.........
  40e0bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40e0cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40e0dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40e0ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40e0fc:	f3f3ffff 101010f3 00000000 00000000     ................
  40e10c:	00000000 47000000 ffff4747 ffffffff     .......GGG......
  40e11c:	eaffffff 0a0aeaea 0000000a 00000000     ................
	...
  40e174:	0d0d0000 4444440d ffd7d7d7 ffffffff     .....DDD........
  40e184:	ffffffff ffffffff ffffffff ffffffff     ................
  40e194:	ffffffff ffffffff ffffffff ffffffff     ................
  40e1a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e1b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e1c4:	ffffffff ffffffff 464646ff 00000000     .........FFF....
	...
  40e1dc:	07000000 dfdf0707 ffffffdf ffffffff     ................
  40e1ec:	ffffffff 545454ff 00000000 00000000     .....TTT........
	...
  40e23c:	300a0a0a 88883030 ffffff88 ffffffff     ...000..........
  40e24c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e25c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e26c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e27c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e28c:	ffffffff ffffffff ffffffff 9b9b9bff     ................
  40e29c:	00030303 00000000 00000000 00000000     ................
  40e2ac:	4a4a0000 ffffff4a ffffffff ffffffff     ..JJJ...........
  40e2bc:	ffffffff 14f9f9f9 00001414 00000000     ................
	...
  40e2d8:	0f1a1a1a 02020f0f 00000002 00000000     ................
	...
  40e2fc:	13040404 27271313 52525227 ffa8a8a8     ......'''RRR....
  40e30c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e31c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e32c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e33c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e34c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e35c:	ffffffff ffffffff dfdfdfff 000f0f0f     ................
	...
  40e378:	11110000 f3f3f311 ffffffff ffffffff     ................
  40e388:	ffffffff ffffffff 8a8affff 0101018a     ................
	...
  40e3a4:	1b000000 f0f01b1b f3f3f3f0 8aa5a5a5     ................
  40e3b4:	76768a8a 65656576 6b626262 78786b6b     ..vvveeebbbkkkxx
  40e3c4:	8e8e8e78 ffb9b9b9 ffffffff ffffffff     x...............
  40e3d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e3e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e3f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e404:	ffffffff ffffffff ffffffff ffffffff     ................
  40e414:	ffffffff ffffffff ffffffff ffffffff     ................
  40e424:	ffffffff ffffffff ffffffff fcfcfcff     ................
  40e434:	00252525 00000000 00000000 00000000     %%%.............
  40e444:	00000000 84848400 ffffffff ffffffff     ................
  40e454:	ffffffff ffffffff ffffffff ffffffff     ................
  40e464:	003c3c3c 00000000 00000000 00000000     <<<.............
  40e474:	00000000 2a2a2a00 ffffffff ffffffff     .....***........
  40e484:	ffffffff ffffffff ffffffff ffffffff     ................
  40e494:	ffffffff ffffffff ffffffff ffffffff     ................
  40e4a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e4b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e4c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e4d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e4e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e4f4:	ffffffff ffffffff ffffffff 00343434     ............444.
	...
  40e514:	32323200 ffffffff ffffffff ffffffff     .222............
  40e524:	ffffffff ffffffff ffffffff f0ffffff     ................
  40e534:	1414f0f0 00000014 00000000 00000000     ................
  40e544:	00000000 34000000 fcfc3434 fffffffc     .......444......
  40e554:	ffffffff ffffffff ffffffff ffffffff     ................
  40e564:	ffffffff ffffffff ffffffff ffffffff     ................
  40e574:	ffffffff ffffffff ffffffff ffffffff     ................
  40e584:	ffffffff ffffffff ffffffff ffffffff     ................
  40e594:	ffffffff ffffffff ffffffff ffffffff     ................
  40e5a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e5b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e5c4:	ffffffff ffffffff 00404040 00000000     ........@@@.....
	...
  40e5e0:	14141400 ffededed ffffffff ffffffff     ................
  40e5f0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e600:	ffffffff b7b7b7ff 00090909 00000000     ................
	...
  40e61c:	28282800 fff3f3f3 ffffffff ffffffff     .(((............
  40e62c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e63c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e64c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e65c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e66c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e67c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e68c:	ffffffff ffffffff fcfcfcff 00323232     ............222.
	...
  40e6ac:	05050500 ffadadad ffffffff ffffffff     ................
  40e6bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40e6cc:	ffffffff ffffffff 82ffffff 03038282     ................
  40e6dc:	00000003 00000000 00000000 00000000     ................
  40e6ec:	1e000000 d5d51e1e ffffffd5 ffffffff     ................
  40e6fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40e70c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e71c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e72c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e73c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e74c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e75c:	ffffffff dfdfdfff 00232323 00000000     ........###.....
	...
  40e778:	03030300 ff7c7c7c ffffffff ffffffff     ....|||.........
  40e788:	ffffffff ffffffff ffffffff ffffffff     ................
  40e798:	ffffffff ffffffff ffffffff ffffffff     ................
  40e7a8:	6b6b6bff 00010101 00000000 00000000     .kkk............
	...
  40e7c0:	0a0a0a00 ff818181 ffffffff ffffffff     ................
  40e7d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e7e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e7f0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e800:	ffffffff ffffffff ffffffff ffffffff     ................
  40e810:	ffffffff ffffffff ffffffff ffffffff     ................
  40e820:	ffffffff ffffffff ffffffff a0a0a0ff     ................
  40e830:	00101010 00000000 00000000 00000000     ................
  40e840:	00000000 01010100 ff646464 ffffffff     ........ddd.....
  40e850:	ffffffff ffffffff ffffffff ffffffff     ................
  40e860:	ffffffff ffffffff ffffffff ffffffff     ................
  40e870:	ffffffff ffffffff 5effffff 01015e5e     ...........^^^..
  40e880:	00000001 00000000 00000000 00000000     ................
  40e890:	01000000 3d3d0101 e7e7e73d ffffffff     ......===.......
  40e8a0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e8b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e8c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e8d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e8e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e8f0:	ffffffff f0f0ffff 464646f0 00030303     .........FFF....
	...
  40e910:	01010100 ff545454 ffffffff ffffffff     ....TTT.........
  40e920:	ffffffff ffffffff ffffffff ffffffff     ................
  40e930:	ffffffff ffffffff ffffffff ffffffff     ................
  40e940:	ffffffff ffffffff ffffffff 6b6b6bff     .............kkk
  40e950:	00030303 00000000 00000000 00000000     ................
	...
  40e968:	620b0b0b ffff6262 ffffffff ffffffff     ...bbb..........
  40e978:	ffffffff ffffffff ffffffff ffffffff     ................
  40e988:	ffffffff ffffffff ffffffff ffffffff     ................
  40e998:	ffffffff ffffffff ffffffff ffffffff     ................
  40e9a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40e9b8:	ffffffff ffffffff 7878ffff 0f0f0f78     ..........xxx...
	...
  40e9dc:	03030300 ff656565 ffffffff ffffffff     ....eee.........
  40e9ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40e9fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40ea0c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ea1c:	82ffffff 07078282 00000007 00000000     ................
	...
  40ea3c:	15151500 f3646464 fffff3f3 ffffffff     ....ddd.........
  40ea4c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ea5c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ea6c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ea7c:	ffffffff ffffffff ffffffff 74ffffff     ...............t
  40ea8c:	17177474 00000017 00000000 00000000     tt..............
	...
  40eaa8:	05050500 ff7c7c7c ffffffff ffffffff     ....|||.........
  40eab8:	ffffffff ffffffff ffffffff ffffffff     ................
  40eac8:	ffffffff ffffffff ffffffff ffffffff     ................
  40ead8:	ffffffff ffffffff ffffffff ffffffff     ................
  40eae8:	ffffffff ffffffff b7b7b7ff 00141414     ................
	...
  40eb10:	0a0a0000 4040400a ffa5a5a5 ffffffff     .....@@@........
  40eb20:	ffffffff ffffffff ffffffff ffffffff     ................
  40eb30:	ffffffff ffffffff ffffffff ffffffff     ................
  40eb40:	ffffffff ffffffff ffffffff ffffffff     ................
  40eb50:	b7b7b7ff 0f444444 00000f0f 00000000     ....DDD.........
	...
  40eb74:	14141400 ffafafaf ffffffff ffffffff     ................
  40eb84:	ffffffff ffffffff ffffffff ffffffff     ................
  40eb94:	ffffffff ffffffff ffffffff ffffffff     ................
  40eba4:	ffffffff ffffffff ffffffff ffffffff     ................
  40ebb4:	ffffffff ffffffff ffffffff f0ffffff     ................
  40ebc4:	3a3af0f0 0101013a 00000000 00000000     ..:::...........
	...
  40ebe8:	0d0d0000 3434340d ad6b6b6b ffffadad     .....444kkk.....
  40ebf8:	ffffffff ffffffff ffffffff ffffffff     ................
  40ec08:	ffffffff ffffffff ffffffff 71c6c6c6     ...............q
  40ec18:	36367171 13131336 00010101 00000000     qq666...........
	...
  40ec40:	32323200 ffededed ffffffff ffffffff     .222............
  40ec50:	ffffffff ffffffff ffffffff ffffffff     ................
  40ec60:	ffffffff ffffffff ffffffff ffffffff     ................
  40ec70:	ffffffff ffffffff ffffffff ffffffff     ................
  40ec80:	ffffffff ffffffff ffffffff ffffffff     ................
  40ec90:	ffffffff ffffffff 12888888 00001212     ................
	...
  40ecc4:	04040400 1d141414 25251d1d 2c2c2c25     ..........%%%,,,
  40ecd4:	272e2e2e 20202727 15151520 00050505     ...'''   .......
	...
  40ed08:	11110000 84848411 ffffffff ffffffff     ................
  40ed18:	ffffffff ffffffff ffffffff ffffffff     ................
  40ed28:	ffffffff ffffffff ffffffff ffffffff     ................
  40ed38:	ffffffff ffffffff ffffffff ffffffff     ................
  40ed48:	ffffffff ffffffff ffffffff ffffffff     ................
  40ed58:	ffffffff ffffffff ffffffff ffffffff     ................
  40ed68:	f6f6ffff 4f4f4ff6 00090909 00000000     .....OOO........
	...
  40edd0:	07000000 4a4a0707 f3f3f34a ffffffff     ......JJJ.......
  40ede0:	ffffffff ffffffff ffffffff ffffffff     ................
  40edf0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ee00:	ffffffff ffffffff ffffffff ffffffff     ................
  40ee10:	ffffffff ffffffff ffffffff ffffffff     ................
  40ee20:	ffffffff ffffffff ffffffff ffffffff     ................
  40ee30:	ffffffff ffffffff ffffffff e4ffffff     ................
  40ee40:	4949e4e4 0a0a0a49 00000000 00000000     ..III...........
	...
  40ee9c:	47090909 dfdf4747 ffffffdf ffffffff     ...GGG..........
  40eeac:	ffffffff ffffffff ffffffff ffffffff     ................
  40eebc:	ffffffff ffffffff ffffffff ffffffff     ................
  40eecc:	ffffffff ffffffff ffffffff ffffffff     ................
  40eedc:	ffffffff ffffffff ffffffff ffffffff     ................
  40eeec:	ffffffff ffffffff ffffffff ffffffff     ................
  40eefc:	ffffffff ffffffff ffffffff ffffffff     ................
  40ef0c:	ffffffff ffffffff 67f6f6f6 1c1c6767     ...........ggg..
  40ef1c:	0101011c 00000000 00000000 00000000     ................
	...
  40ef60:	01010000 1c1c1c01 e75c5c5c ffffe7e7     ........\\\.....
  40ef70:	ffffffff ffffffff ffffffff ffffffff     ................
  40ef80:	ffffffff ffffffff ffffffff ffffffff     ................
  40ef90:	ffffffff ffffffff ffffffff ffffffff     ................
  40efa0:	ffffffff ffffffff ffffffff ffffffff     ................
  40efb0:	ffffffff ffffffff ffffffff ffffffff     ................
  40efc0:	ffffffff ffffffff ffffffff ffffffff     ................
  40efd0:	ffffffff ffffffff ffffffff ffffffff     ................
  40efe0:	ffffffff ffffffff ffffffff 51c9c9c9     ...............Q
  40eff0:	20205151 05050520 00000000 00000000     QQ   ...........
	...
  40f028:	20050505 4c4c2020 bdbdbd4c ffffffff     ...   LLL.......
  40f038:	ffffffff ffffffff ffffffff ffffffff     ................
  40f048:	ffffffff ffffffff ffffffff ffffffff     ................
  40f058:	ffffffff ffffffff ffffffff ffffffff     ................
  40f068:	ffffffff ffffffff ffffffff ffffffff     ................
  40f078:	ffffffff ffffffff ffffffff ffffffff     ................
  40f088:	ffffffff ffffffff ffffffff ffffffff     ................
  40f098:	ffffffff ffffffff ffffffff ffffffff     ................
  40f0a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40f0b8:	ffffffff ffffffff ffffffff 96f6f6f6     ................
  40f0c8:	5a5a9696 3434345a 131e1e1e 09091313     ..ZZZ444........
  40f0d8:	05050509 02010101 06060202 0c0c0c06     ................
  40f0e8:	20111111 37372020 55555537 f68f8f8f     ...   777UUU....
  40f0f8:	fffff6f6 ffffffff ffffffff ffffffff     ................
  40f108:	ffffffff ffffffff ffffffff ffffffff     ................
  40f118:	ffffffff ffffffff ffffffff ffffffff     ................
  40f128:	ffffffff ffffffff ffffffff ffffffff     ................
  40f138:	ffffffff ffffffff ffffffff ffffffff     ................
  40f148:	00ffffff                                ....

0040f14c <image_data_termometro>:
  40f14c:	ffffffff ffffffff ffffffff ffffffff     ................
  40f15c:	ffffffff ffffffff ffffffff 9999ffff     ................
  40f16c:	3b3b3b99 09141414 01010909 00000001     .;;;............
	...
  40f188:	11070707 32321111 7c7c7c32 ffffffff     ......222|||....
  40f198:	ffffffff ffffffff ffffffff ffffffff     ................
  40f1a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40f1b8:	ffffffff ffffffff ffffffff ffffffff     ................
  40f1c8:	ffffffff ffffffff ffffffff ffffffff     ................
  40f1d8:	ffffffff ffffffff ffffffff ffffffff     ................
  40f1e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40f1f8:	ffffffff ffffffff ffffffff b5b5ffff     ................
  40f208:	232323b5 00000000 00000000 00000000     .###............
	...
  40f234:	17170000 8f8f8f17 ffffffff ffffffff     ................
  40f244:	ffffffff ffffffff ffffffff ffffffff     ................
  40f254:	ffffffff ffffffff ffffffff ffffffff     ................
  40f264:	ffffffff ffffffff ffffffff ffffffff     ................
  40f274:	ffffffff ffffffff ffffffff ffffffff     ................
  40f284:	ffffffff ffffffff ffffffff ffffffff     ................
  40f294:	ffffffff ffffffff ffffffff ffffffff     ................
  40f2a4:	818181ff 00070707 00000000 00000000     ................
	...
  40f2d8:	03000000 5a5a0303 ffffff5a ffffffff     ......ZZZ.......
  40f2e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40f2f8:	ffffffff ffffffff ffffffff ffffffff     ................
  40f308:	ffffffff ffffffff ffffffff ffffffff     ................
  40f318:	ffffffff ffffffff ffffffff ffffffff     ................
  40f328:	ffffffff ffffffff ffffffff ffffffff     ................
  40f338:	ffffffff ffffffff ffffffff 03919191     ................
  40f348:	00000303 00000000 00000000 00000000     ................
	...
  40f380:	5c000000 ffff5c5c ffffffff ffffffff     ...\\\..........
  40f390:	ffffffff ffffffff ffffffff ffffffff     ................
  40f3a0:	ffffffff ffffffff ffffffff ffffffff     ................
  40f3b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40f3c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40f3d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40f3e0:	d5ffffff 0909d5d5 00000009 00000000     ................
	...
  40f424:	03030300 ff999999 ffffffff ffffffff     ................
  40f434:	ffffffff ffffffff ffffffff ffffffff     ................
  40f444:	ffffffff ffffffff ffffffff ffffffff     ................
  40f454:	ffffffff ffffffff ffffffff ffffffff     ................
  40f464:	ffffffff ffffffff ffffffff ffffffff     ................
  40f474:	ffffffff ffffffff ffffffff ffffffff     ................
  40f484:	383838ff 00000000 00000000 00000000     .888............
  40f494:	04000000 3b3b0404 8e8e8e3b d0c4c4c4     ......;;;.......
  40f4a4:	d0d0d0d0 d0d0d0d0 cbd0d0d0 9b9bcbcb     ................
  40f4b4:	4a4a4a9b 000a0a0a 00000000 00000000     .JJJ............
  40f4c4:	00000000 1c1c0000 ffffff1c ffffffff     ................
  40f4d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f4e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f4f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f504:	ffffffff ffffffff ffffffff ffffffff     ................
  40f514:	ffffffff ffffffff ffffffff ffffffff     ................
  40f524:	03e2e2e2 00000303 00000000 00000000     ................
  40f534:	0b0b0000 a9a9a90b ffffffff ffffffff     ................
  40f544:	ffffffff ffffffff ffffffff ffffffff     ................
  40f554:	ffffffff d2d2ffff 171717d2 00000000     ................
	...
  40f56c:	94000000 ffff9494 ffffffff ffffffff     ................
  40f57c:	ffffffff ffffffff ffffffff ffffffff     ................
  40f58c:	ffffffff ffffffff ffffffff ffffffff     ................
  40f59c:	ffffffff ffffffff ffffffff ffffffff     ................
  40f5ac:	ffffffff ffffffff ffffffff ffffffff     ................
  40f5bc:	ffffffff ffffffff 6969ffff 00000069     ..........iii...
	...
  40f5d4:	01010100 ff8f8f8f ffffffff ffffffff     ................
  40f5e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f5f4:	ffffffff ffffffff cbffffff 0606cbcb     ................
  40f604:	00000006 00000000 00000000 3d3d3d00     .............===
  40f614:	ffffffff ffffffff ffffffff ffffffff     ................
  40f624:	ffffffff ffffffff ffffffff ffffffff     ................
  40f634:	ffffffff ffffffff ffffffff ffffffff     ................
  40f644:	ffffffff ffffffff ffffffff ffffffff     ................
  40f654:	ffffffff ffffffff ffffffff ffffffff     ................
  40f664:	ffffffff 00383838 00000000 00000000     ....888.........
  40f674:	1d000000 ffff1d1d ffffffff ffffffff     ................
  40f684:	ffffffff ffffffff ffffffff ffffffff     ................
  40f694:	ffffffff ffffffff ffffffff ffffffff     ................
  40f6a4:	00393939 00000000 00000000 1b000000     999.............
  40f6b4:	ffff1b1b ffffffff ffffffff ffffffff     ................
  40f6c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f6d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f6e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f6f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f704:	ffffffff 2727ffff 00000027 00000000     ......'''.......
  40f714:	00000000 3f3f3f00 ffffffff ffffffff     .....???........
  40f724:	ffffffff f3ffffff 6f6ff3f3 6262626f     ..........ooobbb
  40f734:	ffd7d7d7 ffffffff ffffffff ffffffff     ................
  40f744:	6d6dffff 0000006d 00000000 00000000     ..mmm...........
  40f754:	10101000 ffffffff ffffffff ffffffff     ................
  40f764:	ffffffff ffffffff ffffffff ffffffff     ................
  40f774:	ffffffff ffffffff ffffffff ffffffff     ................
  40f784:	ffffffff ffffffff ffffffff ffffffff     ................
  40f794:	ffffffff ffffffff ffffffff ffffffff     ................
  40f7a4:	ffffffff ffffffff 00202020 00000000     ........   .....
  40f7b4:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  40f7c4:	ffffffff f0f0ffff 171717f0 00000000     ................
  40f7d4:	0a0a0000 bdbdbd0a ffffffff ffffffff     ................
  40f7e4:	ffffffff 00848484 00000000 00000000     ................
  40f7f4:	0a000000 ffff0a0a ffffffff ffffffff     ................
  40f804:	ffffffff ffffffff ffffffff ffffffff     ................
  40f814:	ffffffff ffffffff ffffffff ffffffff     ................
  40f824:	ffffffff ffffffff ffffffff ffffffff     ................
  40f834:	ffffffff ffffffff ffffffff ffffffff     ................
  40f844:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  40f85c:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  40f86c:	00656565 00000000 00000000 38000000     eee............8
  40f87c:	ffff3838 ffffffff ffffffff 8484ffff     88..............
  40f88c:	00000084 00000000 00000000 0a0a0a00     ................
  40f89c:	ffffffff ffffffff ffffffff ffffffff     ................
  40f8ac:	ffffffff ffffffff ffffffff ffffffff     ................
  40f8bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40f8cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40f8dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40f8ec:	ffffffff 00202020 00000000 00000000     ....   .........
  40f8fc:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  40f90c:	4646ffff 00000046 00000000 00000000     ..FFF...........
  40f91c:	23232300 ffffffff ffffffff ffffffff     .###............
  40f92c:	00848484 00000000 00000000 0a000000     ................
  40f93c:	ffff0a0a ffffffff ffffffff ffffffff     ................
  40f94c:	ffffffff ffffffff ffffffff ffffffff     ................
  40f95c:	ffffffff ffffffff ffffffff ffffffff     ................
  40f96c:	ffffffff ffffffff ffffffff ffffffff     ................
  40f97c:	ffffffff ffffffff ffffffff ffffffff     ................
  40f98c:	ffffffff 2020ffff 00000020 00000000     ......   .......
  40f99c:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  40f9ac:	ffffffff 00454545 00000000 00000000     ....EEE.........
  40f9bc:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  40f9cc:	8484ffff 00000084 00000000 00000000     ................
  40f9dc:	0a0a0a00 ffffffff ffffffff ffffffff     ................
  40f9ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40f9fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40fa0c:	ffffffff ffffffff ffffffff ffffffff     ................
  40fa1c:	ffffffff ffffffff ffffffff ffffffff     ................
  40fa2c:	ffffffff ffffffff 00202020 00000000     ........   .....
  40fa3c:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  40fa4c:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  40fa5c:	00000000 23232300 ffffffff ffffffff     .....###........
  40fa6c:	ffffffff 00848484 00000000 00000000     ................
  40fa7c:	0a000000 ffff0a0a ffffffff ffffffff     ................
  40fa8c:	ffffffff ffffffff ffffffff ffffffff     ................
  40fa9c:	ffffffff ffffffff ffffffff ffffffff     ................
  40faac:	ffffffff ffffffff ffffffff ffffffff     ................
  40fabc:	ffffffff ffffffff ffffffff ffffffff     ................
  40facc:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  40fae4:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  40faf4:	00454545 00000000 00000000 23000000     EEE............#
  40fb04:	ffff2323 ffffffff ffffffff 8484ffff     ##..............
  40fb14:	00000084 00000000 00000000 0a0a0a00     ................
  40fb24:	ffffffff ffffffff ffffffff ffffffff     ................
  40fb34:	ffffffff ffffffff ffffffff ffffffff     ................
  40fb44:	ffffffff ffffffff ffffffff ffffffff     ................
  40fb54:	ffffffff ffffffff ffffffff ffffffff     ................
  40fb64:	ffffffff ffffffff ffffffff ffffffff     ................
  40fb74:	ffffffff 00202020 00000000 00000000     ....   .........
  40fb84:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  40fb94:	4545ffff 00000045 00000000 00000000     ..EEE...........
  40fba4:	23232300 ffffffff ffffffff ffffffff     .###............
  40fbb4:	00848484 00000000 00000000 0a000000     ................
  40fbc4:	ffff0a0a ffffffff ffffffff ffffffff     ................
  40fbd4:	ffffffff ffffffff ffffffff ffffffff     ................
  40fbe4:	ffffffff ffffffff ffffffff ffffffff     ................
  40fbf4:	ffffffff ffffffff ffffffff ffffffff     ................
  40fc04:	ffffffff ffffffff ffffffff ffffffff     ................
  40fc14:	ffffffff 2020ffff 00000020 00000000     ......   .......
  40fc24:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  40fc34:	ffffffff 00454545 00000000 00000000     ....EEE.........
  40fc44:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  40fc54:	8484ffff 00000084 00000000 00000000     ................
  40fc64:	0a0a0a00 ffffffff ffffffff ffffffff     ................
  40fc74:	ffffffff ffffffff ffffffff ffffffff     ................
  40fc84:	ffffffff ffffffff ffffffff ffffffff     ................
  40fc94:	ffffffff ffffffff ffffffff ffffffff     ................
  40fca4:	ffffffff ffffffff ffffffff ffffffff     ................
  40fcb4:	ffffffff ffffffff 00202020 00000000     ........   .....
  40fcc4:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  40fcd4:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  40fce4:	00000000 23232300 ffffffff ffffffff     .....###........
  40fcf4:	ffffffff 00848484 00000000 00000000     ................
  40fd04:	0a000000 ffff0a0a ffffffff ffffffff     ................
  40fd14:	ffffffff ffffffff ffffffff ffffffff     ................
  40fd24:	ffffffff ffffffff ffffffff ffffffff     ................
  40fd34:	ffffffff ffffffff ffffffff ffffffff     ................
  40fd44:	ffffffff ffffffff ffffffff ffffffff     ................
  40fd54:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  40fd6c:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  40fd7c:	00454545 00000000 00000000 23000000     EEE............#
  40fd8c:	ffff2323 ffffffff ffffffff 8484ffff     ##..............
  40fd9c:	00000084 00000000 00000000 0a0a0a00     ................
  40fdac:	ffffffff ffffffff ffffffff ffffffff     ................
  40fdbc:	ffffffff ffffffff ffffffff ffffffff     ................
  40fdcc:	ffffffff ffffffff ffffffff ffffffff     ................
  40fddc:	ffffffff ffffffff ffffffff ffffffff     ................
  40fdec:	ffffffff ffffffff ffffffff ffffffff     ................
  40fdfc:	ffffffff 00202020 00000000 00000000     ....   .........
  40fe0c:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  40fe1c:	4545ffff 00000045 00000000 00000000     ..EEE...........
  40fe2c:	23232300 ffffffff ffffffff ffffffff     .###............
  40fe3c:	00848484 00000000 00000000 0a000000     ................
  40fe4c:	ffff0a0a ffffffff ffffffff ffffffff     ................
  40fe5c:	ffffffff ffffffff ffffffff ffffffff     ................
  40fe6c:	ffffffff ffffffff ffffffff ffffffff     ................
  40fe7c:	ffffffff ffffffff ffffffff ffffffff     ................
  40fe8c:	ffffffff ffffffff ffffffff ffffffff     ................
  40fe9c:	ffffffff 2020ffff 00000020 00000000     ......   .......
  40feac:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  40febc:	ffffffff 00454545 00000000 00000000     ....EEE.........
  40fecc:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  40fedc:	8484ffff 00000084 00000000 00000000     ................
  40feec:	0a0a0a00 ffffffff ffffffff ffffffff     ................
  40fefc:	ffffffff ffffffff ffffffff ffffffff     ................
  40ff0c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ff1c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ff2c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ff3c:	ffffffff ffffffff 00202020 00000000     ........   .....
  40ff4c:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  40ff5c:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  40ff6c:	00000000 23232300 ffffffff ffffffff     .....###........
  40ff7c:	ffffffff 00848484 00000000 00000000     ................
  40ff8c:	0a000000 ffff0a0a ffffffff ffffffff     ................
  40ff9c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ffac:	ffffffff ffffffff ffffffff ffffffff     ................
  40ffbc:	ffffffff ffffffff ffffffff ffffffff     ................
  40ffcc:	ffffffff ffffffff ffffffff ffffffff     ................
  40ffdc:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  40fff4:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  410004:	00454545 00000000 00000000 23000000     EEE............#
  410014:	ffff2323 ffffffff ffffffff 8484ffff     ##..............
  410024:	00000084 00000000 00000000 0a0a0a00     ................
  410034:	ffffffff ffffffff ffffffff ffffffff     ................
  410044:	ffffffff ffffffff ffffffff ffffffff     ................
  410054:	ffffffff ffffffff ffffffff ffffffff     ................
  410064:	ffffffff ffffffff ffffffff ffffffff     ................
  410074:	ffffffff ffffffff ffffffff ffffffff     ................
  410084:	ffffffff 00202020 00000000 00000000     ....   .........
  410094:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  4100a4:	4545ffff 00000045 00000000 00000000     ..EEE...........
  4100b4:	23232300 ffffffff ffffffff ffffffff     .###............
  4100c4:	00848484 00000000 00000000 0a000000     ................
  4100d4:	ffff0a0a ffffffff ffffffff ffffffff     ................
  4100e4:	ffffffff ffffffff ffffffff ffffffff     ................
  4100f4:	ffffffff ffffffff ffffffff ffffffff     ................
  410104:	ffffffff ffffffff ffffffff ffffffff     ................
  410114:	ffffffff ffffffff ffffffff ffffffff     ................
  410124:	ffffffff 2020ffff 00000020 00000000     ......   .......
  410134:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  410144:	ffffffff 00454545 00000000 00000000     ....EEE.........
  410154:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  410164:	8484ffff 00000084 00000000 00000000     ................
  410174:	0a0a0a00 ffffffff ffffffff ffffffff     ................
  410184:	ffffffff ffffffff ffffffff ffffffff     ................
  410194:	ffffffff ffffffff ffffffff ffffffff     ................
  4101a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4101b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4101c4:	ffffffff ffffffff 00202020 00000000     ........   .....
  4101d4:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  4101e4:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  4101f4:	00000000 23232300 ffffffff ffffffff     .....###........
  410204:	ffffffff 00848484 00000000 00000000     ................
  410214:	0a000000 ffff0a0a ffffffff ffffffff     ................
  410224:	ffffffff ffffffff ffffffff ffffffff     ................
  410234:	ffffffff ffffffff ffffffff ffffffff     ................
  410244:	ffffffff ffffffff ffffffff ffffffff     ................
  410254:	ffffffff ffffffff ffffffff ffffffff     ................
  410264:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  41027c:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  41028c:	00454545 00000000 00000000 23000000     EEE............#
  41029c:	ffff2323 ffffffff ffffffff 8484ffff     ##..............
  4102ac:	00000084 00000000 00000000 0a0a0a00     ................
  4102bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4102cc:	ffffffff ffffffff ffffffff ffffffff     ................
  4102dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4102ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4102fc:	ffffffff ffffffff ffffffff ffffffff     ................
  41030c:	ffffffff 00202020 00000000 00000000     ....   .........
  41031c:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  41032c:	4545ffff 00000045 00000000 00000000     ..EEE...........
  41033c:	23232300 ffffffff ffffffff ffffffff     .###............
  41034c:	00848484 00000000 00000000 0a000000     ................
  41035c:	ffff0a0a ffffffff ffffffff ffffffff     ................
  41036c:	ffffffff ffffffff ffffffff ffffffff     ................
  41037c:	ffffffff ffffffff ffffffff ffffffff     ................
  41038c:	ffffffff ffffffff ffffffff ffffffff     ................
  41039c:	ffffffff ffffffff ffffffff ffffffff     ................
  4103ac:	ffffffff 2020ffff 00000020 00000000     ......   .......
  4103bc:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  4103cc:	ffffffff 00454545 00000000 00000000     ....EEE.........
  4103dc:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  4103ec:	8484ffff 00000084 00000000 00000000     ................
  4103fc:	0a0a0a00 ffffffff ffffffff ffffffff     ................
  41040c:	ffffffff ffffffff ffffffff ffffffff     ................
  41041c:	ffffffff ffffffff ffffffff ffffffff     ................
  41042c:	ffffffff ffffffff ffffffff ffffffff     ................
  41043c:	ffffffff ffffffff ffffffff ffffffff     ................
  41044c:	ffffffff ffffffff 00202020 00000000     ........   .....
  41045c:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  41046c:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  41047c:	00000000 23232300 ffffffff ffffffff     .....###........
  41048c:	ffffffff 00848484 00000000 00000000     ................
  41049c:	0a000000 ffff0a0a ffffffff ffffffff     ................
  4104ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4104bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4104cc:	ffffffff ffffffff ffffffff ffffffff     ................
  4104dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4104ec:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  410504:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  410514:	00454545 00000000 00000000 23000000     EEE............#
  410524:	ffff2323 ffffffff ffffffff 8484ffff     ##..............
  410534:	00000084 00000000 00000000 0a0a0a00     ................
  410544:	ffffffff ffffffff ffffffff ffffffff     ................
  410554:	ffffffff ffffffff ffffffff ffffffff     ................
  410564:	ffffffff ffffffff ffffffff ffffffff     ................
  410574:	ffffffff ffffffff ffffffff ffffffff     ................
  410584:	ffffffff ffffffff ffffffff ffffffff     ................
  410594:	ffffffff 00202020 00000000 00000000     ....   .........
  4105a4:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  4105b4:	4545ffff 00000045 00000000 00000000     ..EEE...........
  4105c4:	23232300 ffffffff ffffffff ffffffff     .###............
  4105d4:	00848484 00000000 00000000 0a000000     ................
  4105e4:	ffff0a0a ffffffff ffffffff ffffffff     ................
  4105f4:	ffffffff ffffffff ffffffff ffffffff     ................
  410604:	ffffffff ffffffff ffffffff ffffffff     ................
  410614:	ffffffff ffffffff ffffffff ffffffff     ................
  410624:	ffffffff ffffffff ffffffff ffffffff     ................
  410634:	ffffffff 2020ffff 00000020 00000000     ......   .......
  410644:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  410654:	ffffffff 00454545 00000000 00000000     ....EEE.........
  410664:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  410674:	8484ffff 00000084 00000000 00000000     ................
  410684:	0a0a0a00 ffffffff ffffffff ffffffff     ................
  410694:	ffffffff ffffffff ffffffff ffffffff     ................
  4106a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4106b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4106c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4106d4:	ffffffff ffffffff 00202020 00000000     ........   .....
  4106e4:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  4106f4:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  410704:	00000000 23232300 ffffffff ffffffff     .....###........
  410714:	ffffffff 00848484 00000000 00000000     ................
  410724:	0a000000 ffff0a0a ffffffff ffffffff     ................
  410734:	ffffffff ffffffff ffffffff ffffffff     ................
  410744:	ffffffff ffffffff ffffffff ffffffff     ................
  410754:	ffffffff ffffffff ffffffff ffffffff     ................
  410764:	ffffffff ffffffff ffffffff ffffffff     ................
  410774:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  41078c:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  41079c:	00454545 00000000 00000000 23000000     EEE............#
  4107ac:	ffff2323 ffffffff ffffffff 8484ffff     ##..............
  4107bc:	00000084 00000000 00000000 0a0a0a00     ................
  4107cc:	ffffffff ffffffff ffffffff ffffffff     ................
  4107dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4107ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4107fc:	ffffffff ffffffff ffffffff ffffffff     ................
  41080c:	ffffffff ffffffff ffffffff ffffffff     ................
  41081c:	ffffffff 00202020 00000000 00000000     ....   .........
  41082c:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  41083c:	4545ffff 00000045 00000000 00000000     ..EEE...........
  41084c:	23232300 ffffffff ffffffff ffffffff     .###............
  41085c:	00848484 00000000 00000000 0a000000     ................
  41086c:	ffff0a0a ffffffff ffffffff ffffffff     ................
  41087c:	ffffffff ffffffff ffffffff ffffffff     ................
  41088c:	ffffffff ffffffff ffffffff ffffffff     ................
  41089c:	ffffffff ffffffff ffffffff ffffffff     ................
  4108ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4108bc:	ffffffff 2020ffff 00000020 00000000     ......   .......
  4108cc:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  4108dc:	ffffffff 00454545 00000000 00000000     ....EEE.........
  4108ec:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  4108fc:	8484ffff 00000084 00000000 00000000     ................
  41090c:	0a0a0a00 ffffffff ffffffff ffffffff     ................
  41091c:	ffffffff ffffffff ffffffff ffffffff     ................
  41092c:	ffffffff ffffffff ffffffff ffffffff     ................
  41093c:	ffffffff ffffffff ffffffff ffffffff     ................
  41094c:	ffffffff ffffffff ffffffff ffffffff     ................
  41095c:	ffffffff ffffffff 00202020 00000000     ........   .....
  41096c:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  41097c:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  41098c:	00000000 23232300 ffffffff ffffffff     .....###........
  41099c:	ffffffff 00848484 00000000 00000000     ................
  4109ac:	0a000000 ffff0a0a ffffffff ffffffff     ................
  4109bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4109cc:	ffffffff ffffffff ffffffff ffffffff     ................
  4109dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4109ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4109fc:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  410a14:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  410a24:	00454545 00000000 00000000 23000000     EEE............#
  410a34:	ffff2323 ffffffff ffffffff 8484ffff     ##..............
  410a44:	00000084 00000000 00000000 0a0a0a00     ................
  410a54:	ffffffff ffffffff ffffffff ffffffff     ................
  410a64:	ffffffff ffffffff ffffffff ffffffff     ................
  410a74:	ffffffff ffffffff ffffffff ffffffff     ................
  410a84:	ffffffff ffffffff ffffffff ffffffff     ................
  410a94:	ffffffff ffffffff ffffffff ffffffff     ................
  410aa4:	ffffffff 00202020 00000000 00000000     ....   .........
  410ab4:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  410ac4:	4545ffff 00000045 00000000 00000000     ..EEE...........
  410ad4:	23232300 ffffffff ffffffff ffffffff     .###............
  410ae4:	00848484 00000000 00000000 09000000     ................
  410af4:	85850909 4d4d4d85 232e2e2e 1b1b2323     .....MMM...###..
  410b04:	1b1b1b1b 34232323 54543434 a0a0a054     ....###444TTT...
  410b14:	ffffffff ffffffff ffffffff ffffffff     ................
  410b24:	ffffffff ffffffff ffffffff ffffffff     ................
  410b34:	ffffffff ffffffff ffffffff ffffffff     ................
  410b44:	ffffffff 2020ffff 00000020 00000000     ......   .......
  410b54:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  410b64:	ffffffff 00454545 00000000 00000000     ....EEE.........
  410b74:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  410b84:	8484ffff 00000084 00000000 00000000     ................
	...
  410bb4:	0a0a0000 3636360a ffa2a2a2 ffffffff     .....666........
  410bc4:	ffffffff ffffffff ffffffff ffffffff     ................
  410bd4:	ffffffff ffffffff ffffffff ffffffff     ................
  410be4:	ffffffff ffffffff 00202020 00000000     ........   .....
  410bf4:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  410c04:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  410c14:	00000000 23232300 ffffffff ffffffff     .....###........
  410c24:	ffffffff 00848484 00000000 00000000     ................
	...
  410c5c:	01010000 21212101 ffa2a2a2 ffffffff     .....!!!........
  410c6c:	ffffffff ffffffff ffffffff ffffffff     ................
  410c7c:	ffffffff ffffffff ffffffff ffffffff     ................
  410c8c:	2020ffff 00000020 00000000 00000000     ..   ...........
  410c9c:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  410cac:	00454545 00000000 00000000 23000000     EEE............#
  410cbc:	ffff2323 ffffffff bbffffff 1c1cbbbb     ##..............
  410ccc:	0000001c 00000000 00000000 00000000     ................
	...
  410d04:	02020000 3b3b3b02 fff3f3f3 ffffffff     .....;;;........
  410d14:	ffffffff ffffffff ffffffff ffffffff     ................
  410d24:	ffffffff ffffffff ffffffff 00202020     ............   .
	...
  410d3c:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  410d4c:	4545ffff 00000045 00000000 00000000     ..EEE...........
  410d5c:	23232300 ffffffff 7878ffff 06060678     .###......xxx...
	...
  410dac:	17170000 bdbdbd17 ffffffff ffffffff     ................
  410dbc:	ffffffff ffffffff ffffffff ffffffff     ................
  410dcc:	ffffffff 2020ffff 00000020 00000000     ......   .......
  410ddc:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  410dec:	ffffffff 00454545 00000000 00000000     ....EEE.........
  410dfc:	23000000 ffff2323 5e5e5eff 00010101     ...###...^^^....
	...
  410e20:	15010101 32321515 42424232 525a5a5a     ......222BBBZZZR
  410e30:	3d3d5252 2a2a2a3d 000b0b0b 00000000     RR===***........
	...
  410e50:	0b000000 a5a50b0b ffffffa5 ffffffff     ................
  410e60:	ffffffff ffffffff ffffffff ffffffff     ................
  410e70:	ffffffff 00202020 00000000 00000000     ....   .........
  410e80:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  410e90:	4545ffff 00000045 00000000 00000000     ..EEE...........
  410ea0:	23232300 01626262 00000101 00000000     .###bbb.........
	...
  410ebc:	4f0b0b0b c2c24f4f ffffffc2 ffffffff     ...OOO..........
  410ecc:	ffffffff ffffffff ffffffff ffffffff     ................
  410edc:	949494ff 03343434 00000303 00000000     ....444.........
	...
  410ef8:	b70a0a0a ffffb7b7 ffffffff ffffffff     ................
  410f08:	ffffffff ffffffff ffffffff 2020ffff     ..............  
  410f18:	00000020 00000000 00000000 4c4c4c00      ............LLL
  410f28:	ffffffff ffffffff ffffffff 00454545     ............EEE.
	...
  410f40:	0f000000 03030f0f 00000003 00000000     ................
	...
  410f58:	49040404 eaea4949 ffffffea ffffffff     ...III..........
  410f68:	ffffffff ffffffff ffffffff ffffffff     ................
  410f78:	ffffffff ffffffff ffffffff b7b7b7ff     ................
  410f88:	00272727 00000000 00000000 00000000     '''.............
  410f98:	00000000 10101000 ffe4e4e4 ffffffff     ................
  410fa8:	ffffffff ffffffff ffffffff ffffffff     ................
  410fb8:	00202020 00000000 00000000 4c000000        ............L
  410fc8:	ffff4c4c ffffffff ffffffff 4545ffff     LL............EE
  410fd8:	00000045 00000000 00000000 00000000     E...............
	...
  410ff4:	0c000000 99990c0c ffffff99 ffffffff     ................
  411004:	ffffffff ffffffff ffffffff ffffffff     ................
  411014:	ffffffff ffffffff ffffffff ffffffff     ................
  411024:	ffffffff ffffffff 555555ff 00020202     .........UUU....
	...
  411040:	2c2c0000 ffffff2c ffffffff ffffffff     ..,,,...........
  411050:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  411068:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  411078:	00454545 00000000 00000000 00000000     EEE.............
	...
  411094:	11110000 cbcbcb11 ffffffff ffffffff     ................
  4110a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4110b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4110c4:	ffffffff ffffffff ffffffff 8080ffff     ................
  4110d4:	03030380 00000000 00000000 00000000     ................
  4110e4:	7c000000 ffff7c7c ffffffff ffffffff     ...|||..........
  4110f4:	ffffffff ffffffff 001d1d1d 00000000     ................
  411104:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  411114:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
	...
  411134:	09090900 ffb5b5b5 ffffffff ffffffff     ................
  411144:	ffffffff ffffffff ffffffff ffffffff     ................
  411154:	ffffffff ffffffff ffffffff ffffffff     ................
  411164:	ffffffff ffffffff ffffffff ffffffff     ................
  411174:	61ffffff 00006161 00000000 00000000     ...aaa..........
  411184:	00000000 11111100 fffcfcfc ffffffff     ................
  411194:	ffffffff 77ffffff 01017777 00000001     .......www......
	...
  4111ac:	4d4d4d00 ffffffff ffffffff ffffffff     .MMM............
  4111bc:	00454545 00000000 00000000 00000000     EEE.............
	...
  4111d4:	85010101 ffff8585 ffffffff ffffffff     ................
  4111e4:	ffffffff ffffffff ffffffff ffffffff     ................
  4111f4:	ffffffff ffffffff ffffffff ffffffff     ................
  411204:	ffffffff ffffffff ffffffff ffffffff     ................
  411214:	ffffffff ffffffff 00343434 00000000     ........444.....
	...
  41122c:	6b6b0000 ffffff6b ffffffff bfbfffff     ..kkk...........
  41123c:	070707bf 00000000 00000000 00000000     ................
  41124c:	78000000 ffff7878 ffffffff ffffffff     ...xxx..........
  41125c:	4545ffff 00000045 00000000 00000000     ..EEE...........
	...
  411274:	27270000 ffffff27 ffffffff ffffffff     ..'''...........
  411284:	ffffffff ffffffff ffffffff bdbdbdff     ................
  411294:	6c737373 9e9e6c6c ffffff9e ffffffff     ssslll..........
  4112a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4112b4:	ffffffff ffffffff dadaffff 070707da     ................
	...
  4112d0:	ff1c1c1c ffffffff ffffffff 00212121     ............!!!.
	...
  4112ec:	1e1e0000 ffffff1e ffffffff ffffffff     ................
  4112fc:	ffffffff 00454545 00000000 00000000     ....EEE.........
	...
  411314:	02020200 ffb1b1b1 ffffffff ffffffff     ................
  411324:	ffffffff ffffffff b1b1b1ff 01202020     ............   .
  411334:	00000101 00000000 11000000 89891111     ................
  411344:	ffffff89 ffffffff ffffffff ffffffff     ................
  411354:	ffffffff ffffffff ffffffff 4cffffff     ...............L
  411364:	00004c4c 00000000 00000000 01010000     LL..............
  411374:	c2c2c201 9bffffff 01019b9b 00000001     ................
	...
  41138c:	0f0f0f00 ffd5d5d5 ffffffff ffffffff     ................
  41139c:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
	...
  4113b4:	1e000000 ffff1e1e ffffffff ffffffff     ................
  4113c4:	ffffffff ffffffff 09a8a8a8 00000909     ................
  4113d4:	03030300 1e1c1c1c 06061e1e 00000006     ................
  4113e4:	8d020202 ffff8d8d ffffffff ffffffff     ................
  4113f4:	ffffffff ffffffff ffffffff ffffffff     ................
  411404:	dcdcdcff 00030303 00000000 00000000     ................
  411414:	5c000000 ffff5c5c 232323ff 00000000     ...\\\...###....
	...
  41142c:	ab030303 ffffabab ffffffff ffffffff     ................
  41143c:	ffffffff ffffffff 00454545 00000000     ........EEE.....
	...
  411458:	55555500 ffffffff ffffffff ffffffff     .UUU............
  411468:	ffffffff 1515ffff 00000015 a50c0c0c     ................
  411478:	ffffa5a5 ffffffff 1ddcdcdc 09091d1d     ................
  411488:	77777709 fcffffff 4040fcfc 0f0f0f40     .www......@@@...
  411498:	7b151515 ffff7b7b ffffffff ffffffff     ...{{{..........
  4114a8:	1d1dffff 0000001d 00000000 00000000     ................
  4114b8:	2c2c2c00 01d5d5d5 00000101 00000000     .,,,............
  4114c8:	00000000 36360000 ffffff36 ffffffff     ......666.......
  4114d8:	ffffffff ffffffff ffffffff 4545ffff     ..............EE
  4114e8:	00000045 00000000 00000000 00000000     E...............
  4114f8:	bb000000 ffffbbbb ffffffff ffffffff     ................
  411508:	ffffffff 828282ff 00000000 81810000     ................
  411518:	ffffff81 ffffffff ffffffff cdcdcdff     ................
  411528:	ffc9c9c9 ffffffff 656565ff 6b030303     .........eee...k
  411538:	38386b6b 05050538 ffd7d7d7 ffffffff     kk888...........
  411548:	ffffffff 004c4c4c 00000000 00000000     ....LLL.........
  411558:	17000000 65651717 00000065 00000000     ......eee.......
  411568:	00000000 03030300 ffd0d0d0 ffffffff     ................
  411578:	ffffffff ffffffff ffffffff ffffffff     ................
  411588:	00363636 00000000 00000000 00000000     666.............
  411598:	02020000 fcfcfc02 ffffffff ffffffff     ................
  4115a8:	ffffffff 3fffffff 00003f3f 0c0c0c00     .......???......
  4115b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4115c8:	ffffffff ffffffff 38ffffff 18183838     ...........888..
  4115d8:	ffffff18 00c4c4c4 8d8d0000 ffffff8d     ................
  4115e8:	ffffffff 6b6bffff 0000006b 00000000     ......kkk.......
  4115f8:	00000000 09090900 002c2c2c 00000000     ........,,,.....
  411608:	00000000 1e000000 ffff1e1e ffffffff     ................
  411618:	ffffffff ffffffff ffffffff 3dffffff     ...............=
  411628:	00003d3d 00000000 00000000 00000000     ==..............
  411638:	00000000 ff0b0b0b ffffffff ffffffff     ................
  411648:	ffffffff ffffffff 323232ff 18000000     .........222....
  411658:	ffff1818 ffffffff ffffffff ffffffff     ................
  411668:	ffffffff ffffffff ffffffff 656565ff     .............eee
  411678:	6c040404 3a3a6c6c 0505053a ffd5d5d5     ...lll:::.......
  411688:	ffffffff ffffffff 008f8f8f 00000000     ................
  411698:	00000000 03000000 15150303 00000015     ................
	...
  4116b0:	4f4f4f00 ffffffff ffffffff ffffffff     .OOO............
  4116c0:	ffffffff 7474ffff 00000074 00000000     ......ttt.......
	...
  4116dc:	0f0f0000 ffffff0f ffffffff ffffffff     ................
  4116ec:	ffffffff 45ffffff 00004545 0a0a0a00     .......EEE......
  4116fc:	ffffffff ffffffff ffffffff ffffffff     ................
  41170c:	ffffffff ffffffff fcffffff 4141fcfc     ..............AA
  41171c:	0f0f0f41 7a151515 ffff7a7a ffffffff     A......zzz......
  41172c:	ffffffff a4a4ffff 000000a4 00000000     ................
  41173c:	00000000 01010100 000c0c0c 00000000     ................
  41174c:	00000000 76000000 ffff7676 ffffffff     .......vvv......
  41175c:	ffffffff ffffffff ffffffff 001b1b1b     ................
	...
  411780:	ff060606 ffffffff ffffffff ffffffff     ................
  411790:	ffffffff 989898ff 00000000 77770000     ..............ww
  4117a0:	ffffff77 ffffffff ffffffff dadadaff     w...............
  4117b0:	ffb7b7b7 ffffffff ffffffff ffffffff     ................
  4117c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4117d0:	ffffffff 007e7e7e 00000000 00000000     ....~~~.........
  4117e0:	05000000 04040505 00000004 00000000     ................
  4117f0:	00000000 9b9b9b00 ffffffff ffffffff     ................
  411800:	ffffffff ffffffff 0707ffff 00000007     ................
	...
  411824:	eaeaea00 ffffffff ffffffff ffffffff     ................
  411834:	ffffffff 1e1effff 0000001e 990b0b0b     ................
  411844:	ffff9999 ffffffff 23e7e7e7 03032323     ...........###..
  411854:	4c4c4c03 ffffffff ffffffff ffffffff     .LLL............
  411864:	ffffffff ffffffff ffffffff ffffffff     ................
  411874:	5f5fffff 0000005f 00000000 00000000     ..___...........
  411884:	0d0d0d00 00020202 00000000 00000000     ................
  411894:	9d000000 ffff9d9d ffffffff ffffffff     ................
  4118a4:	ffffffff ffffffff 00050505 00000000     ................
	...
  4118c4:	89000000 ffff8989 ffffffff ffffffff     ................
  4118d4:	ffffffff ffffffff 0cc2c2c2 00000c0c     ................
  4118e4:	03030300 231e1e1e 07072323 00000007     .......###......
  4118f4:	74010101 ffff7474 ffffffff ffffffff     ...ttt..........
  411904:	ffffffff ffffffff ffffffff ffffffff     ................
  411914:	ffffffff 00363636 00000000 00000000     ....666.........
  411924:	1e000000 06061e1e 00000006 00000000     ................
  411934:	00000000 77777700 ffffffff ffffffff     .....www........
  411944:	ffffffff ffffffff 1a1affff 0000001a     ................
	...
  411968:	38383800 ffffffff ffffffff ffffffff     .888............
  411978:	ffffffff ffffffff c2c2c2ff 01212121     ............!!!.
  411988:	00000101 00000000 11000000 81811111     ................
  411998:	ffffff81 ffffffff ffffffff ffffffff     ................
  4119a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4119b8:	0d0dffff 0000000d 00000000 00000000     ................
  4119c8:	3d3d3d00 00121212 00000000 00000000     .===............
  4119d8:	52000000 ffff5252 ffffffff ffffffff     ...RRR..........
  4119e8:	ffffffff ffffffff 006b6b6b 00000000     ........kkk.....
	...
  411a08:	0d000000 fcfc0d0d fffffffc ffffffff     ................
  411a18:	ffffffff ffffffff ffffffff ffffffff     ................
  411a28:	b3b3b3ff 686b6b6b a0a06868 ffffffa0     ....kkkhhh......
  411a38:	ffffffff ffffffff ffffffff ffffffff     ................
  411a48:	ffffffff ffffffff ffffffff ffffffff     ................
  411a58:	999999ff 00000000 00000000 00000000     ................
  411a68:	80000000 27278080 00000027 00000000     ......'''.......
  411a78:	00000000 1e1e1e00 ffffffff ffffffff     ................
  411a88:	ffffffff ffffffff ffffffff 363636ff     .............666
	...
  411ab0:	ff616161 ffffffff ffffffff ffffffff     aaa.............
  411ac0:	ffffffff ffffffff ffffffff ffffffff     ................
  411ad0:	ffffffff ffffffff ffffffff ffffffff     ................
  411ae0:	ffffffff ffffffff ffffffff ffffffff     ................
  411af0:	ffffffff ffffffff 23ffffff 00002323     ...........###..
	...
  411b08:	09090000 f3f3f309 00545454 00000000     ........TTT.....
  411b18:	00000000 03000000 d5d50303 ffffffd5     ................
  411b28:	ffffffff ffffffff ffffffff ffffffff     ................
  411b38:	6464ffff 14141464 00010101 00000000     ..ddd...........
	...
  411b50:	0c0c0000 ededed0c ffffffff ffffffff     ................
  411b60:	ffffffff ffffffff ffffffff ffffffff     ................
  411b70:	ffffffff ffffffff ffffffff ffffffff     ................
  411b80:	ffffffff ffffffff ffffffff ffffffff     ................
  411b90:	ffffffff ffffffff 8888ffff 00000088     ................
	...
  411bac:	ff343434 bfbfffff 010101bf 00000000     444.............
	...
  411bc4:	ff3a3a3a ffffffff ffffffff ffffffff     :::.............
  411bd4:	ffffffff ffffffff ffffffff f0f0ffff     ................
  411be4:	494949f0 00000000 00000000 00000000     .III............
  411bf4:	32000000 ffff3232 ffffffff ffffffff     ...222..........
  411c04:	ffffffff ffffffff ffffffff ffffffff     ................
  411c14:	ffffffff ffffffff ffffffff ffffffff     ................
  411c24:	ffffffff ffffffff ffffffff ffffffff     ................
  411c34:	ffffffff dadadaff 000f0f0f 00000000     ................
  411c44:	00000000 02000000 b7b70202 ffffffb7     ................
  411c54:	1effffff 00001e1e 00000000 00000000     ................
  411c64:	03030000 b1b1b103 ffffffff ffffffff     ................
  411c74:	ffffffff ffffffff ffffffff ffffffff     ................
  411c84:	edffffff 0b0beded 0000000b 00000000     ................
	...
  411c9c:	ff545454 ffffffff ffffffff ffffffff     TTT.............
  411cac:	ffffffff ffffffff ffffffff ffffffff     ................
  411cbc:	ffffffff ffffffff ffffffff ffffffff     ................
  411ccc:	ffffffff ffffffff ffffffff 1ef9f9f9     ................
  411cdc:	00001e1e 00000000 00000000 00000000     ................
  411cec:	32323200 ffffffff ffffffff 7e7e7eff     .222.........~~~
	...
  411d08:	11000000 dfdf1111 ffffffdf ffffffff     ................
  411d18:	ffffffff ffffffff ffffffff ffffffff     ................
  411d28:	ffffffff 00707070 00000000 00000000     ....ppp.........
  411d38:	00000000 02020000 54545402 ffffffff     .........TTT....
  411d48:	ffffffff ffffffff ffffffff ffffffff     ................
  411d58:	ffffffff ffffffff ffffffff ffffffff     ................
  411d68:	ffffffff ffffffff ffffffff e4ffffff     ................
  411d78:	2525e4e4 00000025 00000000 00000000     ..%%%...........
  411d88:	00000000 d5090909 ffffd5d5 ffffffff     ................
  411d98:	ffffffff 1d1dffff 0000001d 00000000     ................
	...
  411db0:	e21e1e1e ffffe2e2 ffffffff ffffffff     ................
  411dc0:	ffffffff ffffffff ffffffff ffffffff     ................
  411dd0:	2c2c2cff 00000000 00000000 00000000     .,,,............
  411de0:	00000000 30300000 ededed30 ffffffff     ......000.......
  411df0:	ffffffff ffffffff ffffffff ffffffff     ................
  411e00:	ffffffff ffffffff ffffffff ffffffff     ................
  411e10:	ffffffff b3b3ffff 131313b3 00000000     ................
	...
  411e28:	01000000 74740101 ffffff74 ffffffff     ......ttt.......
  411e38:	ffffffff ffffffff 04adadad 00000404     ................
	...
  411e54:	11111100 ffafafaf ffffffff ffffffff     ................
  411e64:	ffffffff ffffffff ffffffff eaffffff     ................
  411e74:	1515eaea 00000015 00000000 00000000     ................
  411e84:	00000000 0b000000 5d5d0b0b f9f9f95d     ..........]]]...
  411e94:	ffffffff ffffffff ffffffff ffffffff     ................
  411ea4:	ffffffff ffffffff ffffffff d2d2ffff     ................
  411eb4:	383838d2 00030303 00000000 00000000     .888............
	...
  411ecc:	40404000 ffffffff ffffffff ffffffff     .@@@............
  411edc:	ffffffff ffffffff 616161ff 00000000     .........aaa....
	...
  411ef8:	04040000 3a3a3a04 ffd2d2d2 ffffffff     .....:::........
  411f08:	ffffffff ffffffff ffffffff ffffffff     ................
  411f18:	10cdcdcd 00001010 00000000 00000000     ................
	...
  411f30:	0d000000 37370d0d 85858537 ffededed     ......777.......
  411f40:	ffffffff ffffffff d5ffffff 6565d5d5     ..............ee
  411f50:	27272765 00050505 00000000 00000000     e'''............
	...
  411f6c:	ff303030 ffffffff ffffffff ffffffff     000.............
  411f7c:	ffffffff ffffffff ffffffff 4242ffff     ..............BB
  411f8c:	00000042 00000000 00000000 00000000     B...............
  411f9c:	00000000 04040000 20202004 82525252     .........   RRR.
  411fac:	a2a28282 b7b7b7a2 5c858585 27275c5c     ...........\\\''
  411fbc:	06060627 00000000 00000000 00000000     '...............
	...
  411fe0:	07070700 0f101010 04040f0f 00000004     ................
	...
  412008:	3b000000 fcfc3b3b fffffffc ffffffff     ...;;;..........
  412018:	ffffffff ffffffff ffffffff ffffffff     ................
  412028:	ffffffff 42ffffff 00004242 00000000     .......BBB......
	...
  4120a4:	05000000 64640505 ffffff64 ffffffff     ......ddd.......
  4120b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4120c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4120d4:	05646464 00000505 00000000 00000000     ddd.............
	...
  412144:	22220000 b5b5b522 ffffffff ffffffff     .."""...........
  412154:	ffffffff ffffffff ffffffff ffffffff     ................
  412164:	ffffffff ffffffff ffffffff ffffffff     ................
  412174:	ffffffff b3b3b3ff 00212121 00000000     ........!!!.....
	...
  4121ac:	18000000 49491818 11111149 00000000     ......III.......
	...
  4121dc:	01000000 1e1e0101 8686861e ffffffff     ................
  4121ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4121fc:	ffffffff ffffffff ffffffff ffffffff     ................
  41220c:	ffffffff ffffffff ffffffff ffffffff     ................
  41221c:	ffffffff 858585ff 02212121 00000202     ........!!!.....
	...
  412248:	1b010101 6d6d1b1b ffffff6d ffffffff     ......mmm.......
  412258:	8989ffff 39393989 03131313 00000303     .....999........
	...
  412278:	1e050505 4a4a1e1e bbbbbb4a ffffffff     ......JJJ.......
  412288:	ffffffff ffffffff ffffffff ffffffff     ................
  412298:	ffffffff ffffffff ffffffff ffffffff     ................
  4122a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4122b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4122c8:	cdcdcdff 2b5a5a5a 14142b2b 07070714     ....ZZZ+++......
  4122d8:	02020202 09090202 11111109 52282828     ............(((R
  4122e8:	b7b75252 ffffffb7 ffffffff ffffffff     RR..............
  4122f8:	ffffffff ffffffff ffffffff f6f6f6ff     ................
  412308:	85a4a4a4 73738585 76767673 bf888888     ......sssvvv....
  412318:	ffffbfbf ffffffff ffffffff ffffffff     ................
  412328:	ffffffff ffffffff ffffffff ffffffff     ................
  412338:	ffffffff ffffffff ffffffff ffffffff     ................
  412348:	0000ffff 0074786d 6c696146 74206465     ....mxt.Failed t
  412358:	7263206f 65746165 73657420 656c2074     o create test le
  412368:	61742064 0a0d6b73 00000000 0064636c     d task......lcd.
  412378:	64253a78 253a7920 00000a64 63617473     x:%d y:%d...stac
  412388:	766f206b 6c667265 2520776f 73252078     k overflow %x %s
  412398:	00000a0d                                ....

0041239c <_global_impure_ptr>:
  41239c:	20400018 33323130 37363534 42413938     ..@ 0123456789AB
  4123ac:	46454443 00000000 33323130 37363534     CDEF....01234567
  4123bc:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  4123cc:	0000296c                                l)..

004123d0 <blanks.7217>:
  4123d0:	20202020 20202020 20202020 20202020                     

004123e0 <zeroes.7218>:
  4123e0:	30303030 30303030 30303030 30303030     0000000000000000
  4123f0:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00412400 <_ctype_>:
  412400:	20202000 20202020 28282020 20282828     .         ((((( 
  412410:	20202020 20202020 20202020 20202020                     
  412420:	10108820 10101010 10101010 10101010      ...............
  412430:	04040410 04040404 10040404 10101010     ................
  412440:	41411010 41414141 01010101 01010101     ..AAAAAA........
  412450:	01010101 01010101 01010101 10101010     ................
  412460:	42421010 42424242 02020202 02020202     ..BBBBBB........
  412470:	02020202 02020202 02020202 10101010     ................
  412480:	00000020 00000000 00000000 00000000      ...............
	...

00412504 <_init>:
  412504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  412506:	bf00      	nop
  412508:	bcf8      	pop	{r3, r4, r5, r6, r7}
  41250a:	bc08      	pop	{r3}
  41250c:	469e      	mov	lr, r3
  41250e:	4770      	bx	lr

00412510 <__init_array_start>:
  412510:	00405a39 	.word	0x00405a39

00412514 <__frame_dummy_init_array_entry>:
  412514:	0040018d                                ..@.

00412518 <_fini>:
  412518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41251a:	bf00      	nop
  41251c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  41251e:	bc08      	pop	{r3}
  412520:	469e      	mov	lr, r3
  412522:	4770      	bx	lr

00412524 <__fini_array_start>:
  412524:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <uxCriticalNesting>:
20400010:	aaaa aaaa                                   ....

20400014 <_impure_ptr>:
20400014:	0018 2040                                   ..@ 

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__malloc_av_>:
	...
20400448:	0440 2040 0440 2040 0448 2040 0448 2040     @.@ @.@ H.@ H.@ 
20400458:	0450 2040 0450 2040 0458 2040 0458 2040     P.@ P.@ X.@ X.@ 
20400468:	0460 2040 0460 2040 0468 2040 0468 2040     `.@ `.@ h.@ h.@ 
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 

20400848 <__malloc_sbrk_base>:
20400848:	ffff ffff                                   ....

2040084c <__malloc_trim_threshold>:
2040084c:	0000 0002                                   ....

20400850 <__atexit_recursive_mutex>:
20400850:	c820 2040                                    .@ 

20400854 <__global_locale>:
20400854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	6b31 0040 64c1 0040 0000 0000 2400 0041     1k@..d@......$A.
20400944:	23fc 0041 2370 0041 2370 0041 2370 0041     .#A.p#A.p#A.p#A.
20400954:	2370 0041 2370 0041 2370 0041 2370 0041     p#A.p#A.p#A.p#A.
20400964:	2370 0041 2370 0041 ffff ffff ffff ffff     p#A.p#A.........
20400974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
